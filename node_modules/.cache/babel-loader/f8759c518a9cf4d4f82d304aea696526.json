{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst ora = require(\"ora\");\n\nconst marked = require(\"marked\");\n\nconst TerminalRenderer = require(\"marked-terminal\");\n\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst extensionsApi = require(\"../extensions/extensionsApi\");\n\nconst secretsUtils = require(\"../extensions/secretsUtils\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst utils = require(\"../utils\");\n\nconst logger_1 = require(\"../logger\");\n\nmarked.setOptions({\n  renderer: new TerminalRenderer()\n});\n\nfunction consoleUninstallOnly(projectId, instanceId) {\n  const instanceURL = `https://console.firebase.google.com/project/${projectId}/extensions/instances/${instanceId}`;\n  const consoleUninstall = \"This extension has additional uninstall checks that are not currently supported by the CLI, and can only be uninstalled through the Firebase Console. \" + `Please visit **[${instanceURL}](${instanceURL})** to uninstall this extension.`;\n  logger_1.logger.info(\"\\n\");\n  utils.logLabeledWarning(extensionsHelper_1.logPrefix, marked(consoleUninstall));\n  return Promise.resolve();\n}\n\nexports.default = new command_1.Command(\"ext:uninstall <extensionInstanceId>\").description(\"uninstall an extension that is installed in your Firebase project by instance ID\").withForce().before(requirePermissions_1.requirePermissions, [\"firebaseextensions.instances.delete\"]).before(extensionsHelper_1.ensureExtensionsApiEnabled).before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extMinVersion\").action(async (instanceId, options) => {\n  const projectId = projectUtils_1.needProjectId(options);\n  let instance;\n\n  try {\n    instance = await extensionsApi.getInstance(projectId, instanceId);\n  } catch (err) {\n    if (err.status === 404) {\n      return utils.reject(`No extension instance ${instanceId} in project ${projectId}.`, {\n        exit: 1\n      });\n    }\n\n    throw err;\n  }\n\n  if (_.get(instance, \"config.source.spec.name\") === \"pubsub-stream-bigquery\") {\n    return consoleUninstallOnly(projectId, instanceId);\n  }\n\n  if (!options.force) {\n    const serviceAccountMessage = `Uninstalling deletes the service account used by this extension instance:\\n${clc.bold(instance.serviceAccountEmail)}\\n\\n`;\n    const managedSecrets = await secretsUtils.getManagedSecrets(instance);\n    const resourcesMessage = _.get(instance, \"config.source.spec.resources\", []).length ? \"Uninstalling deletes all extension resources created for this extension instance:\\n\" + instance.config.source.spec.resources.map(resource => clc.bold(`- ${extensionsHelper_1.resourceTypeToNiceName[resource.type] || resource.type}: ${resource.name} \\n`)).join(\"\") + managedSecrets.map(secretsUtils.prettySecretName).map(s => clc.bold(`- Secret: ${s}\\n`)).join(\"\") + \"\\n\" : \"\";\n    const artifactsMessage = `The following ${clc.bold(\"will not\")} be deleted:\\n` + \"Any artifacts (for example, stored images) created by this extension instance.\\n\" + \"Any other project resources with which this extension instance interacted.\\n\";\n    const extensionDeletionMessage = `Here's what will happen when you uninstall ${clc.bold(instanceId)} from project ${clc.bold(projectId)}. Be aware that this cannot be undone.\\n\\n` + `${serviceAccountMessage}` + `${resourcesMessage}` + `${artifactsMessage}`;\n    logger_1.logger.info(extensionDeletionMessage);\n    const confirmedExtensionDeletion = await prompt_1.promptOnce({\n      type: \"confirm\",\n      default: true,\n      message: \"Are you sure that you wish to uninstall this extension?\"\n    });\n\n    if (!confirmedExtensionDeletion) {\n      return utils.reject(\"Command aborted.\", {\n        exit: 1\n      });\n    }\n  }\n\n  const spinner = ora.default(` ${clc.green.bold(extensionsHelper_1.logPrefix)}: uninstalling ${clc.bold(instanceId)}. This usually takes 1 to 2 minutes...`);\n  spinner.start();\n\n  try {\n    spinner.info();\n    spinner.text = ` ${clc.green.bold(extensionsHelper_1.logPrefix)}: deleting your extension instance's resources.`;\n    spinner.start();\n    await extensionsApi.deleteInstance(projectId, instanceId);\n    spinner.succeed(` ${clc.green.bold(extensionsHelper_1.logPrefix)}: deleted your extension instance's resources.`);\n  } catch (err) {\n    if (spinner.isSpinning) {\n      spinner.fail();\n    }\n\n    if (err instanceof error_1.FirebaseError) {\n      throw err;\n    }\n\n    return utils.reject(`Error occurred uninstalling extension ${instanceId}`, {\n      original: err\n    });\n  }\n\n  utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `uninstalled ${clc.bold(instanceId)}`);\n});","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/commands/ext-uninstall.js"],"names":["Object","defineProperty","exports","value","_","require","clc","ora","marked","TerminalRenderer","checkMinRequiredVersion_1","command_1","error_1","projectUtils_1","extensionsApi","secretsUtils","extensionsHelper_1","prompt_1","requirePermissions_1","utils","logger_1","setOptions","renderer","consoleUninstallOnly","projectId","instanceId","instanceURL","consoleUninstall","logger","info","logLabeledWarning","logPrefix","Promise","resolve","default","Command","description","withForce","before","requirePermissions","ensureExtensionsApiEnabled","checkMinRequiredVersion","action","options","needProjectId","instance","getInstance","err","status","reject","exit","get","force","serviceAccountMessage","bold","serviceAccountEmail","managedSecrets","getManagedSecrets","resourcesMessage","length","config","source","spec","resources","map","resource","resourceTypeToNiceName","type","name","join","prettySecretName","s","artifactsMessage","extensionDeletionMessage","confirmedExtensionDeletion","promptOnce","message","spinner","green","start","text","deleteInstance","succeed","isSpinning","fail","FirebaseError","original","logLabeledSuccess"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst ora = require(\"ora\");\nconst marked = require(\"marked\");\nconst TerminalRenderer = require(\"marked-terminal\");\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst extensionsApi = require(\"../extensions/extensionsApi\");\nconst secretsUtils = require(\"../extensions/secretsUtils\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst prompt_1 = require(\"../prompt\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst utils = require(\"../utils\");\nconst logger_1 = require(\"../logger\");\nmarked.setOptions({\n    renderer: new TerminalRenderer(),\n});\nfunction consoleUninstallOnly(projectId, instanceId) {\n    const instanceURL = `https://console.firebase.google.com/project/${projectId}/extensions/instances/${instanceId}`;\n    const consoleUninstall = \"This extension has additional uninstall checks that are not currently supported by the CLI, and can only be uninstalled through the Firebase Console. \" +\n        `Please visit **[${instanceURL}](${instanceURL})** to uninstall this extension.`;\n    logger_1.logger.info(\"\\n\");\n    utils.logLabeledWarning(extensionsHelper_1.logPrefix, marked(consoleUninstall));\n    return Promise.resolve();\n}\nexports.default = new command_1.Command(\"ext:uninstall <extensionInstanceId>\")\n    .description(\"uninstall an extension that is installed in your Firebase project by instance ID\")\n    .withForce()\n    .before(requirePermissions_1.requirePermissions, [\"firebaseextensions.instances.delete\"])\n    .before(extensionsHelper_1.ensureExtensionsApiEnabled)\n    .before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extMinVersion\")\n    .action(async (instanceId, options) => {\n    const projectId = projectUtils_1.needProjectId(options);\n    let instance;\n    try {\n        instance = await extensionsApi.getInstance(projectId, instanceId);\n    }\n    catch (err) {\n        if (err.status === 404) {\n            return utils.reject(`No extension instance ${instanceId} in project ${projectId}.`, {\n                exit: 1,\n            });\n        }\n        throw err;\n    }\n    if (_.get(instance, \"config.source.spec.name\") === \"pubsub-stream-bigquery\") {\n        return consoleUninstallOnly(projectId, instanceId);\n    }\n    if (!options.force) {\n        const serviceAccountMessage = `Uninstalling deletes the service account used by this extension instance:\\n${clc.bold(instance.serviceAccountEmail)}\\n\\n`;\n        const managedSecrets = await secretsUtils.getManagedSecrets(instance);\n        const resourcesMessage = _.get(instance, \"config.source.spec.resources\", []).length\n            ? \"Uninstalling deletes all extension resources created for this extension instance:\\n\" +\n                instance.config.source.spec.resources\n                    .map((resource) => clc.bold(`- ${extensionsHelper_1.resourceTypeToNiceName[resource.type] || resource.type}: ${resource.name} \\n`))\n                    .join(\"\") +\n                managedSecrets\n                    .map(secretsUtils.prettySecretName)\n                    .map((s) => clc.bold(`- Secret: ${s}\\n`))\n                    .join(\"\") +\n                \"\\n\"\n            : \"\";\n        const artifactsMessage = `The following ${clc.bold(\"will not\")} be deleted:\\n` +\n            \"Any artifacts (for example, stored images) created by this extension instance.\\n\" +\n            \"Any other project resources with which this extension instance interacted.\\n\";\n        const extensionDeletionMessage = `Here's what will happen when you uninstall ${clc.bold(instanceId)} from project ${clc.bold(projectId)}. Be aware that this cannot be undone.\\n\\n` +\n            `${serviceAccountMessage}` +\n            `${resourcesMessage}` +\n            `${artifactsMessage}`;\n        logger_1.logger.info(extensionDeletionMessage);\n        const confirmedExtensionDeletion = await prompt_1.promptOnce({\n            type: \"confirm\",\n            default: true,\n            message: \"Are you sure that you wish to uninstall this extension?\",\n        });\n        if (!confirmedExtensionDeletion) {\n            return utils.reject(\"Command aborted.\", { exit: 1 });\n        }\n    }\n    const spinner = ora.default(` ${clc.green.bold(extensionsHelper_1.logPrefix)}: uninstalling ${clc.bold(instanceId)}. This usually takes 1 to 2 minutes...`);\n    spinner.start();\n    try {\n        spinner.info();\n        spinner.text = ` ${clc.green.bold(extensionsHelper_1.logPrefix)}: deleting your extension instance's resources.`;\n        spinner.start();\n        await extensionsApi.deleteInstance(projectId, instanceId);\n        spinner.succeed(` ${clc.green.bold(extensionsHelper_1.logPrefix)}: deleted your extension instance's resources.`);\n    }\n    catch (err) {\n        if (spinner.isSpinning) {\n            spinner.fail();\n        }\n        if (err instanceof error_1.FirebaseError) {\n            throw err;\n        }\n        return utils.reject(`Error occurred uninstalling extension ${instanceId}`, { original: err });\n    }\n    utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `uninstalled ${clc.bold(instanceId)}`);\n});\n"]},"metadata":{},"sourceType":"script"}