{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PubsubEmulator = void 0;\n\nconst uuid = require(\"uuid\");\n\nconst pubsub_1 = require(\"@google-cloud/pubsub\");\n\nconst api = require(\"../api\");\n\nconst downloadableEmulators = require(\"./downloadableEmulators\");\n\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst constants_1 = require(\"./constants\");\n\nconst error_1 = require(\"../error\");\n\nconst registry_1 = require(\"./registry\");\n\nclass PubsubEmulator {\n  constructor(args) {\n    this.args = args;\n    this.logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.PUBSUB);\n    const {\n      host,\n      port\n    } = this.getInfo();\n    this.pubsub = new pubsub_1.PubSub({\n      apiEndpoint: `${host}:${port}`,\n      projectId: this.args.projectId\n    });\n    this.triggersForTopic = new Map();\n    this.subscriptionForTopic = new Map();\n  }\n\n  async start() {\n    return downloadableEmulators.start(types_1.Emulators.PUBSUB, this.args);\n  }\n\n  connect() {\n    return Promise.resolve();\n  }\n\n  async stop() {\n    await downloadableEmulators.stop(types_1.Emulators.PUBSUB);\n  }\n\n  getInfo() {\n    const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.PUBSUB);\n    const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.PUBSUB);\n    return {\n      name: this.getName(),\n      host,\n      port,\n      pid: downloadableEmulators.getPID(types_1.Emulators.PUBSUB)\n    };\n  }\n\n  getName() {\n    return types_1.Emulators.PUBSUB;\n  }\n\n  async addTrigger(topicName, triggerKey, signatureType) {\n    this.logger.logLabeled(\"DEBUG\", \"pubsub\", `addTrigger(${topicName}, ${triggerKey}, ${signatureType})`);\n    const triggers = this.triggersForTopic.get(topicName) || [];\n\n    if (triggers.some(t => t.triggerKey === triggerKey) && this.subscriptionForTopic.has(topicName)) {\n      this.logger.logLabeled(\"DEBUG\", \"pubsub\", \"Trigger already exists\");\n      return;\n    }\n\n    const topic = this.pubsub.topic(topicName);\n\n    try {\n      this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Creating topic: ${topicName}`);\n      await topic.create();\n    } catch (e) {\n      if (e && e.code === 6) {\n        this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Topic ${topicName} exists`);\n      } else {\n        throw new error_1.FirebaseError(`Could not create topic ${topicName}`, {\n          original: e\n        });\n      }\n    }\n\n    const subName = `emulator-sub-${topicName}`;\n    let sub;\n\n    try {\n      this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Creating sub for topic: ${topicName}`);\n      [sub] = await topic.createSubscription(subName);\n    } catch (e) {\n      if (e && e.code === 6) {\n        this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Sub for ${topicName} exists`);\n        sub = topic.subscription(`emulator-sub-${topicName}`);\n      } else {\n        throw new error_1.FirebaseError(`Could not create sub ${subName}`, {\n          original: e\n        });\n      }\n    }\n\n    sub.on(\"message\", message => {\n      this.onMessage(topicName, message);\n    });\n    triggers.push({\n      triggerKey,\n      signatureType\n    });\n    this.triggersForTopic.set(topicName, triggers);\n    this.subscriptionForTopic.set(topicName, sub);\n  }\n\n  getRequestOptions(topic, message, signatureType) {\n    const baseOpts = {\n      origin: `http://${registry_1.EmulatorRegistry.getInfoHostString(registry_1.EmulatorRegistry.get(types_1.Emulators.FUNCTIONS).getInfo())}`\n    };\n\n    if (signatureType === \"event\") {\n      return Object.assign(Object.assign({}, baseOpts), {\n        data: {\n          context: {\n            eventId: uuid.v4(),\n            resource: {\n              service: \"pubsub.googleapis.com\",\n              name: `projects/${this.args.projectId}/topics/${topic}`\n            },\n            eventType: \"google.pubsub.topic.publish\",\n            timestamp: message.publishTime.toISOString()\n          },\n          data: {\n            data: message.data,\n            attributes: message.attributes\n          }\n        }\n      });\n    } else if (signatureType === \"cloudevent\") {\n      const data = {\n        message: {\n          messageId: message.id,\n          publishTime: message.publishTime,\n          attributes: message.attributes,\n          orderingKey: message.orderingKey,\n          data: message.data.toString(\"base64\")\n        },\n        subscription: this.subscriptionForTopic.get(topic).name\n      };\n      const ce = {\n        specVersion: 1,\n        type: \"google.cloud.pubsub.topic.v1.messagePublished\",\n        source: `//pubsub.googleapis.com/projects/${this.args.projectId}/topics/${topic}`,\n        data\n      };\n      return Object.assign(Object.assign({}, baseOpts), {\n        headers: {\n          \"Content-Type\": \"application/cloudevents+json; charset=UTF-8\"\n        },\n        data: ce\n      });\n    }\n\n    throw new error_1.FirebaseError(`Unsupported trigger signature: ${signatureType}`);\n  }\n\n  async onMessage(topicName, message) {\n    this.logger.logLabeled(\"DEBUG\", \"pubsub\", `onMessage(${topicName}, ${message.id})`);\n    const triggers = this.triggersForTopic.get(topicName);\n\n    if (!triggers || triggers.length === 0) {\n      throw new error_1.FirebaseError(`No trigger for topic: ${topicName}`);\n    }\n\n    if (!registry_1.EmulatorRegistry.get(types_1.Emulators.FUNCTIONS)) {\n      throw new error_1.FirebaseError(`Attempted to execute pubsub trigger for topic ${topicName} but could not find Functions emulator`);\n    }\n\n    this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Executing ${triggers.length} matching triggers (${JSON.stringify(triggers.map(t => t.triggerKey))})`);\n\n    for (const {\n      triggerKey,\n      signatureType\n    } of triggers) {\n      const reqOpts = this.getRequestOptions(topicName, message, signatureType);\n\n      try {\n        await api.request(\"POST\", `/functions/projects/${this.args.projectId}/triggers/${triggerKey}`, reqOpts);\n      } catch (e) {\n        this.logger.logLabeled(\"DEBUG\", \"pubsub\", e);\n      }\n    }\n\n    this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Acking message ${message.id}`);\n    message.ack();\n  }\n\n}\n\nexports.PubsubEmulator = PubsubEmulator;","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/emulator/pubsubEmulator.js"],"names":["Object","defineProperty","exports","value","PubsubEmulator","uuid","require","pubsub_1","api","downloadableEmulators","emulatorLogger_1","types_1","constants_1","error_1","registry_1","constructor","args","logger","EmulatorLogger","forEmulator","Emulators","PUBSUB","host","port","getInfo","pubsub","PubSub","apiEndpoint","projectId","triggersForTopic","Map","subscriptionForTopic","start","connect","Promise","resolve","stop","Constants","getDefaultHost","getDefaultPort","name","getName","pid","getPID","addTrigger","topicName","triggerKey","signatureType","logLabeled","triggers","get","some","t","has","topic","create","e","code","FirebaseError","original","subName","sub","createSubscription","subscription","on","message","onMessage","push","set","getRequestOptions","baseOpts","origin","EmulatorRegistry","getInfoHostString","FUNCTIONS","assign","data","context","eventId","v4","resource","service","eventType","timestamp","publishTime","toISOString","attributes","messageId","id","orderingKey","toString","ce","specVersion","type","source","headers","length","JSON","stringify","map","reqOpts","request","ack"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PubsubEmulator = void 0;\nconst uuid = require(\"uuid\");\nconst pubsub_1 = require(\"@google-cloud/pubsub\");\nconst api = require(\"../api\");\nconst downloadableEmulators = require(\"./downloadableEmulators\");\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\nconst types_1 = require(\"../emulator/types\");\nconst constants_1 = require(\"./constants\");\nconst error_1 = require(\"../error\");\nconst registry_1 = require(\"./registry\");\nclass PubsubEmulator {\n    constructor(args) {\n        this.args = args;\n        this.logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.PUBSUB);\n        const { host, port } = this.getInfo();\n        this.pubsub = new pubsub_1.PubSub({\n            apiEndpoint: `${host}:${port}`,\n            projectId: this.args.projectId,\n        });\n        this.triggersForTopic = new Map();\n        this.subscriptionForTopic = new Map();\n    }\n    async start() {\n        return downloadableEmulators.start(types_1.Emulators.PUBSUB, this.args);\n    }\n    connect() {\n        return Promise.resolve();\n    }\n    async stop() {\n        await downloadableEmulators.stop(types_1.Emulators.PUBSUB);\n    }\n    getInfo() {\n        const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.PUBSUB);\n        const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.PUBSUB);\n        return {\n            name: this.getName(),\n            host,\n            port,\n            pid: downloadableEmulators.getPID(types_1.Emulators.PUBSUB),\n        };\n    }\n    getName() {\n        return types_1.Emulators.PUBSUB;\n    }\n    async addTrigger(topicName, triggerKey, signatureType) {\n        this.logger.logLabeled(\"DEBUG\", \"pubsub\", `addTrigger(${topicName}, ${triggerKey}, ${signatureType})`);\n        const triggers = this.triggersForTopic.get(topicName) || [];\n        if (triggers.some((t) => t.triggerKey === triggerKey) &&\n            this.subscriptionForTopic.has(topicName)) {\n            this.logger.logLabeled(\"DEBUG\", \"pubsub\", \"Trigger already exists\");\n            return;\n        }\n        const topic = this.pubsub.topic(topicName);\n        try {\n            this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Creating topic: ${topicName}`);\n            await topic.create();\n        }\n        catch (e) {\n            if (e && e.code === 6) {\n                this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Topic ${topicName} exists`);\n            }\n            else {\n                throw new error_1.FirebaseError(`Could not create topic ${topicName}`, { original: e });\n            }\n        }\n        const subName = `emulator-sub-${topicName}`;\n        let sub;\n        try {\n            this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Creating sub for topic: ${topicName}`);\n            [sub] = await topic.createSubscription(subName);\n        }\n        catch (e) {\n            if (e && e.code === 6) {\n                this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Sub for ${topicName} exists`);\n                sub = topic.subscription(`emulator-sub-${topicName}`);\n            }\n            else {\n                throw new error_1.FirebaseError(`Could not create sub ${subName}`, { original: e });\n            }\n        }\n        sub.on(\"message\", (message) => {\n            this.onMessage(topicName, message);\n        });\n        triggers.push({ triggerKey, signatureType });\n        this.triggersForTopic.set(topicName, triggers);\n        this.subscriptionForTopic.set(topicName, sub);\n    }\n    getRequestOptions(topic, message, signatureType) {\n        const baseOpts = {\n            origin: `http://${registry_1.EmulatorRegistry.getInfoHostString(registry_1.EmulatorRegistry.get(types_1.Emulators.FUNCTIONS).getInfo())}`,\n        };\n        if (signatureType === \"event\") {\n            return Object.assign(Object.assign({}, baseOpts), { data: {\n                    context: {\n                        eventId: uuid.v4(),\n                        resource: {\n                            service: \"pubsub.googleapis.com\",\n                            name: `projects/${this.args.projectId}/topics/${topic}`,\n                        },\n                        eventType: \"google.pubsub.topic.publish\",\n                        timestamp: message.publishTime.toISOString(),\n                    },\n                    data: {\n                        data: message.data,\n                        attributes: message.attributes,\n                    },\n                } });\n        }\n        else if (signatureType === \"cloudevent\") {\n            const data = {\n                message: {\n                    messageId: message.id,\n                    publishTime: message.publishTime,\n                    attributes: message.attributes,\n                    orderingKey: message.orderingKey,\n                    data: message.data.toString(\"base64\"),\n                },\n                subscription: this.subscriptionForTopic.get(topic).name,\n            };\n            const ce = {\n                specVersion: 1,\n                type: \"google.cloud.pubsub.topic.v1.messagePublished\",\n                source: `//pubsub.googleapis.com/projects/${this.args.projectId}/topics/${topic}`,\n                data,\n            };\n            return Object.assign(Object.assign({}, baseOpts), { headers: { \"Content-Type\": \"application/cloudevents+json; charset=UTF-8\" }, data: ce });\n        }\n        throw new error_1.FirebaseError(`Unsupported trigger signature: ${signatureType}`);\n    }\n    async onMessage(topicName, message) {\n        this.logger.logLabeled(\"DEBUG\", \"pubsub\", `onMessage(${topicName}, ${message.id})`);\n        const triggers = this.triggersForTopic.get(topicName);\n        if (!triggers || triggers.length === 0) {\n            throw new error_1.FirebaseError(`No trigger for topic: ${topicName}`);\n        }\n        if (!registry_1.EmulatorRegistry.get(types_1.Emulators.FUNCTIONS)) {\n            throw new error_1.FirebaseError(`Attempted to execute pubsub trigger for topic ${topicName} but could not find Functions emulator`);\n        }\n        this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Executing ${triggers.length} matching triggers (${JSON.stringify(triggers.map((t) => t.triggerKey))})`);\n        for (const { triggerKey, signatureType } of triggers) {\n            const reqOpts = this.getRequestOptions(topicName, message, signatureType);\n            try {\n                await api.request(\"POST\", `/functions/projects/${this.args.projectId}/triggers/${triggerKey}`, reqOpts);\n            }\n            catch (e) {\n                this.logger.logLabeled(\"DEBUG\", \"pubsub\", e);\n            }\n        }\n        this.logger.logLabeled(\"DEBUG\", \"pubsub\", `Acking message ${message.id}`);\n        message.ack();\n    }\n}\nexports.PubsubEmulator = PubsubEmulator;\n"]},"metadata":{},"sourceType":"script"}