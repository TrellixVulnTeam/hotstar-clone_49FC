{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logEntries = exports.getApiFilter = void 0;\n\nconst logger_1 = require(\"../logger\");\n\nconst previews_1 = require(\"../previews\");\n\nfunction getApiFilter(functionList) {\n  const baseFilter = previews_1.previews.functionsv2 ? 'resource.type=\"cloud_function\" OR ' + '(resource.type=\"cloud_run_revision\" AND ' + 'labels.\"goog-managed-by\"=\"cloudfunctions\")' : 'resource.type=\"cloud_function\"';\n\n  if (functionList) {\n    const apiFuncFilters = functionList.split(\",\").map(fn => {\n      return previews_1.previews.functionsv2 ? `resource.labels.function_name=\"${fn}\" ` + `OR resource.labels.service_name=\"${fn}\"` : `resource.labels.function_name=\"${fn}\"`;\n    });\n    return baseFilter + `\\n(${apiFuncFilters.join(\" OR \")})`;\n  }\n\n  return baseFilter;\n}\n\nexports.getApiFilter = getApiFilter;\n\nfunction logEntries(entries) {\n  if (!entries || entries.length === 0) {\n    logger_1.logger.info(\"No log entries found.\");\n    return;\n  }\n\n  for (let i = entries.length - 1; i >= 0; i--) {\n    const entry = entries[i];\n    const timestamp = entry.timestamp || \"---\";\n    const severity = (entry.severity || \"?\").substring(0, 1);\n    const name = entry.resource.labels.function_name || entry.resource.labels.service_name;\n    const message = entry.textPayload || JSON.stringify(entry.jsonPayload) || JSON.stringify(entry.protoPayload) || \"\";\n    logger_1.logger.info(`${timestamp} ${severity} ${name}: ${message}`);\n  }\n}\n\nexports.logEntries = logEntries;","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/functions/functionslog.js"],"names":["Object","defineProperty","exports","value","logEntries","getApiFilter","logger_1","require","previews_1","functionList","baseFilter","previews","functionsv2","apiFuncFilters","split","map","fn","join","entries","length","logger","info","i","entry","timestamp","severity","substring","name","resource","labels","function_name","service_name","message","textPayload","JSON","stringify","jsonPayload","protoPayload"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqBF,OAAO,CAACG,YAAR,GAAuB,KAAK,CAAjD;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,SAASF,YAAT,CAAsBI,YAAtB,EAAoC;AAChC,QAAMC,UAAU,GAAGF,UAAU,CAACG,QAAX,CAAoBC,WAApB,GACb,uCACE,0CADF,GAEE,4CAHW,GAIb,gCAJN;;AAKA,MAAIH,YAAJ,EAAkB;AACd,UAAMI,cAAc,GAAGJ,YAAY,CAACK,KAAb,CAAmB,GAAnB,EAAwBC,GAAxB,CAA6BC,EAAD,IAAQ;AACvD,aAAOR,UAAU,CAACG,QAAX,CAAoBC,WAApB,GACA,kCAAiCI,EAAG,IAArC,GAA4C,oCAAmCA,EAAG,GADjF,GAEA,kCAAiCA,EAAG,GAF3C;AAGH,KAJsB,CAAvB;AAKA,WAAON,UAAU,GAAI,MAAKG,cAAc,CAACI,IAAf,CAAoB,MAApB,CAA4B,GAAtD;AACH;;AACD,SAAOP,UAAP;AACH;;AACDR,OAAO,CAACG,YAAR,GAAuBA,YAAvB;;AACA,SAASD,UAAT,CAAoBc,OAApB,EAA6B;AACzB,MAAI,CAACA,OAAD,IAAYA,OAAO,CAACC,MAAR,KAAmB,CAAnC,EAAsC;AAClCb,IAAAA,QAAQ,CAACc,MAAT,CAAgBC,IAAhB,CAAqB,uBAArB;AACA;AACH;;AACD,OAAK,IAAIC,CAAC,GAAGJ,OAAO,CAACC,MAAR,GAAiB,CAA9B,EAAiCG,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;AAC1C,UAAMC,KAAK,GAAGL,OAAO,CAACI,CAAD,CAArB;AACA,UAAME,SAAS,GAAGD,KAAK,CAACC,SAAN,IAAmB,KAArC;AACA,UAAMC,QAAQ,GAAG,CAACF,KAAK,CAACE,QAAN,IAAkB,GAAnB,EAAwBC,SAAxB,CAAkC,CAAlC,EAAqC,CAArC,CAAjB;AACA,UAAMC,IAAI,GAAGJ,KAAK,CAACK,QAAN,CAAeC,MAAf,CAAsBC,aAAtB,IAAuCP,KAAK,CAACK,QAAN,CAAeC,MAAf,CAAsBE,YAA1E;AACA,UAAMC,OAAO,GAAGT,KAAK,CAACU,WAAN,IACZC,IAAI,CAACC,SAAL,CAAeZ,KAAK,CAACa,WAArB,CADY,IAEZF,IAAI,CAACC,SAAL,CAAeZ,KAAK,CAACc,YAArB,CAFY,IAGZ,EAHJ;AAIA/B,IAAAA,QAAQ,CAACc,MAAT,CAAgBC,IAAhB,CAAsB,GAAEG,SAAU,IAAGC,QAAS,IAAGE,IAAK,KAAIK,OAAQ,EAAlE;AACH;AACJ;;AACD9B,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.logEntries = exports.getApiFilter = void 0;\nconst logger_1 = require(\"../logger\");\nconst previews_1 = require(\"../previews\");\nfunction getApiFilter(functionList) {\n    const baseFilter = previews_1.previews.functionsv2\n        ? 'resource.type=\"cloud_function\" OR ' +\n            '(resource.type=\"cloud_run_revision\" AND ' +\n            'labels.\"goog-managed-by\"=\"cloudfunctions\")'\n        : 'resource.type=\"cloud_function\"';\n    if (functionList) {\n        const apiFuncFilters = functionList.split(\",\").map((fn) => {\n            return previews_1.previews.functionsv2\n                ? `resource.labels.function_name=\"${fn}\" ` + `OR resource.labels.service_name=\"${fn}\"`\n                : `resource.labels.function_name=\"${fn}\"`;\n        });\n        return baseFilter + `\\n(${apiFuncFilters.join(\" OR \")})`;\n    }\n    return baseFilter;\n}\nexports.getApiFilter = getApiFilter;\nfunction logEntries(entries) {\n    if (!entries || entries.length === 0) {\n        logger_1.logger.info(\"No log entries found.\");\n        return;\n    }\n    for (let i = entries.length - 1; i >= 0; i--) {\n        const entry = entries[i];\n        const timestamp = entry.timestamp || \"---\";\n        const severity = (entry.severity || \"?\").substring(0, 1);\n        const name = entry.resource.labels.function_name || entry.resource.labels.service_name;\n        const message = entry.textPayload ||\n            JSON.stringify(entry.jsonPayload) ||\n            JSON.stringify(entry.protoPayload) ||\n            \"\";\n        logger_1.logger.info(`${timestamp} ${severity} ${name}: ${message}`);\n    }\n}\nexports.logEntries = logEntries;\n"]},"metadata":{},"sourceType":"script"}