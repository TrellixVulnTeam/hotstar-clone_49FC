{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst _ = require(\"lodash\");\n\nconst marked = require(\"marked\");\n\nconst ora = require(\"ora\");\n\nconst TerminalRenderer = require(\"marked-terminal\");\n\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst billingMigrationHelper_1 = require(\"../extensions/billingMigrationHelper\");\n\nconst checkProjectBilling_1 = require(\"../extensions/checkProjectBilling\");\n\nconst cloudbilling_1 = require(\"../gcp/cloudbilling\");\n\nconst extensionsApi = require(\"../extensions/extensionsApi\");\n\nconst secretsUtils = require(\"../extensions/secretsUtils\");\n\nconst provisioningHelper = require(\"../extensions/provisioningHelper\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst paramHelper = require(\"../extensions/paramHelper\");\n\nconst updateHelper_1 = require(\"../extensions/updateHelper\");\n\nconst refs = require(\"../extensions/refs\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst utils = require(\"../utils\");\n\nconst previews_1 = require(\"../previews\");\n\nmarked.setOptions({\n  renderer: new TerminalRenderer()\n});\n\nfunction isValidUpdate(existingSourceOrigin, newSourceOrigin) {\n  if (existingSourceOrigin === extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION) {\n    return [extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION, extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION_VERSION].includes(newSourceOrigin);\n  } else if (existingSourceOrigin === extensionsHelper_1.SourceOrigin.LOCAL) {\n    return [extensionsHelper_1.SourceOrigin.LOCAL, extensionsHelper_1.SourceOrigin.URL].includes(newSourceOrigin);\n  }\n\n  return false;\n}\n\nexports.default = new command_1.Command(\"ext:update <extensionInstanceId> [updateSource]\").description(previews_1.previews.extdev ? \"update an existing extension instance to the latest version or from a local or URL source\" : \"update an existing extension instance to the latest version\").before(requirePermissions_1.requirePermissions, [\"firebaseextensions.instances.update\", \"firebaseextensions.instances.get\"]).before(extensionsHelper_1.ensureExtensionsApiEnabled).before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extMinVersion\").withForce().option(\"--params <paramsFile>\", \"name of params variables file with .env format.\").action(async (instanceId, updateSource, options) => {\n  const spinner = ora.default(`Updating ${clc.bold(instanceId)}. This usually takes 3 to 5 minutes...`);\n\n  try {\n    const projectId = projectUtils_1.needProjectId(options);\n    let existingInstance;\n\n    try {\n      existingInstance = await extensionsApi.getInstance(projectId, instanceId);\n    } catch (err) {\n      if (err.status === 404) {\n        throw new error_1.FirebaseError(`Extension instance '${clc.bold(instanceId)}' not found in project '${clc.bold(projectId)}'.`);\n      }\n\n      throw err;\n    }\n\n    const existingSpec = existingInstance.config.source.spec;\n\n    if (existingInstance.config.source.state === \"DELETED\") {\n      throw new error_1.FirebaseError(`Instance '${clc.bold(instanceId)}' cannot be updated anymore because the underlying extension was unpublished from Firebase's registry of extensions. Going forward, you will only be able to re-configure or uninstall this instance.`);\n    }\n\n    const existingParams = existingInstance.config.params;\n    const existingSource = existingInstance.config.source.name;\n\n    if (existingInstance.config.extensionRef) {\n      updateSource = updateHelper_1.inferUpdateSource(updateSource, existingInstance.config.extensionRef);\n    }\n\n    let newSourceName;\n    const existingSourceOrigin = await updateHelper_1.getExistingSourceOrigin(projectId, instanceId, existingSpec.name, existingSource);\n    const newSourceOrigin = extensionsHelper_1.getSourceOrigin(updateSource);\n    const validUpdate = isValidUpdate(existingSourceOrigin, newSourceOrigin);\n\n    if (!validUpdate) {\n      throw new error_1.FirebaseError(`Cannot update from a(n) ${existingSourceOrigin} to a(n) ${newSourceOrigin}. Please provide a new source that is a(n) ${existingSourceOrigin} and try again.`);\n    }\n\n    switch (newSourceOrigin) {\n      case extensionsHelper_1.SourceOrigin.LOCAL:\n        if (previews_1.previews.extdev) {\n          newSourceName = await updateHelper_1.updateFromLocalSource(projectId, instanceId, updateSource, existingSpec);\n          break;\n        }\n\n      case extensionsHelper_1.SourceOrigin.URL:\n        if (previews_1.previews.extdev) {\n          newSourceName = await updateHelper_1.updateFromUrlSource(projectId, instanceId, updateSource, existingSpec);\n          break;\n        }\n\n      case extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION_VERSION:\n        newSourceName = await updateHelper_1.updateToVersionFromPublisherSource(projectId, instanceId, updateSource, existingSpec);\n        break;\n\n      case extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION:\n        newSourceName = await updateHelper_1.updateFromPublisherSource(projectId, instanceId, updateSource, existingSpec);\n        break;\n\n      default:\n        throw new error_1.FirebaseError(`Unknown source '${clc.bold(updateSource)}.'`);\n    }\n\n    if (!(await extensionsHelper_1.confirm({\n      nonInteractive: options.nonInteractive,\n      force: options.force,\n      default: true\n    }))) {\n      throw new error_1.FirebaseError(`Update cancelled.`);\n    }\n\n    const newSource = await extensionsApi.getSource(newSourceName);\n    const newSpec = newSource.spec;\n\n    if (![extensionsHelper_1.SourceOrigin.LOCAL, extensionsHelper_1.SourceOrigin.URL].includes(newSourceOrigin) && existingSpec.version === newSpec.version) {\n      utils.logLabeledBullet(extensionsHelper_1.logPrefix, `${clc.bold(instanceId)} is already up to date. Its version is ${clc.bold(existingSpec.version)}.`);\n      const retry = await extensionsHelper_1.confirm({\n        nonInteractive: options.nonInteractive,\n        force: options.force,\n        default: false\n      });\n\n      if (!retry) {\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, \"Update aborted.\");\n        return;\n      }\n    }\n\n    await updateHelper_1.displayChanges({\n      spec: existingSpec,\n      newSpec: newSpec,\n      nonInteractive: options.nonInteractive,\n      force: options.force\n    });\n    await provisioningHelper.checkProductsProvisioned(projectId, newSpec);\n    const usesSecrets = secretsUtils.usesSecrets(newSpec);\n\n    if (newSpec.billingRequired || usesSecrets) {\n      const enabled = await cloudbilling_1.checkBillingEnabled(projectId);\n      billingMigrationHelper_1.displayNode10UpdateBillingNotice(existingSpec, newSpec);\n\n      if (!(await extensionsHelper_1.confirm({\n        nonInteractive: options.nonInteractive,\n        force: options.force,\n        default: true\n      }))) {\n        throw new error_1.FirebaseError(\"Update cancelled.\");\n      }\n\n      if (!enabled) {\n        if (!options.nonInteractive) {\n          await checkProjectBilling_1.enableBilling(projectId, instanceId);\n        } else {\n          throw new error_1.FirebaseError(\"The extension requires your project to be upgraded to the Blaze plan. \" + \"To run this command in non-interactive mode, first upgrade your project: \" + marked(`https://console.cloud.google.com/billing/linkedaccount?project=${projectId}`));\n        }\n      }\n\n      if (usesSecrets) {\n        await secretsUtils.ensureSecretManagerApiEnabled(options);\n      }\n    }\n\n    const oldParamValues = Object.assign({}, existingParams);\n    const newParams = await paramHelper.getParamsForUpdate({\n      spec: existingSpec,\n      newSpec,\n      currentParams: existingParams,\n      projectId,\n      paramsEnvPath: options.params,\n      nonInteractive: options.nonInteractive,\n      instanceId\n    });\n    spinner.start();\n    const updateOptions = {\n      projectId,\n      instanceId\n    };\n\n    if (newSourceName.includes(\"publisher\")) {\n      updateOptions.extRef = refs.toExtensionVersionRef(refs.parse(newSourceName));\n    } else {\n      updateOptions.source = newSource;\n    }\n\n    if (!_.isEqual(newParams, oldParamValues)) {\n      updateOptions.params = newParams;\n    }\n\n    await updateHelper_1.update(updateOptions);\n    spinner.stop();\n    utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `successfully updated ${clc.bold(instanceId)}.`);\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(`You can view your updated instance in the Firebase console: ${utils.consoleUrl(projectId, `/extensions/instances/${instanceId}?tab=usage`)}`));\n  } catch (err) {\n    if (spinner.isSpinning) {\n      spinner.fail();\n    }\n\n    if (!(err instanceof error_1.FirebaseError)) {\n      throw new error_1.FirebaseError(`Error occurred while updating the instance: ${err.message}`, {\n        original: err\n      });\n    }\n\n    throw err;\n  }\n});","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/commands/ext-update.js"],"names":["Object","defineProperty","exports","value","clc","require","_","marked","ora","TerminalRenderer","checkMinRequiredVersion_1","command_1","error_1","billingMigrationHelper_1","checkProjectBilling_1","cloudbilling_1","extensionsApi","secretsUtils","provisioningHelper","extensionsHelper_1","paramHelper","updateHelper_1","refs","projectUtils_1","requirePermissions_1","utils","previews_1","setOptions","renderer","isValidUpdate","existingSourceOrigin","newSourceOrigin","SourceOrigin","PUBLISHED_EXTENSION","PUBLISHED_EXTENSION_VERSION","includes","LOCAL","URL","default","Command","description","previews","extdev","before","requirePermissions","ensureExtensionsApiEnabled","checkMinRequiredVersion","withForce","option","action","instanceId","updateSource","options","spinner","bold","projectId","needProjectId","existingInstance","getInstance","err","status","FirebaseError","existingSpec","config","source","spec","state","existingParams","params","existingSource","name","extensionRef","inferUpdateSource","newSourceName","getExistingSourceOrigin","getSourceOrigin","validUpdate","updateFromLocalSource","updateFromUrlSource","updateToVersionFromPublisherSource","updateFromPublisherSource","confirm","nonInteractive","force","newSource","getSource","newSpec","version","logLabeledBullet","logPrefix","retry","displayChanges","checkProductsProvisioned","usesSecrets","billingRequired","enabled","checkBillingEnabled","displayNode10UpdateBillingNotice","enableBilling","ensureSecretManagerApiEnabled","oldParamValues","assign","newParams","getParamsForUpdate","currentParams","paramsEnvPath","start","updateOptions","extRef","toExtensionVersionRef","parse","isEqual","update","stop","logLabeledSuccess","consoleUrl","isSpinning","fail","message","original"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst _ = require(\"lodash\");\nconst marked = require(\"marked\");\nconst ora = require(\"ora\");\nconst TerminalRenderer = require(\"marked-terminal\");\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst billingMigrationHelper_1 = require(\"../extensions/billingMigrationHelper\");\nconst checkProjectBilling_1 = require(\"../extensions/checkProjectBilling\");\nconst cloudbilling_1 = require(\"../gcp/cloudbilling\");\nconst extensionsApi = require(\"../extensions/extensionsApi\");\nconst secretsUtils = require(\"../extensions/secretsUtils\");\nconst provisioningHelper = require(\"../extensions/provisioningHelper\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst paramHelper = require(\"../extensions/paramHelper\");\nconst updateHelper_1 = require(\"../extensions/updateHelper\");\nconst refs = require(\"../extensions/refs\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst utils = require(\"../utils\");\nconst previews_1 = require(\"../previews\");\nmarked.setOptions({\n    renderer: new TerminalRenderer(),\n});\nfunction isValidUpdate(existingSourceOrigin, newSourceOrigin) {\n    if (existingSourceOrigin === extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION) {\n        return [extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION, extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION_VERSION].includes(newSourceOrigin);\n    }\n    else if (existingSourceOrigin === extensionsHelper_1.SourceOrigin.LOCAL) {\n        return [extensionsHelper_1.SourceOrigin.LOCAL, extensionsHelper_1.SourceOrigin.URL].includes(newSourceOrigin);\n    }\n    return false;\n}\nexports.default = new command_1.Command(\"ext:update <extensionInstanceId> [updateSource]\")\n    .description(previews_1.previews.extdev\n    ? \"update an existing extension instance to the latest version or from a local or URL source\"\n    : \"update an existing extension instance to the latest version\")\n    .before(requirePermissions_1.requirePermissions, [\n    \"firebaseextensions.instances.update\",\n    \"firebaseextensions.instances.get\",\n])\n    .before(extensionsHelper_1.ensureExtensionsApiEnabled)\n    .before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extMinVersion\")\n    .withForce()\n    .option(\"--params <paramsFile>\", \"name of params variables file with .env format.\")\n    .action(async (instanceId, updateSource, options) => {\n    const spinner = ora.default(`Updating ${clc.bold(instanceId)}. This usually takes 3 to 5 minutes...`);\n    try {\n        const projectId = projectUtils_1.needProjectId(options);\n        let existingInstance;\n        try {\n            existingInstance = await extensionsApi.getInstance(projectId, instanceId);\n        }\n        catch (err) {\n            if (err.status === 404) {\n                throw new error_1.FirebaseError(`Extension instance '${clc.bold(instanceId)}' not found in project '${clc.bold(projectId)}'.`);\n            }\n            throw err;\n        }\n        const existingSpec = existingInstance.config.source.spec;\n        if (existingInstance.config.source.state === \"DELETED\") {\n            throw new error_1.FirebaseError(`Instance '${clc.bold(instanceId)}' cannot be updated anymore because the underlying extension was unpublished from Firebase's registry of extensions. Going forward, you will only be able to re-configure or uninstall this instance.`);\n        }\n        const existingParams = existingInstance.config.params;\n        const existingSource = existingInstance.config.source.name;\n        if (existingInstance.config.extensionRef) {\n            updateSource = updateHelper_1.inferUpdateSource(updateSource, existingInstance.config.extensionRef);\n        }\n        let newSourceName;\n        const existingSourceOrigin = await updateHelper_1.getExistingSourceOrigin(projectId, instanceId, existingSpec.name, existingSource);\n        const newSourceOrigin = extensionsHelper_1.getSourceOrigin(updateSource);\n        const validUpdate = isValidUpdate(existingSourceOrigin, newSourceOrigin);\n        if (!validUpdate) {\n            throw new error_1.FirebaseError(`Cannot update from a(n) ${existingSourceOrigin} to a(n) ${newSourceOrigin}. Please provide a new source that is a(n) ${existingSourceOrigin} and try again.`);\n        }\n        switch (newSourceOrigin) {\n            case extensionsHelper_1.SourceOrigin.LOCAL:\n                if (previews_1.previews.extdev) {\n                    newSourceName = await updateHelper_1.updateFromLocalSource(projectId, instanceId, updateSource, existingSpec);\n                    break;\n                }\n            case extensionsHelper_1.SourceOrigin.URL:\n                if (previews_1.previews.extdev) {\n                    newSourceName = await updateHelper_1.updateFromUrlSource(projectId, instanceId, updateSource, existingSpec);\n                    break;\n                }\n            case extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION_VERSION:\n                newSourceName = await updateHelper_1.updateToVersionFromPublisherSource(projectId, instanceId, updateSource, existingSpec);\n                break;\n            case extensionsHelper_1.SourceOrigin.PUBLISHED_EXTENSION:\n                newSourceName = await updateHelper_1.updateFromPublisherSource(projectId, instanceId, updateSource, existingSpec);\n                break;\n            default:\n                throw new error_1.FirebaseError(`Unknown source '${clc.bold(updateSource)}.'`);\n        }\n        if (!(await extensionsHelper_1.confirm({\n            nonInteractive: options.nonInteractive,\n            force: options.force,\n            default: true,\n        }))) {\n            throw new error_1.FirebaseError(`Update cancelled.`);\n        }\n        const newSource = await extensionsApi.getSource(newSourceName);\n        const newSpec = newSource.spec;\n        if (![extensionsHelper_1.SourceOrigin.LOCAL, extensionsHelper_1.SourceOrigin.URL].includes(newSourceOrigin) &&\n            existingSpec.version === newSpec.version) {\n            utils.logLabeledBullet(extensionsHelper_1.logPrefix, `${clc.bold(instanceId)} is already up to date. Its version is ${clc.bold(existingSpec.version)}.`);\n            const retry = await extensionsHelper_1.confirm({\n                nonInteractive: options.nonInteractive,\n                force: options.force,\n                default: false,\n            });\n            if (!retry) {\n                utils.logLabeledBullet(extensionsHelper_1.logPrefix, \"Update aborted.\");\n                return;\n            }\n        }\n        await updateHelper_1.displayChanges({\n            spec: existingSpec,\n            newSpec: newSpec,\n            nonInteractive: options.nonInteractive,\n            force: options.force,\n        });\n        await provisioningHelper.checkProductsProvisioned(projectId, newSpec);\n        const usesSecrets = secretsUtils.usesSecrets(newSpec);\n        if (newSpec.billingRequired || usesSecrets) {\n            const enabled = await cloudbilling_1.checkBillingEnabled(projectId);\n            billingMigrationHelper_1.displayNode10UpdateBillingNotice(existingSpec, newSpec);\n            if (!(await extensionsHelper_1.confirm({\n                nonInteractive: options.nonInteractive,\n                force: options.force,\n                default: true,\n            }))) {\n                throw new error_1.FirebaseError(\"Update cancelled.\");\n            }\n            if (!enabled) {\n                if (!options.nonInteractive) {\n                    await checkProjectBilling_1.enableBilling(projectId, instanceId);\n                }\n                else {\n                    throw new error_1.FirebaseError(\"The extension requires your project to be upgraded to the Blaze plan. \" +\n                        \"To run this command in non-interactive mode, first upgrade your project: \" +\n                        marked(`https://console.cloud.google.com/billing/linkedaccount?project=${projectId}`));\n                }\n            }\n            if (usesSecrets) {\n                await secretsUtils.ensureSecretManagerApiEnabled(options);\n            }\n        }\n        const oldParamValues = Object.assign({}, existingParams);\n        const newParams = await paramHelper.getParamsForUpdate({\n            spec: existingSpec,\n            newSpec,\n            currentParams: existingParams,\n            projectId,\n            paramsEnvPath: options.params,\n            nonInteractive: options.nonInteractive,\n            instanceId,\n        });\n        spinner.start();\n        const updateOptions = {\n            projectId,\n            instanceId,\n        };\n        if (newSourceName.includes(\"publisher\")) {\n            updateOptions.extRef = refs.toExtensionVersionRef(refs.parse(newSourceName));\n        }\n        else {\n            updateOptions.source = newSource;\n        }\n        if (!_.isEqual(newParams, oldParamValues)) {\n            updateOptions.params = newParams;\n        }\n        await updateHelper_1.update(updateOptions);\n        spinner.stop();\n        utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `successfully updated ${clc.bold(instanceId)}.`);\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(`You can view your updated instance in the Firebase console: ${utils.consoleUrl(projectId, `/extensions/instances/${instanceId}?tab=usage`)}`));\n    }\n    catch (err) {\n        if (spinner.isSpinning) {\n            spinner.fail();\n        }\n        if (!(err instanceof error_1.FirebaseError)) {\n            throw new error_1.FirebaseError(`Error occurred while updating the instance: ${err.message}`, {\n                original: err,\n            });\n        }\n        throw err;\n    }\n});\n"]},"metadata":{},"sourceType":"script"}