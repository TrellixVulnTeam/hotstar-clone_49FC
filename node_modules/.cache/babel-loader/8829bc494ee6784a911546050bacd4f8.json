{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadFirebaseEnvs = exports.loadUserEnvs = exports.hasUserEnvs = exports.validateKey = exports.KeyValidationError = exports.parse = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst previews_1 = require(\"../previews\");\n\nconst utils_1 = require(\"../utils\");\n\nconst FUNCTIONS_EMULATOR_DOTENV = \".env.local\";\nconst RESERVED_KEYS = [\"FIREBASE_CONFIG\", \"CLOUD_RUNTIME_CONFIG\", \"ENTRY_POINT\", \"GCP_PROJECT\", \"GCLOUD_PROJECT\", \"GOOGLE_CLOUD_PROJECT\", \"FUNCTION_TRIGGER_TYPE\", \"FUNCTION_NAME\", \"FUNCTION_MEMORY_MB\", \"FUNCTION_TIMEOUT_SEC\", \"FUNCTION_IDENTITY\", \"FUNCTION_REGION\", \"FUNCTION_TARGET\", \"FUNCTION_SIGNATURE_TYPE\", \"K_SERVICE\", \"K_REVISION\", \"PORT\", \"K_CONFIGURATION\"];\nconst LINE_RE = new RegExp(\"^\" + \"\\\\s*\" + \"(\\\\w+)\" + \"\\\\s*=\\\\s*\" + \"(\" + \"\\\\s*'(?:\\\\\\\\'|[^'])*'|\" + '\\\\s*\"(?:\\\\\\\\\"|[^\"])*\"|' + \"[^#\\\\r\\\\n]+\" + \")?\" + \"\\\\s*\" + \"(?:#[^\\\\n]*)?\" + \"$\", \"gms\");\n\nfunction parse(data) {\n  const envs = {};\n  const errors = [];\n  data = data.replace(/\\r\\n?/, \"\\n\");\n  let match;\n\n  while (match = LINE_RE.exec(data)) {\n    let [, k, v] = match;\n    v = (v || \"\").trim();\n    let quotesMatch;\n\n    if ((quotesMatch = /^([\"'])(.*)\\1$/ms.exec(v)) != null) {\n      v = quotesMatch[2];\n\n      if (quotesMatch[1] === '\"') {\n        v = v.replace(\"\\\\n\", \"\\n\").replace(\"\\\\r\", \"\\r\").replace(\"\\\\t\", \"\\t\").replace(\"\\\\v\", \"\\v\");\n        v = v.replace(/\\\\([\\\\'\"])/g, \"$1\");\n      }\n    }\n\n    envs[k] = v;\n  }\n\n  const nonmatches = data.replace(LINE_RE, \"\");\n\n  for (let line of nonmatches.split(/[\\r\\n]+/)) {\n    line = line.trim();\n\n    if (line.startsWith(\"#\")) {\n      continue;\n    }\n\n    if (line.length) errors.push(line);\n  }\n\n  return {\n    envs,\n    errors\n  };\n}\n\nexports.parse = parse;\n\nclass KeyValidationError extends Error {\n  constructor(key, message) {\n    super(`Failed to validate key ${key}: ${message}`);\n    this.key = key;\n    this.message = message;\n  }\n\n}\n\nexports.KeyValidationError = KeyValidationError;\n\nfunction validateKey(key) {\n  if (RESERVED_KEYS.includes(key)) {\n    throw new KeyValidationError(key, `Key ${key} is reserved for internal use.`);\n  }\n\n  if (!/^[A-Z_][A-Z0-9_]*$/.test(key)) {\n    throw new KeyValidationError(key, `Key ${key} must start with an uppercase ASCII letter or underscore` + \", and then consist of uppercase ASCII letters, digits, and underscores.\");\n  }\n\n  if (key.startsWith(\"X_GOOGLE_\") || key.startsWith(\"FIREBASE_\")) {\n    throw new KeyValidationError(key, `Key ${key} starts with a reserved prefix (X_GOOGLE_ or FIREBASE_)`);\n  }\n}\n\nexports.validateKey = validateKey;\n\nfunction parseStrict(data) {\n  const {\n    envs,\n    errors\n  } = parse(data);\n\n  if (errors.length) {\n    throw new error_1.FirebaseError(`Invalid dotenv file, error on lines: ${errors.join(\",\")}`);\n  }\n\n  const validationErrors = [];\n\n  for (const key of Object.keys(envs)) {\n    try {\n      validateKey(key);\n    } catch (err) {\n      logger_1.logger.debug(`Failed to validate key ${key}: ${err}`);\n\n      if (err instanceof KeyValidationError) {\n        validationErrors.push(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  if (validationErrors.length > 0) {\n    throw new error_1.FirebaseError(\"Validation failed\", {\n      children: validationErrors\n    });\n  }\n\n  return envs;\n}\n\nfunction findEnvfiles(functionsSource, projectId, projectAlias, isEmulator) {\n  const files = [\".env\"];\n\n  if (isEmulator) {\n    files.push(FUNCTIONS_EMULATOR_DOTENV);\n  } else {\n    files.push(`.env.${projectId}`);\n\n    if (projectAlias && projectAlias.length) {\n      files.push(`.env.${projectAlias}`);\n    }\n  }\n\n  return files.map(f => path.join(functionsSource, f)).filter(fs.existsSync).map(p => path.basename(p));\n}\n\nfunction hasUserEnvs({\n  functionsSource,\n  projectId,\n  projectAlias,\n  isEmulator\n}) {\n  return findEnvfiles(functionsSource, projectId, projectAlias, isEmulator).length > 0;\n}\n\nexports.hasUserEnvs = hasUserEnvs;\n\nfunction loadUserEnvs({\n  functionsSource,\n  projectId,\n  projectAlias,\n  isEmulator\n}) {\n  var _a;\n\n  if (!previews_1.previews.dotenv) {\n    return {};\n  }\n\n  const envFiles = findEnvfiles(functionsSource, projectId, projectAlias, isEmulator);\n\n  if (envFiles.length == 0) {\n    return {};\n  }\n\n  if (projectAlias) {\n    if (envFiles.includes(`.env.${projectId}`) && envFiles.includes(`.env.${projectAlias}`)) {\n      throw new error_1.FirebaseError(`Can't have both dotenv files with projectId (env.${projectId}) ` + `and projectAlias (.env.${projectAlias}) as extensions.`);\n    }\n  }\n\n  let envs = {};\n\n  for (const f of envFiles) {\n    try {\n      const data = fs.readFileSync(path.join(functionsSource, f), \"utf8\");\n      envs = Object.assign(Object.assign({}, envs), parseStrict(data));\n    } catch (err) {\n      throw new error_1.FirebaseError(`Failed to load environment variables from ${f}.`, {\n        exit: 2,\n        children: ((_a = err.children) === null || _a === void 0 ? void 0 : _a.length) > 0 ? err.children : [err]\n      });\n    }\n  }\n\n  utils_1.logBullet(clc.cyan.bold(\"functions: \") + `Loaded environment variables from ${envFiles.join(\", \")}.`);\n  return envs;\n}\n\nexports.loadUserEnvs = loadUserEnvs;\n\nfunction loadFirebaseEnvs(firebaseConfig, projectId) {\n  return {\n    FIREBASE_CONFIG: JSON.stringify(firebaseConfig),\n    GCLOUD_PROJECT: projectId\n  };\n}\n\nexports.loadFirebaseEnvs = loadFirebaseEnvs;","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/functions/env.js"],"names":["Object","defineProperty","exports","value","loadFirebaseEnvs","loadUserEnvs","hasUserEnvs","validateKey","KeyValidationError","parse","clc","require","fs","path","error_1","logger_1","previews_1","utils_1","FUNCTIONS_EMULATOR_DOTENV","RESERVED_KEYS","LINE_RE","RegExp","data","envs","errors","replace","match","exec","k","v","trim","quotesMatch","nonmatches","line","split","startsWith","length","push","Error","constructor","key","message","includes","test","parseStrict","FirebaseError","join","validationErrors","keys","err","logger","debug","children","findEnvfiles","functionsSource","projectId","projectAlias","isEmulator","files","map","f","filter","existsSync","p","basename","_a","previews","dotenv","envFiles","readFileSync","assign","exit","logBullet","cyan","bold","firebaseConfig","FIREBASE_CONFIG","JSON","stringify","GCLOUD_PROJECT"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadFirebaseEnvs = exports.loadUserEnvs = exports.hasUserEnvs = exports.validateKey = exports.KeyValidationError = exports.parse = void 0;\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst previews_1 = require(\"../previews\");\nconst utils_1 = require(\"../utils\");\nconst FUNCTIONS_EMULATOR_DOTENV = \".env.local\";\nconst RESERVED_KEYS = [\n    \"FIREBASE_CONFIG\",\n    \"CLOUD_RUNTIME_CONFIG\",\n    \"ENTRY_POINT\",\n    \"GCP_PROJECT\",\n    \"GCLOUD_PROJECT\",\n    \"GOOGLE_CLOUD_PROJECT\",\n    \"FUNCTION_TRIGGER_TYPE\",\n    \"FUNCTION_NAME\",\n    \"FUNCTION_MEMORY_MB\",\n    \"FUNCTION_TIMEOUT_SEC\",\n    \"FUNCTION_IDENTITY\",\n    \"FUNCTION_REGION\",\n    \"FUNCTION_TARGET\",\n    \"FUNCTION_SIGNATURE_TYPE\",\n    \"K_SERVICE\",\n    \"K_REVISION\",\n    \"PORT\",\n    \"K_CONFIGURATION\",\n];\nconst LINE_RE = new RegExp(\"^\" +\n    \"\\\\s*\" +\n    \"(\\\\w+)\" +\n    \"\\\\s*=\\\\s*\" +\n    \"(\" +\n    \"\\\\s*'(?:\\\\\\\\'|[^'])*'|\" +\n    '\\\\s*\"(?:\\\\\\\\\"|[^\"])*\"|' +\n    \"[^#\\\\r\\\\n]+\" +\n    \")?\" +\n    \"\\\\s*\" +\n    \"(?:#[^\\\\n]*)?\" +\n    \"$\", \"gms\");\nfunction parse(data) {\n    const envs = {};\n    const errors = [];\n    data = data.replace(/\\r\\n?/, \"\\n\");\n    let match;\n    while ((match = LINE_RE.exec(data))) {\n        let [, k, v] = match;\n        v = (v || \"\").trim();\n        let quotesMatch;\n        if ((quotesMatch = /^([\"'])(.*)\\1$/ms.exec(v)) != null) {\n            v = quotesMatch[2];\n            if (quotesMatch[1] === '\"') {\n                v = v.replace(\"\\\\n\", \"\\n\").replace(\"\\\\r\", \"\\r\").replace(\"\\\\t\", \"\\t\").replace(\"\\\\v\", \"\\v\");\n                v = v.replace(/\\\\([\\\\'\"])/g, \"$1\");\n            }\n        }\n        envs[k] = v;\n    }\n    const nonmatches = data.replace(LINE_RE, \"\");\n    for (let line of nonmatches.split(/[\\r\\n]+/)) {\n        line = line.trim();\n        if (line.startsWith(\"#\")) {\n            continue;\n        }\n        if (line.length)\n            errors.push(line);\n    }\n    return { envs, errors };\n}\nexports.parse = parse;\nclass KeyValidationError extends Error {\n    constructor(key, message) {\n        super(`Failed to validate key ${key}: ${message}`);\n        this.key = key;\n        this.message = message;\n    }\n}\nexports.KeyValidationError = KeyValidationError;\nfunction validateKey(key) {\n    if (RESERVED_KEYS.includes(key)) {\n        throw new KeyValidationError(key, `Key ${key} is reserved for internal use.`);\n    }\n    if (!/^[A-Z_][A-Z0-9_]*$/.test(key)) {\n        throw new KeyValidationError(key, `Key ${key} must start with an uppercase ASCII letter or underscore` +\n            \", and then consist of uppercase ASCII letters, digits, and underscores.\");\n    }\n    if (key.startsWith(\"X_GOOGLE_\") || key.startsWith(\"FIREBASE_\")) {\n        throw new KeyValidationError(key, `Key ${key} starts with a reserved prefix (X_GOOGLE_ or FIREBASE_)`);\n    }\n}\nexports.validateKey = validateKey;\nfunction parseStrict(data) {\n    const { envs, errors } = parse(data);\n    if (errors.length) {\n        throw new error_1.FirebaseError(`Invalid dotenv file, error on lines: ${errors.join(\",\")}`);\n    }\n    const validationErrors = [];\n    for (const key of Object.keys(envs)) {\n        try {\n            validateKey(key);\n        }\n        catch (err) {\n            logger_1.logger.debug(`Failed to validate key ${key}: ${err}`);\n            if (err instanceof KeyValidationError) {\n                validationErrors.push(err);\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    if (validationErrors.length > 0) {\n        throw new error_1.FirebaseError(\"Validation failed\", { children: validationErrors });\n    }\n    return envs;\n}\nfunction findEnvfiles(functionsSource, projectId, projectAlias, isEmulator) {\n    const files = [\".env\"];\n    if (isEmulator) {\n        files.push(FUNCTIONS_EMULATOR_DOTENV);\n    }\n    else {\n        files.push(`.env.${projectId}`);\n        if (projectAlias && projectAlias.length) {\n            files.push(`.env.${projectAlias}`);\n        }\n    }\n    return files\n        .map((f) => path.join(functionsSource, f))\n        .filter(fs.existsSync)\n        .map((p) => path.basename(p));\n}\nfunction hasUserEnvs({ functionsSource, projectId, projectAlias, isEmulator, }) {\n    return findEnvfiles(functionsSource, projectId, projectAlias, isEmulator).length > 0;\n}\nexports.hasUserEnvs = hasUserEnvs;\nfunction loadUserEnvs({ functionsSource, projectId, projectAlias, isEmulator, }) {\n    var _a;\n    if (!previews_1.previews.dotenv) {\n        return {};\n    }\n    const envFiles = findEnvfiles(functionsSource, projectId, projectAlias, isEmulator);\n    if (envFiles.length == 0) {\n        return {};\n    }\n    if (projectAlias) {\n        if (envFiles.includes(`.env.${projectId}`) && envFiles.includes(`.env.${projectAlias}`)) {\n            throw new error_1.FirebaseError(`Can't have both dotenv files with projectId (env.${projectId}) ` +\n                `and projectAlias (.env.${projectAlias}) as extensions.`);\n        }\n    }\n    let envs = {};\n    for (const f of envFiles) {\n        try {\n            const data = fs.readFileSync(path.join(functionsSource, f), \"utf8\");\n            envs = Object.assign(Object.assign({}, envs), parseStrict(data));\n        }\n        catch (err) {\n            throw new error_1.FirebaseError(`Failed to load environment variables from ${f}.`, {\n                exit: 2,\n                children: ((_a = err.children) === null || _a === void 0 ? void 0 : _a.length) > 0 ? err.children : [err],\n            });\n        }\n    }\n    utils_1.logBullet(clc.cyan.bold(\"functions: \") + `Loaded environment variables from ${envFiles.join(\", \")}.`);\n    return envs;\n}\nexports.loadUserEnvs = loadUserEnvs;\nfunction loadFirebaseEnvs(firebaseConfig, projectId) {\n    return {\n        FIREBASE_CONFIG: JSON.stringify(firebaseConfig),\n        GCLOUD_PROJECT: projectId,\n    };\n}\nexports.loadFirebaseEnvs = loadFirebaseEnvs;\n"]},"metadata":{},"sourceType":"script"}