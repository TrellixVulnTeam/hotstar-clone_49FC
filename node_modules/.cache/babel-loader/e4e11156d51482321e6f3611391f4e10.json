{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs-extra\");\n\nconst command_1 = require(\"../command\");\n\nconst utils = require(\"../utils\");\n\nconst requireAuth_1 = require(\"../requireAuth\");\n\nconst client_1 = require(\"../appdistribution/client\");\n\nconst error_1 = require(\"../error\");\n\nconst distribution_1 = require(\"../appdistribution/distribution\");\n\nconst options_parser_util_1 = require(\"../appdistribution/options-parser-util\");\n\nfunction getReleaseNotes(releaseNotes, releaseNotesFile) {\n  if (releaseNotes) {\n    return releaseNotes.replace(/\\\\n/g, \"\\n\");\n  } else if (releaseNotesFile) {\n    options_parser_util_1.ensureFileExists(releaseNotesFile);\n    return fs.readFileSync(releaseNotesFile, \"utf8\");\n  }\n\n  return \"\";\n}\n\nmodule.exports = new command_1.Command(\"appdistribution:distribute <release-binary-file>\").description(\"upload a release binary\").option(\"--app <app_id>\", \"the app id of your Firebase app\").option(\"--release-notes <string>\", \"release notes to include\").option(\"--release-notes-file <file>\", \"path to file with release notes\").option(\"--testers <string>\", \"a comma separated list of tester emails to distribute to\").option(\"--testers-file <file>\", \"path to file with a comma separated list of tester emails to distribute to\").option(\"--groups <string>\", \"a comma separated list of group aliases to distribute to\").option(\"--groups-file <file>\", \"path to file with a comma separated list of group aliases to distribute to\").before(requireAuth_1.requireAuth).action(async (file, options) => {\n  const appName = options_parser_util_1.getAppName(options);\n  const distribution = new distribution_1.Distribution(file);\n  const releaseNotes = getReleaseNotes(options.releaseNotes, options.releaseNotesFile);\n  const testers = options_parser_util_1.getTestersOrGroups(options.testers, options.testersFile);\n  const groups = options_parser_util_1.getTestersOrGroups(options.groups, options.groupsFile);\n  const requests = new client_1.AppDistributionClient();\n  let aabInfo;\n\n  if (distribution.distributionFileType() === distribution_1.DistributionFileType.AAB) {\n    try {\n      aabInfo = await requests.getAabInfo(appName);\n    } catch (err) {\n      if (err.status === 404) {\n        throw new error_1.FirebaseError(`App Distribution could not find your app ${options.app}. ` + `Make sure to onboard your app by pressing the \"Get started\" ` + \"button on the App Distribution page in the Firebase console: \" + \"https://console.firebase.google.com/project/_/appdistribution\", {\n          exit: 1\n        });\n      }\n\n      throw new error_1.FirebaseError(`failed to determine AAB info. ${err.message}`, {\n        exit: 1\n      });\n    }\n\n    if (aabInfo.integrationState !== client_1.IntegrationState.INTEGRATED && aabInfo.integrationState !== client_1.IntegrationState.AAB_STATE_UNAVAILABLE) {\n      switch (aabInfo.integrationState) {\n        case client_1.IntegrationState.PLAY_ACCOUNT_NOT_LINKED:\n          {\n            throw new error_1.FirebaseError(\"This project is not linked to a Google Play account.\");\n          }\n\n        case client_1.IntegrationState.APP_NOT_PUBLISHED:\n          {\n            throw new error_1.FirebaseError('\"This app is not published in the Google Play console.');\n          }\n\n        case client_1.IntegrationState.NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT:\n          {\n            throw new error_1.FirebaseError(\"App with matching package name does not exist in Google Play.\");\n          }\n\n        case client_1.IntegrationState.PLAY_IAS_TERMS_NOT_ACCEPTED:\n          {\n            throw new error_1.FirebaseError(\"You must accept the Play Internal App Sharing (IAS) terms to upload AABs.\");\n          }\n\n        default:\n          {\n            throw new error_1.FirebaseError(\"App Distribution failed to process the AAB: \" + aabInfo.integrationState);\n          }\n      }\n    }\n  }\n\n  utils.logBullet(\"uploading binary...\");\n  let releaseName;\n\n  try {\n    const operationName = await requests.uploadRelease(appName, distribution);\n    const uploadResponse = await requests.pollUploadStatus(operationName);\n    const release = uploadResponse.release;\n\n    switch (uploadResponse.result) {\n      case client_1.UploadReleaseResult.RELEASE_CREATED:\n        utils.logSuccess(`uploaded new release ${release.displayVersion} (${release.buildVersion}) successfully!`);\n        break;\n\n      case client_1.UploadReleaseResult.RELEASE_UPDATED:\n        utils.logSuccess(`uploaded update to existing release ${release.displayVersion} (${release.buildVersion}) successfully!`);\n        break;\n\n      case client_1.UploadReleaseResult.RELEASE_UNMODIFIED:\n        utils.logSuccess(`re-uploaded already existing release ${release.displayVersion} (${release.buildVersion}) successfully!`);\n        break;\n\n      default:\n        utils.logSuccess(`uploaded release ${release.displayVersion} (${release.buildVersion}) successfully!`);\n    }\n\n    releaseName = uploadResponse.release.name;\n  } catch (err) {\n    if (err.status === 404) {\n      throw new error_1.FirebaseError(`App Distribution could not find your app ${options.app}. ` + `Make sure to onboard your app by pressing the \"Get started\" ` + \"button on the App Distribution page in the Firebase console: \" + \"https://console.firebase.google.com/project/_/appdistribution\", {\n        exit: 1\n      });\n    }\n\n    throw new error_1.FirebaseError(`failed to upload release. ${err.message}`, {\n      exit: 1\n    });\n  }\n\n  if (aabInfo && !aabInfo.testCertificate) {\n    aabInfo = await requests.getAabInfo(appName);\n\n    if (aabInfo.testCertificate) {\n      utils.logBullet(\"After you upload an AAB for the first time, App Distribution \" + \"generates a new test certificate. All AAB uploads are re-signed with this test \" + \"certificate. Use the certificate fingerprints below to register your app \" + \"signing key with API providers, such as Google Sign-In and Google Maps.\\n\" + `MD-1 certificate fingerprint: ${aabInfo.testCertificate.hashMd5}\\n` + `SHA-1 certificate fingerprint: ${aabInfo.testCertificate.hashSha1}\\n` + `SHA-256 certificate fingerprint: ${aabInfo.testCertificate.hashSha256}`);\n    }\n  }\n\n  await requests.updateReleaseNotes(releaseName, releaseNotes);\n  await requests.distribute(releaseName, testers, groups);\n});","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/commands/appdistribution-distribute.js"],"names":["Object","defineProperty","exports","value","fs","require","command_1","utils","requireAuth_1","client_1","error_1","distribution_1","options_parser_util_1","getReleaseNotes","releaseNotes","releaseNotesFile","replace","ensureFileExists","readFileSync","module","Command","description","option","before","requireAuth","action","file","options","appName","getAppName","distribution","Distribution","testers","getTestersOrGroups","testersFile","groups","groupsFile","requests","AppDistributionClient","aabInfo","distributionFileType","DistributionFileType","AAB","getAabInfo","err","status","FirebaseError","app","exit","message","integrationState","IntegrationState","INTEGRATED","AAB_STATE_UNAVAILABLE","PLAY_ACCOUNT_NOT_LINKED","APP_NOT_PUBLISHED","NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT","PLAY_IAS_TERMS_NOT_ACCEPTED","logBullet","releaseName","operationName","uploadRelease","uploadResponse","pollUploadStatus","release","result","UploadReleaseResult","RELEASE_CREATED","logSuccess","displayVersion","buildVersion","RELEASE_UPDATED","RELEASE_UNMODIFIED","name","testCertificate","hashMd5","hashSha1","hashSha256","updateReleaseNotes","distribute"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,EAAE,GAAGC,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,2BAAD,CAAxB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMM,cAAc,GAAGN,OAAO,CAAC,iCAAD,CAA9B;;AACA,MAAMO,qBAAqB,GAAGP,OAAO,CAAC,wCAAD,CAArC;;AACA,SAASQ,eAAT,CAAyBC,YAAzB,EAAuCC,gBAAvC,EAAyD;AACrD,MAAID,YAAJ,EAAkB;AACd,WAAOA,YAAY,CAACE,OAAb,CAAqB,MAArB,EAA6B,IAA7B,CAAP;AACH,GAFD,MAGK,IAAID,gBAAJ,EAAsB;AACvBH,IAAAA,qBAAqB,CAACK,gBAAtB,CAAuCF,gBAAvC;AACA,WAAOX,EAAE,CAACc,YAAH,CAAgBH,gBAAhB,EAAkC,MAAlC,CAAP;AACH;;AACD,SAAO,EAAP;AACH;;AACDI,MAAM,CAACjB,OAAP,GAAiB,IAAII,SAAS,CAACc,OAAd,CAAsB,kDAAtB,EACZC,WADY,CACA,yBADA,EAEZC,MAFY,CAEL,gBAFK,EAEa,iCAFb,EAGZA,MAHY,CAGL,0BAHK,EAGuB,0BAHvB,EAIZA,MAJY,CAIL,6BAJK,EAI0B,iCAJ1B,EAKZA,MALY,CAKL,oBALK,EAKiB,0DALjB,EAMZA,MANY,CAML,uBANK,EAMoB,4EANpB,EAOZA,MAPY,CAOL,mBAPK,EAOgB,0DAPhB,EAQZA,MARY,CAQL,sBARK,EAQmB,4EARnB,EASZC,MATY,CASLf,aAAa,CAACgB,WATT,EAUZC,MAVY,CAUL,OAAOC,IAAP,EAAaC,OAAb,KAAyB;AACjC,QAAMC,OAAO,GAAGhB,qBAAqB,CAACiB,UAAtB,CAAiCF,OAAjC,CAAhB;AACA,QAAMG,YAAY,GAAG,IAAInB,cAAc,CAACoB,YAAnB,CAAgCL,IAAhC,CAArB;AACA,QAAMZ,YAAY,GAAGD,eAAe,CAACc,OAAO,CAACb,YAAT,EAAuBa,OAAO,CAACZ,gBAA/B,CAApC;AACA,QAAMiB,OAAO,GAAGpB,qBAAqB,CAACqB,kBAAtB,CAAyCN,OAAO,CAACK,OAAjD,EAA0DL,OAAO,CAACO,WAAlE,CAAhB;AACA,QAAMC,MAAM,GAAGvB,qBAAqB,CAACqB,kBAAtB,CAAyCN,OAAO,CAACQ,MAAjD,EAAyDR,OAAO,CAACS,UAAjE,CAAf;AACA,QAAMC,QAAQ,GAAG,IAAI5B,QAAQ,CAAC6B,qBAAb,EAAjB;AACA,MAAIC,OAAJ;;AACA,MAAIT,YAAY,CAACU,oBAAb,OAAwC7B,cAAc,CAAC8B,oBAAf,CAAoCC,GAAhF,EAAqF;AACjF,QAAI;AACAH,MAAAA,OAAO,GAAG,MAAMF,QAAQ,CAACM,UAAT,CAAoBf,OAApB,CAAhB;AACH,KAFD,CAGA,OAAOgB,GAAP,EAAY;AACR,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,cAAM,IAAInC,OAAO,CAACoC,aAAZ,CAA2B,4CAA2CnB,OAAO,CAACoB,GAAI,IAAxD,GAC3B,8DAD2B,GAE5B,+DAF4B,GAG5B,+DAHE,EAG+D;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAH/D,CAAN;AAIH;;AACD,YAAM,IAAItC,OAAO,CAACoC,aAAZ,CAA2B,iCAAgCF,GAAG,CAACK,OAAQ,EAAvE,EAA0E;AAAED,QAAAA,IAAI,EAAE;AAAR,OAA1E,CAAN;AACH;;AACD,QAAIT,OAAO,CAACW,gBAAR,KAA6BzC,QAAQ,CAAC0C,gBAAT,CAA0BC,UAAvD,IACAb,OAAO,CAACW,gBAAR,KAA6BzC,QAAQ,CAAC0C,gBAAT,CAA0BE,qBAD3D,EACkF;AAC9E,cAAQd,OAAO,CAACW,gBAAhB;AACI,aAAKzC,QAAQ,CAAC0C,gBAAT,CAA0BG,uBAA/B;AAAwD;AACpD,kBAAM,IAAI5C,OAAO,CAACoC,aAAZ,CAA0B,sDAA1B,CAAN;AACH;;AACD,aAAKrC,QAAQ,CAAC0C,gBAAT,CAA0BI,iBAA/B;AAAkD;AAC9C,kBAAM,IAAI7C,OAAO,CAACoC,aAAZ,CAA0B,wDAA1B,CAAN;AACH;;AACD,aAAKrC,QAAQ,CAAC0C,gBAAT,CAA0BK,2CAA/B;AAA4E;AACxE,kBAAM,IAAI9C,OAAO,CAACoC,aAAZ,CAA0B,+DAA1B,CAAN;AACH;;AACD,aAAKrC,QAAQ,CAAC0C,gBAAT,CAA0BM,2BAA/B;AAA4D;AACxD,kBAAM,IAAI/C,OAAO,CAACoC,aAAZ,CAA0B,2EAA1B,CAAN;AACH;;AACD;AAAS;AACL,kBAAM,IAAIpC,OAAO,CAACoC,aAAZ,CAA0B,iDAAiDP,OAAO,CAACW,gBAAnF,CAAN;AACH;AAfL;AAiBH;AACJ;;AACD3C,EAAAA,KAAK,CAACmD,SAAN,CAAgB,qBAAhB;AACA,MAAIC,WAAJ;;AACA,MAAI;AACA,UAAMC,aAAa,GAAG,MAAMvB,QAAQ,CAACwB,aAAT,CAAuBjC,OAAvB,EAAgCE,YAAhC,CAA5B;AACA,UAAMgC,cAAc,GAAG,MAAMzB,QAAQ,CAAC0B,gBAAT,CAA0BH,aAA1B,CAA7B;AACA,UAAMI,OAAO,GAAGF,cAAc,CAACE,OAA/B;;AACA,YAAQF,cAAc,CAACG,MAAvB;AACI,WAAKxD,QAAQ,CAACyD,mBAAT,CAA6BC,eAAlC;AACI5D,QAAAA,KAAK,CAAC6D,UAAN,CAAkB,wBAAuBJ,OAAO,CAACK,cAAe,KAAIL,OAAO,CAACM,YAAa,iBAAzF;AACA;;AACJ,WAAK7D,QAAQ,CAACyD,mBAAT,CAA6BK,eAAlC;AACIhE,QAAAA,KAAK,CAAC6D,UAAN,CAAkB,uCAAsCJ,OAAO,CAACK,cAAe,KAAIL,OAAO,CAACM,YAAa,iBAAxG;AACA;;AACJ,WAAK7D,QAAQ,CAACyD,mBAAT,CAA6BM,kBAAlC;AACIjE,QAAAA,KAAK,CAAC6D,UAAN,CAAkB,wCAAuCJ,OAAO,CAACK,cAAe,KAAIL,OAAO,CAACM,YAAa,iBAAzG;AACA;;AACJ;AACI/D,QAAAA,KAAK,CAAC6D,UAAN,CAAkB,oBAAmBJ,OAAO,CAACK,cAAe,KAAIL,OAAO,CAACM,YAAa,iBAArF;AAXR;;AAaAX,IAAAA,WAAW,GAAGG,cAAc,CAACE,OAAf,CAAuBS,IAArC;AACH,GAlBD,CAmBA,OAAO7B,GAAP,EAAY;AACR,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,YAAM,IAAInC,OAAO,CAACoC,aAAZ,CAA2B,4CAA2CnB,OAAO,CAACoB,GAAI,IAAxD,GAC3B,8DAD2B,GAE5B,+DAF4B,GAG5B,+DAHE,EAG+D;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAH/D,CAAN;AAIH;;AACD,UAAM,IAAItC,OAAO,CAACoC,aAAZ,CAA2B,6BAA4BF,GAAG,CAACK,OAAQ,EAAnE,EAAsE;AAAED,MAAAA,IAAI,EAAE;AAAR,KAAtE,CAAN;AACH;;AACD,MAAIT,OAAO,IAAI,CAACA,OAAO,CAACmC,eAAxB,EAAyC;AACrCnC,IAAAA,OAAO,GAAG,MAAMF,QAAQ,CAACM,UAAT,CAAoBf,OAApB,CAAhB;;AACA,QAAIW,OAAO,CAACmC,eAAZ,EAA6B;AACzBnE,MAAAA,KAAK,CAACmD,SAAN,CAAgB,kEACZ,iFADY,GAEZ,2EAFY,GAGZ,2EAHY,GAIX,iCAAgCnB,OAAO,CAACmC,eAAR,CAAwBC,OAAQ,IAJrD,GAKX,kCAAiCpC,OAAO,CAACmC,eAAR,CAAwBE,QAAS,IALvD,GAMX,oCAAmCrC,OAAO,CAACmC,eAAR,CAAwBG,UAAW,EAN3E;AAOH;AACJ;;AACD,QAAMxC,QAAQ,CAACyC,kBAAT,CAA4BnB,WAA5B,EAAyC7C,YAAzC,CAAN;AACA,QAAMuB,QAAQ,CAAC0C,UAAT,CAAoBpB,WAApB,EAAiC3B,OAAjC,EAA0CG,MAA1C,CAAN;AACH,CAhGgB,CAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs-extra\");\nconst command_1 = require(\"../command\");\nconst utils = require(\"../utils\");\nconst requireAuth_1 = require(\"../requireAuth\");\nconst client_1 = require(\"../appdistribution/client\");\nconst error_1 = require(\"../error\");\nconst distribution_1 = require(\"../appdistribution/distribution\");\nconst options_parser_util_1 = require(\"../appdistribution/options-parser-util\");\nfunction getReleaseNotes(releaseNotes, releaseNotesFile) {\n    if (releaseNotes) {\n        return releaseNotes.replace(/\\\\n/g, \"\\n\");\n    }\n    else if (releaseNotesFile) {\n        options_parser_util_1.ensureFileExists(releaseNotesFile);\n        return fs.readFileSync(releaseNotesFile, \"utf8\");\n    }\n    return \"\";\n}\nmodule.exports = new command_1.Command(\"appdistribution:distribute <release-binary-file>\")\n    .description(\"upload a release binary\")\n    .option(\"--app <app_id>\", \"the app id of your Firebase app\")\n    .option(\"--release-notes <string>\", \"release notes to include\")\n    .option(\"--release-notes-file <file>\", \"path to file with release notes\")\n    .option(\"--testers <string>\", \"a comma separated list of tester emails to distribute to\")\n    .option(\"--testers-file <file>\", \"path to file with a comma separated list of tester emails to distribute to\")\n    .option(\"--groups <string>\", \"a comma separated list of group aliases to distribute to\")\n    .option(\"--groups-file <file>\", \"path to file with a comma separated list of group aliases to distribute to\")\n    .before(requireAuth_1.requireAuth)\n    .action(async (file, options) => {\n    const appName = options_parser_util_1.getAppName(options);\n    const distribution = new distribution_1.Distribution(file);\n    const releaseNotes = getReleaseNotes(options.releaseNotes, options.releaseNotesFile);\n    const testers = options_parser_util_1.getTestersOrGroups(options.testers, options.testersFile);\n    const groups = options_parser_util_1.getTestersOrGroups(options.groups, options.groupsFile);\n    const requests = new client_1.AppDistributionClient();\n    let aabInfo;\n    if (distribution.distributionFileType() === distribution_1.DistributionFileType.AAB) {\n        try {\n            aabInfo = await requests.getAabInfo(appName);\n        }\n        catch (err) {\n            if (err.status === 404) {\n                throw new error_1.FirebaseError(`App Distribution could not find your app ${options.app}. ` +\n                    `Make sure to onboard your app by pressing the \"Get started\" ` +\n                    \"button on the App Distribution page in the Firebase console: \" +\n                    \"https://console.firebase.google.com/project/_/appdistribution\", { exit: 1 });\n            }\n            throw new error_1.FirebaseError(`failed to determine AAB info. ${err.message}`, { exit: 1 });\n        }\n        if (aabInfo.integrationState !== client_1.IntegrationState.INTEGRATED &&\n            aabInfo.integrationState !== client_1.IntegrationState.AAB_STATE_UNAVAILABLE) {\n            switch (aabInfo.integrationState) {\n                case client_1.IntegrationState.PLAY_ACCOUNT_NOT_LINKED: {\n                    throw new error_1.FirebaseError(\"This project is not linked to a Google Play account.\");\n                }\n                case client_1.IntegrationState.APP_NOT_PUBLISHED: {\n                    throw new error_1.FirebaseError('\"This app is not published in the Google Play console.');\n                }\n                case client_1.IntegrationState.NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT: {\n                    throw new error_1.FirebaseError(\"App with matching package name does not exist in Google Play.\");\n                }\n                case client_1.IntegrationState.PLAY_IAS_TERMS_NOT_ACCEPTED: {\n                    throw new error_1.FirebaseError(\"You must accept the Play Internal App Sharing (IAS) terms to upload AABs.\");\n                }\n                default: {\n                    throw new error_1.FirebaseError(\"App Distribution failed to process the AAB: \" + aabInfo.integrationState);\n                }\n            }\n        }\n    }\n    utils.logBullet(\"uploading binary...\");\n    let releaseName;\n    try {\n        const operationName = await requests.uploadRelease(appName, distribution);\n        const uploadResponse = await requests.pollUploadStatus(operationName);\n        const release = uploadResponse.release;\n        switch (uploadResponse.result) {\n            case client_1.UploadReleaseResult.RELEASE_CREATED:\n                utils.logSuccess(`uploaded new release ${release.displayVersion} (${release.buildVersion}) successfully!`);\n                break;\n            case client_1.UploadReleaseResult.RELEASE_UPDATED:\n                utils.logSuccess(`uploaded update to existing release ${release.displayVersion} (${release.buildVersion}) successfully!`);\n                break;\n            case client_1.UploadReleaseResult.RELEASE_UNMODIFIED:\n                utils.logSuccess(`re-uploaded already existing release ${release.displayVersion} (${release.buildVersion}) successfully!`);\n                break;\n            default:\n                utils.logSuccess(`uploaded release ${release.displayVersion} (${release.buildVersion}) successfully!`);\n        }\n        releaseName = uploadResponse.release.name;\n    }\n    catch (err) {\n        if (err.status === 404) {\n            throw new error_1.FirebaseError(`App Distribution could not find your app ${options.app}. ` +\n                `Make sure to onboard your app by pressing the \"Get started\" ` +\n                \"button on the App Distribution page in the Firebase console: \" +\n                \"https://console.firebase.google.com/project/_/appdistribution\", { exit: 1 });\n        }\n        throw new error_1.FirebaseError(`failed to upload release. ${err.message}`, { exit: 1 });\n    }\n    if (aabInfo && !aabInfo.testCertificate) {\n        aabInfo = await requests.getAabInfo(appName);\n        if (aabInfo.testCertificate) {\n            utils.logBullet(\"After you upload an AAB for the first time, App Distribution \" +\n                \"generates a new test certificate. All AAB uploads are re-signed with this test \" +\n                \"certificate. Use the certificate fingerprints below to register your app \" +\n                \"signing key with API providers, such as Google Sign-In and Google Maps.\\n\" +\n                `MD-1 certificate fingerprint: ${aabInfo.testCertificate.hashMd5}\\n` +\n                `SHA-1 certificate fingerprint: ${aabInfo.testCertificate.hashSha1}\\n` +\n                `SHA-256 certificate fingerprint: ${aabInfo.testCertificate.hashSha256}`);\n        }\n    }\n    await requests.updateReleaseNotes(releaseName, releaseNotes);\n    await requests.distribute(releaseName, testers, groups);\n});\n"]},"metadata":{},"sourceType":"script"}