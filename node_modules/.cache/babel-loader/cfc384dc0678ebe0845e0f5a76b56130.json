{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppDistributionClient = exports.UploadReleaseResult = exports.IntegrationState = void 0;\n\nconst _ = require(\"lodash\");\n\nconst api = require(\"../api\");\n\nconst utils = require(\"../utils\");\n\nconst operationPoller = require(\"../operation-poller\");\n\nconst error_1 = require(\"../error\");\n\nconst apiv2_1 = require(\"../apiv2\");\n\nvar IntegrationState;\n\n(function (IntegrationState) {\n  IntegrationState[\"AAB_INTEGRATION_STATE_UNSPECIFIED\"] = \"AAB_INTEGRATION_STATE_UNSPECIFIED\";\n  IntegrationState[\"INTEGRATED\"] = \"INTEGRATED\";\n  IntegrationState[\"PLAY_ACCOUNT_NOT_LINKED\"] = \"PLAY_ACCOUNT_NOT_LINKED\";\n  IntegrationState[\"NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT\"] = \"NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT\";\n  IntegrationState[\"APP_NOT_PUBLISHED\"] = \"APP_NOT_PUBLISHED\";\n  IntegrationState[\"AAB_STATE_UNAVAILABLE\"] = \"AAB_STATE_UNAVAILABLE\";\n  IntegrationState[\"PLAY_IAS_TERMS_NOT_ACCEPTED\"] = \"PLAY_IAS_TERMS_NOT_ACCEPTED\";\n})(IntegrationState = exports.IntegrationState || (exports.IntegrationState = {}));\n\nvar UploadReleaseResult;\n\n(function (UploadReleaseResult) {\n  UploadReleaseResult[\"UPLOAD_RELEASE_RESULT_UNSPECIFIED\"] = \"UPLOAD_RELEASE_RESULT_UNSPECIFIED\";\n  UploadReleaseResult[\"RELEASE_CREATED\"] = \"RELEASE_CREATED\";\n  UploadReleaseResult[\"RELEASE_UPDATED\"] = \"RELEASE_UPDATED\";\n  UploadReleaseResult[\"RELEASE_UNMODIFIED\"] = \"RELEASE_UNMODIFIED\";\n})(UploadReleaseResult = exports.UploadReleaseResult || (exports.UploadReleaseResult = {}));\n\nclass AppDistributionClient {\n  constructor() {\n    this.appDistroV2Client = new apiv2_1.Client({\n      urlPrefix: api.appDistributionOrigin,\n      apiVersion: \"v1\"\n    });\n  }\n\n  async getAabInfo(appName) {\n    const apiResponse = await api.request(\"GET\", `/v1/${appName}/aabInfo`, {\n      origin: api.appDistributionOrigin,\n      auth: true\n    });\n    return _.get(apiResponse, \"body\");\n  }\n\n  async uploadRelease(appName, distribution) {\n    const apiResponse = await api.request(\"POST\", `/upload/v1/${appName}/releases:upload`, {\n      auth: true,\n      origin: api.appDistributionOrigin,\n      headers: {\n        \"X-Goog-Upload-File-Name\": distribution.getFileName(),\n        \"X-Goog-Upload-Protocol\": \"raw\",\n        \"Content-Type\": \"application/octet-stream\"\n      },\n      data: distribution.readStream(),\n      json: false\n    });\n    return _.get(JSON.parse(apiResponse.body), \"name\");\n  }\n\n  async pollUploadStatus(operationName) {\n    return operationPoller.pollOperation({\n      pollerName: \"App Distribution Upload Poller\",\n      apiOrigin: api.appDistributionOrigin,\n      apiVersion: \"v1\",\n      operationResourceName: operationName,\n      masterTimeout: 5 * 60 * 1000,\n      backoff: 1000,\n      maxBackoff: 10 * 1000\n    });\n  }\n\n  async updateReleaseNotes(releaseName, releaseNotes) {\n    if (!releaseNotes) {\n      utils.logWarning(\"no release notes specified, skipping\");\n      return;\n    }\n\n    utils.logBullet(\"updating release notes...\");\n    const data = {\n      name: releaseName,\n      releaseNotes: {\n        text: releaseNotes\n      }\n    };\n\n    try {\n      await api.request(\"PATCH\", `/v1/${releaseName}?updateMask=release_notes.text`, {\n        origin: api.appDistributionOrigin,\n        auth: true,\n        data\n      });\n    } catch (err) {\n      throw new error_1.FirebaseError(`failed to update release notes with ${err.message}`, {\n        exit: 1\n      });\n    }\n\n    utils.logSuccess(\"added release notes successfully\");\n  }\n\n  async distribute(releaseName, testerEmails = [], groupAliases = []) {\n    if (testerEmails.length === 0 && groupAliases.length === 0) {\n      utils.logWarning(\"no testers or groups specified, skipping\");\n      return;\n    }\n\n    utils.logBullet(\"distributing to testers/groups...\");\n    const data = {\n      testerEmails,\n      groupAliases\n    };\n\n    try {\n      await api.request(\"POST\", `/v1/${releaseName}:distribute`, {\n        origin: api.appDistributionOrigin,\n        auth: true,\n        data\n      });\n    } catch (err) {\n      let errorMessage = err.message;\n\n      if (_.has(err, \"context.body.error\")) {\n        const errorStatus = _.get(err, \"context.body.error.status\");\n\n        if (errorStatus === \"FAILED_PRECONDITION\") {\n          errorMessage = \"invalid testers\";\n        } else if (errorStatus === \"INVALID_ARGUMENT\") {\n          errorMessage = \"invalid groups\";\n        }\n      }\n\n      throw new error_1.FirebaseError(`failed to distribute to testers/groups: ${errorMessage}`, {\n        exit: 1\n      });\n    }\n\n    utils.logSuccess(\"distributed to testers/groups successfully\");\n  }\n\n  async addTesters(projectName, emails) {\n    try {\n      await this.appDistroV2Client.request({\n        method: \"POST\",\n        path: `${projectName}/testers:batchAdd`,\n        body: {\n          emails: emails\n        }\n      });\n    } catch (err) {\n      throw new error_1.FirebaseError(`Failed to add testers ${err}`);\n    }\n\n    utils.logSuccess(`Testers created successfully`);\n  }\n\n  async removeTesters(projectName, emails) {\n    let apiResponse;\n\n    try {\n      apiResponse = await this.appDistroV2Client.request({\n        method: \"POST\",\n        path: `${projectName}/testers:batchRemove`,\n        body: {\n          emails: emails\n        }\n      });\n    } catch (err) {\n      throw new error_1.FirebaseError(`Failed to remove testers ${err}`);\n    }\n\n    return apiResponse.body;\n  }\n\n}\n\nexports.AppDistributionClient = AppDistributionClient;","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/appdistribution/client.js"],"names":["Object","defineProperty","exports","value","AppDistributionClient","UploadReleaseResult","IntegrationState","_","require","api","utils","operationPoller","error_1","apiv2_1","constructor","appDistroV2Client","Client","urlPrefix","appDistributionOrigin","apiVersion","getAabInfo","appName","apiResponse","request","origin","auth","get","uploadRelease","distribution","headers","getFileName","data","readStream","json","JSON","parse","body","pollUploadStatus","operationName","pollOperation","pollerName","apiOrigin","operationResourceName","masterTimeout","backoff","maxBackoff","updateReleaseNotes","releaseName","releaseNotes","logWarning","logBullet","name","text","err","FirebaseError","message","exit","logSuccess","distribute","testerEmails","groupAliases","length","errorMessage","has","errorStatus","addTesters","projectName","emails","method","path","removeTesters"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppDistributionClient = exports.UploadReleaseResult = exports.IntegrationState = void 0;\nconst _ = require(\"lodash\");\nconst api = require(\"../api\");\nconst utils = require(\"../utils\");\nconst operationPoller = require(\"../operation-poller\");\nconst error_1 = require(\"../error\");\nconst apiv2_1 = require(\"../apiv2\");\nvar IntegrationState;\n(function (IntegrationState) {\n    IntegrationState[\"AAB_INTEGRATION_STATE_UNSPECIFIED\"] = \"AAB_INTEGRATION_STATE_UNSPECIFIED\";\n    IntegrationState[\"INTEGRATED\"] = \"INTEGRATED\";\n    IntegrationState[\"PLAY_ACCOUNT_NOT_LINKED\"] = \"PLAY_ACCOUNT_NOT_LINKED\";\n    IntegrationState[\"NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT\"] = \"NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT\";\n    IntegrationState[\"APP_NOT_PUBLISHED\"] = \"APP_NOT_PUBLISHED\";\n    IntegrationState[\"AAB_STATE_UNAVAILABLE\"] = \"AAB_STATE_UNAVAILABLE\";\n    IntegrationState[\"PLAY_IAS_TERMS_NOT_ACCEPTED\"] = \"PLAY_IAS_TERMS_NOT_ACCEPTED\";\n})(IntegrationState = exports.IntegrationState || (exports.IntegrationState = {}));\nvar UploadReleaseResult;\n(function (UploadReleaseResult) {\n    UploadReleaseResult[\"UPLOAD_RELEASE_RESULT_UNSPECIFIED\"] = \"UPLOAD_RELEASE_RESULT_UNSPECIFIED\";\n    UploadReleaseResult[\"RELEASE_CREATED\"] = \"RELEASE_CREATED\";\n    UploadReleaseResult[\"RELEASE_UPDATED\"] = \"RELEASE_UPDATED\";\n    UploadReleaseResult[\"RELEASE_UNMODIFIED\"] = \"RELEASE_UNMODIFIED\";\n})(UploadReleaseResult = exports.UploadReleaseResult || (exports.UploadReleaseResult = {}));\nclass AppDistributionClient {\n    constructor() {\n        this.appDistroV2Client = new apiv2_1.Client({\n            urlPrefix: api.appDistributionOrigin,\n            apiVersion: \"v1\",\n        });\n    }\n    async getAabInfo(appName) {\n        const apiResponse = await api.request(\"GET\", `/v1/${appName}/aabInfo`, {\n            origin: api.appDistributionOrigin,\n            auth: true,\n        });\n        return _.get(apiResponse, \"body\");\n    }\n    async uploadRelease(appName, distribution) {\n        const apiResponse = await api.request(\"POST\", `/upload/v1/${appName}/releases:upload`, {\n            auth: true,\n            origin: api.appDistributionOrigin,\n            headers: {\n                \"X-Goog-Upload-File-Name\": distribution.getFileName(),\n                \"X-Goog-Upload-Protocol\": \"raw\",\n                \"Content-Type\": \"application/octet-stream\",\n            },\n            data: distribution.readStream(),\n            json: false,\n        });\n        return _.get(JSON.parse(apiResponse.body), \"name\");\n    }\n    async pollUploadStatus(operationName) {\n        return operationPoller.pollOperation({\n            pollerName: \"App Distribution Upload Poller\",\n            apiOrigin: api.appDistributionOrigin,\n            apiVersion: \"v1\",\n            operationResourceName: operationName,\n            masterTimeout: 5 * 60 * 1000,\n            backoff: 1000,\n            maxBackoff: 10 * 1000,\n        });\n    }\n    async updateReleaseNotes(releaseName, releaseNotes) {\n        if (!releaseNotes) {\n            utils.logWarning(\"no release notes specified, skipping\");\n            return;\n        }\n        utils.logBullet(\"updating release notes...\");\n        const data = {\n            name: releaseName,\n            releaseNotes: {\n                text: releaseNotes,\n            },\n        };\n        try {\n            await api.request(\"PATCH\", `/v1/${releaseName}?updateMask=release_notes.text`, {\n                origin: api.appDistributionOrigin,\n                auth: true,\n                data,\n            });\n        }\n        catch (err) {\n            throw new error_1.FirebaseError(`failed to update release notes with ${err.message}`, { exit: 1 });\n        }\n        utils.logSuccess(\"added release notes successfully\");\n    }\n    async distribute(releaseName, testerEmails = [], groupAliases = []) {\n        if (testerEmails.length === 0 && groupAliases.length === 0) {\n            utils.logWarning(\"no testers or groups specified, skipping\");\n            return;\n        }\n        utils.logBullet(\"distributing to testers/groups...\");\n        const data = {\n            testerEmails,\n            groupAliases,\n        };\n        try {\n            await api.request(\"POST\", `/v1/${releaseName}:distribute`, {\n                origin: api.appDistributionOrigin,\n                auth: true,\n                data,\n            });\n        }\n        catch (err) {\n            let errorMessage = err.message;\n            if (_.has(err, \"context.body.error\")) {\n                const errorStatus = _.get(err, \"context.body.error.status\");\n                if (errorStatus === \"FAILED_PRECONDITION\") {\n                    errorMessage = \"invalid testers\";\n                }\n                else if (errorStatus === \"INVALID_ARGUMENT\") {\n                    errorMessage = \"invalid groups\";\n                }\n            }\n            throw new error_1.FirebaseError(`failed to distribute to testers/groups: ${errorMessage}`, {\n                exit: 1,\n            });\n        }\n        utils.logSuccess(\"distributed to testers/groups successfully\");\n    }\n    async addTesters(projectName, emails) {\n        try {\n            await this.appDistroV2Client.request({\n                method: \"POST\",\n                path: `${projectName}/testers:batchAdd`,\n                body: { emails: emails },\n            });\n        }\n        catch (err) {\n            throw new error_1.FirebaseError(`Failed to add testers ${err}`);\n        }\n        utils.logSuccess(`Testers created successfully`);\n    }\n    async removeTesters(projectName, emails) {\n        let apiResponse;\n        try {\n            apiResponse = await this.appDistroV2Client.request({\n                method: \"POST\",\n                path: `${projectName}/testers:batchRemove`,\n                body: { emails: emails },\n            });\n        }\n        catch (err) {\n            throw new error_1.FirebaseError(`Failed to remove testers ${err}`);\n        }\n        return apiResponse.body;\n    }\n}\nexports.AppDistributionClient = AppDistributionClient;\n"]},"metadata":{},"sourceType":"script"}