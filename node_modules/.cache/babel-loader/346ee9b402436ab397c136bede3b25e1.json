{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.downloadToTmp = void 0;\n\nconst url_1 = require(\"url\");\n\nconst fs = require(\"fs-extra\");\n\nconst ProgressBar = require(\"progress\");\n\nconst tmp = require(\"tmp\");\n\nconst apiv2_1 = require(\"./apiv2\");\n\nconst error_1 = require(\"./error\");\n\nasync function downloadToTmp(remoteUrl) {\n  const u = new url_1.URL(remoteUrl);\n  const c = new apiv2_1.Client({\n    urlPrefix: u.origin,\n    auth: false\n  });\n  const tmpfile = tmp.fileSync();\n  const writeStream = fs.createWriteStream(tmpfile.name);\n  const res = await c.request({\n    method: \"GET\",\n    path: u.pathname,\n    queryParams: u.searchParams,\n    responseType: \"stream\",\n    resolveOnHTTPError: true\n  });\n\n  if (res.status !== 200) {\n    throw new error_1.FirebaseError(`download failed, status ${res.status}`, {\n      exit: 1\n    });\n  }\n\n  const total = parseInt(res.response.headers.get(\"content-length\") || \"0\", 10);\n  const totalMb = Math.ceil(total / 1000000);\n  const bar = new ProgressBar(`Progress: :bar (:percent of ${totalMb}MB)`, {\n    total,\n    head: \">\"\n  });\n  res.body.on(\"data\", chunk => {\n    bar.tick(chunk.length);\n  });\n  await new Promise(resolve => {\n    writeStream.on(\"finish\", resolve);\n    res.body.pipe(writeStream);\n  });\n  return tmpfile.name;\n}\n\nexports.downloadToTmp = downloadToTmp;","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/downloadUtils.js"],"names":["Object","defineProperty","exports","value","downloadToTmp","url_1","require","fs","ProgressBar","tmp","apiv2_1","error_1","remoteUrl","u","URL","c","Client","urlPrefix","origin","auth","tmpfile","fileSync","writeStream","createWriteStream","name","res","request","method","path","pathname","queryParams","searchParams","responseType","resolveOnHTTPError","status","FirebaseError","exit","total","parseInt","response","headers","get","totalMb","Math","ceil","bar","head","body","on","chunk","tick","length","Promise","resolve","pipe"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,KAAD,CAArB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,UAAD,CAA3B;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,SAAD,CAAvB;;AACA,eAAeF,aAAf,CAA6BQ,SAA7B,EAAwC;AACpC,QAAMC,CAAC,GAAG,IAAIR,KAAK,CAACS,GAAV,CAAcF,SAAd,CAAV;AACA,QAAMG,CAAC,GAAG,IAAIL,OAAO,CAACM,MAAZ,CAAmB;AAAEC,IAAAA,SAAS,EAAEJ,CAAC,CAACK,MAAf;AAAuBC,IAAAA,IAAI,EAAE;AAA7B,GAAnB,CAAV;AACA,QAAMC,OAAO,GAAGX,GAAG,CAACY,QAAJ,EAAhB;AACA,QAAMC,WAAW,GAAGf,EAAE,CAACgB,iBAAH,CAAqBH,OAAO,CAACI,IAA7B,CAApB;AACA,QAAMC,GAAG,GAAG,MAAMV,CAAC,CAACW,OAAF,CAAU;AACxBC,IAAAA,MAAM,EAAE,KADgB;AAExBC,IAAAA,IAAI,EAAEf,CAAC,CAACgB,QAFgB;AAGxBC,IAAAA,WAAW,EAAEjB,CAAC,CAACkB,YAHS;AAIxBC,IAAAA,YAAY,EAAE,QAJU;AAKxBC,IAAAA,kBAAkB,EAAE;AALI,GAAV,CAAlB;;AAOA,MAAIR,GAAG,CAACS,MAAJ,KAAe,GAAnB,EAAwB;AACpB,UAAM,IAAIvB,OAAO,CAACwB,aAAZ,CAA2B,2BAA0BV,GAAG,CAACS,MAAO,EAAhE,EAAmE;AAAEE,MAAAA,IAAI,EAAE;AAAR,KAAnE,CAAN;AACH;;AACD,QAAMC,KAAK,GAAGC,QAAQ,CAACb,GAAG,CAACc,QAAJ,CAAaC,OAAb,CAAqBC,GAArB,CAAyB,gBAAzB,KAA8C,GAA/C,EAAoD,EAApD,CAAtB;AACA,QAAMC,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUP,KAAK,GAAG,OAAlB,CAAhB;AACA,QAAMQ,GAAG,GAAG,IAAIrC,WAAJ,CAAiB,+BAA8BkC,OAAQ,KAAvD,EAA6D;AAAEL,IAAAA,KAAF;AAASS,IAAAA,IAAI,EAAE;AAAf,GAA7D,CAAZ;AACArB,EAAAA,GAAG,CAACsB,IAAJ,CAASC,EAAT,CAAY,MAAZ,EAAqBC,KAAD,IAAW;AAC3BJ,IAAAA,GAAG,CAACK,IAAJ,CAASD,KAAK,CAACE,MAAf;AACH,GAFD;AAGA,QAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC3B/B,IAAAA,WAAW,CAAC0B,EAAZ,CAAe,QAAf,EAAyBK,OAAzB;AACA5B,IAAAA,GAAG,CAACsB,IAAJ,CAASO,IAAT,CAAchC,WAAd;AACH,GAHK,CAAN;AAIA,SAAOF,OAAO,CAACI,IAAf;AACH;;AACDtB,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.downloadToTmp = void 0;\nconst url_1 = require(\"url\");\nconst fs = require(\"fs-extra\");\nconst ProgressBar = require(\"progress\");\nconst tmp = require(\"tmp\");\nconst apiv2_1 = require(\"./apiv2\");\nconst error_1 = require(\"./error\");\nasync function downloadToTmp(remoteUrl) {\n    const u = new url_1.URL(remoteUrl);\n    const c = new apiv2_1.Client({ urlPrefix: u.origin, auth: false });\n    const tmpfile = tmp.fileSync();\n    const writeStream = fs.createWriteStream(tmpfile.name);\n    const res = await c.request({\n        method: \"GET\",\n        path: u.pathname,\n        queryParams: u.searchParams,\n        responseType: \"stream\",\n        resolveOnHTTPError: true,\n    });\n    if (res.status !== 200) {\n        throw new error_1.FirebaseError(`download failed, status ${res.status}`, { exit: 1 });\n    }\n    const total = parseInt(res.response.headers.get(\"content-length\") || \"0\", 10);\n    const totalMb = Math.ceil(total / 1000000);\n    const bar = new ProgressBar(`Progress: :bar (:percent of ${totalMb}MB)`, { total, head: \">\" });\n    res.body.on(\"data\", (chunk) => {\n        bar.tick(chunk.length);\n    });\n    await new Promise((resolve) => {\n        writeStream.on(\"finish\", resolve);\n        res.body.pipe(writeStream);\n    });\n    return tmpfile.name;\n}\nexports.downloadToTmp = downloadToTmp;\n"]},"metadata":{},"sourceType":"script"}