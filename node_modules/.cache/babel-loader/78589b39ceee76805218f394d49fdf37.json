{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inferDetailsFromExisting = exports.prepare = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst ensureCloudBuildEnabled_1 = require(\"./ensureCloudBuildEnabled\");\n\nconst functionsDeployHelper_1 = require(\"./functionsDeployHelper\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst prepareFunctionsUpload_1 = require(\"./prepareFunctionsUpload\");\n\nconst prompts_1 = require(\"./prompts\");\n\nconst backend = require(\"./backend\");\n\nconst ensureApiEnabled = require(\"../../ensureApiEnabled\");\n\nconst functionsConfig = require(\"../../functionsConfig\");\n\nconst functionsEnv = require(\"../../functions/env\");\n\nconst previews_1 = require(\"../../previews\");\n\nconst projectUtils_1 = require(\"../../projectUtils\");\n\nconst track_1 = require(\"../../track\");\n\nconst runtimes = require(\"./runtimes\");\n\nconst validate = require(\"./validate\");\n\nconst utils = require(\"../../utils\");\n\nconst logger_1 = require(\"../../logger\");\n\nconst triggerRegionHelper_1 = require(\"./triggerRegionHelper\");\n\nfunction hasUserConfig(config) {\n  return Object.keys(config).length > 1;\n}\n\nfunction hasDotenv(opts) {\n  return previews_1.previews.dotenv && functionsEnv.hasUserEnvs(opts);\n}\n\nasync function prepare(context, options, payload) {\n  if (!options.config.src.functions) {\n    return;\n  }\n\n  const runtimeDelegate = await runtimes.getRuntimeDelegate(context, options);\n  logger_1.logger.debug(`Validating ${runtimeDelegate.name} source`);\n  await runtimeDelegate.validate();\n  logger_1.logger.debug(`Building ${runtimeDelegate.name} source`);\n  await runtimeDelegate.build();\n  const projectId = projectUtils_1.needProjectId(options);\n  const checkAPIsEnabled = await Promise.all([ensureApiEnabled.ensure(projectId, \"cloudfunctions.googleapis.com\", \"functions\"), ensureApiEnabled.check(projectId, \"runtimeconfig.googleapis.com\", \"runtimeconfig\", true), ensureCloudBuildEnabled_1.ensureCloudBuildEnabled(projectId)]);\n  context.runtimeConfigEnabled = checkAPIsEnabled[1];\n  const firebaseConfig = await functionsConfig.getFirebaseConfig(options);\n  context.firebaseConfig = firebaseConfig;\n  const runtimeConfig = await prepareFunctionsUpload_1.getFunctionsConfig(context);\n  utils.assertDefined(options.config.src.functions.source, \"Error: 'functions.source' is not defined\");\n  const source = options.config.src.functions.source;\n  const firebaseEnvs = functionsEnv.loadFirebaseEnvs(firebaseConfig, projectId);\n  const userEnvOpt = {\n    functionsSource: options.config.path(source),\n    projectId: projectId,\n    projectAlias: options.projectAlias\n  };\n  const userEnvs = functionsEnv.loadUserEnvs(userEnvOpt);\n  const usedDotenv = hasDotenv(userEnvOpt);\n  const tag = hasUserConfig(runtimeConfig) ? usedDotenv ? \"mixed\" : \"runtime_config\" : usedDotenv ? \"dotenv\" : \"none\";\n  await track_1.track(\"functions_codebase_deploy_env_method\", tag);\n  logger_1.logger.debug(`Analyzing ${runtimeDelegate.name} backend spec`);\n  const wantBackend = await runtimeDelegate.discoverSpec(runtimeConfig, firebaseEnvs);\n  wantBackend.environmentVariables = Object.assign(Object.assign({}, userEnvs), firebaseEnvs);\n  payload.functions = {\n    backend: wantBackend\n  };\n\n  if (backend.someEndpoint(wantBackend, e => e.platform === \"gcfv2\")) {\n    const V2_APIS = [\"artifactregistry.googleapis.com\", \"run.googleapis.com\", \"eventarc.googleapis.com\", \"pubsub.googleapis.com\", \"storage.googleapis.com\"];\n    const enablements = V2_APIS.map(api => {\n      return ensureApiEnabled.ensure(context.projectId, api, \"functions\");\n    });\n    await Promise.all(enablements);\n  }\n\n  if (backend.someEndpoint(wantBackend, () => true)) {\n    utils_1.logBullet(clc.cyan.bold(\"functions:\") + \" preparing \" + clc.bold(options.config.src.functions.source) + \" directory for uploading...\");\n  }\n\n  if (backend.someEndpoint(wantBackend, e => e.platform === \"gcfv1\")) {\n    context.functionsSourceV1 = await prepareFunctionsUpload_1.prepareFunctionsUpload(runtimeConfig, options);\n  }\n\n  if (backend.someEndpoint(wantBackend, e => e.platform === \"gcfv2\")) {\n    context.functionsSourceV2 = await prepareFunctionsUpload_1.prepareFunctionsUpload(undefined, options);\n  }\n\n  for (const endpoint of backend.allEndpoints(wantBackend)) {\n    endpoint.environmentVariables = wantBackend.environmentVariables;\n  }\n\n  await Promise.all(Object.values(wantBackend.requiredAPIs).map(api => {\n    return ensureApiEnabled.ensure(projectId, api, \"functions\", false);\n  }));\n  validate.functionIdsAreValid(backend.allEndpoints(wantBackend));\n  context.filters = functionsDeployHelper_1.getFilterGroups(options);\n  const matchingBackend = backend.matchingBackend(wantBackend, endpoint => {\n    return functionsDeployHelper_1.functionMatchesAnyGroup(endpoint, context.filters);\n  });\n  const haveBackend = await backend.existingBackend(context);\n  inferDetailsFromExisting(wantBackend, haveBackend, usedDotenv);\n  await triggerRegionHelper_1.lookupMissingTriggerRegions(wantBackend);\n  await prompts_1.promptForFailurePolicies(options, matchingBackend, haveBackend);\n  await prompts_1.promptForMinInstances(options, matchingBackend, haveBackend);\n  await backend.checkAvailability(context, wantBackend);\n}\n\nexports.prepare = prepare;\n\nfunction inferDetailsFromExisting(want, have, usedDotenv) {\n  var _a;\n\n  for (const wantE of backend.allEndpoints(want)) {\n    const haveE = (_a = have.endpoints[wantE.region]) === null || _a === void 0 ? void 0 : _a[wantE.id];\n\n    if (!haveE) {\n      continue;\n    }\n\n    if (!usedDotenv) {\n      wantE.environmentVariables = Object.assign(Object.assign({}, haveE.environmentVariables), wantE.environmentVariables);\n    }\n\n    if (!wantE.availableMemoryMb && haveE.availableMemoryMb) {\n      wantE.availableMemoryMb = haveE.availableMemoryMb;\n    }\n\n    maybeCopyTriggerRegion(wantE, haveE);\n  }\n}\n\nexports.inferDetailsFromExisting = inferDetailsFromExisting;\n\nfunction maybeCopyTriggerRegion(wantE, haveE) {\n  if (!backend.isEventTriggered(wantE) || !backend.isEventTriggered(haveE)) {\n    return;\n  }\n\n  if (wantE.eventTrigger.region || !haveE.eventTrigger.region) {\n    return;\n  }\n\n  if (JSON.stringify(haveE.eventTrigger.eventFilters) !== JSON.stringify(wantE.eventTrigger.eventFilters)) {\n    return;\n  }\n\n  wantE.eventTrigger.region = haveE.eventTrigger.region;\n}","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/deploy/functions/prepare.js"],"names":["Object","defineProperty","exports","value","inferDetailsFromExisting","prepare","clc","require","ensureCloudBuildEnabled_1","functionsDeployHelper_1","utils_1","prepareFunctionsUpload_1","prompts_1","backend","ensureApiEnabled","functionsConfig","functionsEnv","previews_1","projectUtils_1","track_1","runtimes","validate","utils","logger_1","triggerRegionHelper_1","hasUserConfig","config","keys","length","hasDotenv","opts","previews","dotenv","hasUserEnvs","context","options","payload","src","functions","runtimeDelegate","getRuntimeDelegate","logger","debug","name","build","projectId","needProjectId","checkAPIsEnabled","Promise","all","ensure","check","ensureCloudBuildEnabled","runtimeConfigEnabled","firebaseConfig","getFirebaseConfig","runtimeConfig","getFunctionsConfig","assertDefined","source","firebaseEnvs","loadFirebaseEnvs","userEnvOpt","functionsSource","path","projectAlias","userEnvs","loadUserEnvs","usedDotenv","tag","track","wantBackend","discoverSpec","environmentVariables","assign","someEndpoint","e","platform","V2_APIS","enablements","map","api","logBullet","cyan","bold","functionsSourceV1","prepareFunctionsUpload","functionsSourceV2","undefined","endpoint","allEndpoints","values","requiredAPIs","functionIdsAreValid","filters","getFilterGroups","matchingBackend","functionMatchesAnyGroup","haveBackend","existingBackend","lookupMissingTriggerRegions","promptForFailurePolicies","promptForMinInstances","checkAvailability","want","have","_a","wantE","haveE","endpoints","region","id","availableMemoryMb","maybeCopyTriggerRegion","isEventTriggered","eventTrigger","JSON","stringify","eventFilters"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.inferDetailsFromExisting = exports.prepare = void 0;\nconst clc = require(\"cli-color\");\nconst ensureCloudBuildEnabled_1 = require(\"./ensureCloudBuildEnabled\");\nconst functionsDeployHelper_1 = require(\"./functionsDeployHelper\");\nconst utils_1 = require(\"../../utils\");\nconst prepareFunctionsUpload_1 = require(\"./prepareFunctionsUpload\");\nconst prompts_1 = require(\"./prompts\");\nconst backend = require(\"./backend\");\nconst ensureApiEnabled = require(\"../../ensureApiEnabled\");\nconst functionsConfig = require(\"../../functionsConfig\");\nconst functionsEnv = require(\"../../functions/env\");\nconst previews_1 = require(\"../../previews\");\nconst projectUtils_1 = require(\"../../projectUtils\");\nconst track_1 = require(\"../../track\");\nconst runtimes = require(\"./runtimes\");\nconst validate = require(\"./validate\");\nconst utils = require(\"../../utils\");\nconst logger_1 = require(\"../../logger\");\nconst triggerRegionHelper_1 = require(\"./triggerRegionHelper\");\nfunction hasUserConfig(config) {\n    return Object.keys(config).length > 1;\n}\nfunction hasDotenv(opts) {\n    return previews_1.previews.dotenv && functionsEnv.hasUserEnvs(opts);\n}\nasync function prepare(context, options, payload) {\n    if (!options.config.src.functions) {\n        return;\n    }\n    const runtimeDelegate = await runtimes.getRuntimeDelegate(context, options);\n    logger_1.logger.debug(`Validating ${runtimeDelegate.name} source`);\n    await runtimeDelegate.validate();\n    logger_1.logger.debug(`Building ${runtimeDelegate.name} source`);\n    await runtimeDelegate.build();\n    const projectId = projectUtils_1.needProjectId(options);\n    const checkAPIsEnabled = await Promise.all([\n        ensureApiEnabled.ensure(projectId, \"cloudfunctions.googleapis.com\", \"functions\"),\n        ensureApiEnabled.check(projectId, \"runtimeconfig.googleapis.com\", \"runtimeconfig\", true),\n        ensureCloudBuildEnabled_1.ensureCloudBuildEnabled(projectId),\n    ]);\n    context.runtimeConfigEnabled = checkAPIsEnabled[1];\n    const firebaseConfig = await functionsConfig.getFirebaseConfig(options);\n    context.firebaseConfig = firebaseConfig;\n    const runtimeConfig = await prepareFunctionsUpload_1.getFunctionsConfig(context);\n    utils.assertDefined(options.config.src.functions.source, \"Error: 'functions.source' is not defined\");\n    const source = options.config.src.functions.source;\n    const firebaseEnvs = functionsEnv.loadFirebaseEnvs(firebaseConfig, projectId);\n    const userEnvOpt = {\n        functionsSource: options.config.path(source),\n        projectId: projectId,\n        projectAlias: options.projectAlias,\n    };\n    const userEnvs = functionsEnv.loadUserEnvs(userEnvOpt);\n    const usedDotenv = hasDotenv(userEnvOpt);\n    const tag = hasUserConfig(runtimeConfig)\n        ? usedDotenv\n            ? \"mixed\"\n            : \"runtime_config\"\n        : usedDotenv\n            ? \"dotenv\"\n            : \"none\";\n    await track_1.track(\"functions_codebase_deploy_env_method\", tag);\n    logger_1.logger.debug(`Analyzing ${runtimeDelegate.name} backend spec`);\n    const wantBackend = await runtimeDelegate.discoverSpec(runtimeConfig, firebaseEnvs);\n    wantBackend.environmentVariables = Object.assign(Object.assign({}, userEnvs), firebaseEnvs);\n    payload.functions = { backend: wantBackend };\n    if (backend.someEndpoint(wantBackend, (e) => e.platform === \"gcfv2\")) {\n        const V2_APIS = [\n            \"artifactregistry.googleapis.com\",\n            \"run.googleapis.com\",\n            \"eventarc.googleapis.com\",\n            \"pubsub.googleapis.com\",\n            \"storage.googleapis.com\",\n        ];\n        const enablements = V2_APIS.map((api) => {\n            return ensureApiEnabled.ensure(context.projectId, api, \"functions\");\n        });\n        await Promise.all(enablements);\n    }\n    if (backend.someEndpoint(wantBackend, () => true)) {\n        utils_1.logBullet(clc.cyan.bold(\"functions:\") +\n            \" preparing \" +\n            clc.bold(options.config.src.functions.source) +\n            \" directory for uploading...\");\n    }\n    if (backend.someEndpoint(wantBackend, (e) => e.platform === \"gcfv1\")) {\n        context.functionsSourceV1 = await prepareFunctionsUpload_1.prepareFunctionsUpload(runtimeConfig, options);\n    }\n    if (backend.someEndpoint(wantBackend, (e) => e.platform === \"gcfv2\")) {\n        context.functionsSourceV2 = await prepareFunctionsUpload_1.prepareFunctionsUpload(undefined, options);\n    }\n    for (const endpoint of backend.allEndpoints(wantBackend)) {\n        endpoint.environmentVariables = wantBackend.environmentVariables;\n    }\n    await Promise.all(Object.values(wantBackend.requiredAPIs).map((api) => {\n        return ensureApiEnabled.ensure(projectId, api, \"functions\", false);\n    }));\n    validate.functionIdsAreValid(backend.allEndpoints(wantBackend));\n    context.filters = functionsDeployHelper_1.getFilterGroups(options);\n    const matchingBackend = backend.matchingBackend(wantBackend, (endpoint) => {\n        return functionsDeployHelper_1.functionMatchesAnyGroup(endpoint, context.filters);\n    });\n    const haveBackend = await backend.existingBackend(context);\n    inferDetailsFromExisting(wantBackend, haveBackend, usedDotenv);\n    await triggerRegionHelper_1.lookupMissingTriggerRegions(wantBackend);\n    await prompts_1.promptForFailurePolicies(options, matchingBackend, haveBackend);\n    await prompts_1.promptForMinInstances(options, matchingBackend, haveBackend);\n    await backend.checkAvailability(context, wantBackend);\n}\nexports.prepare = prepare;\nfunction inferDetailsFromExisting(want, have, usedDotenv) {\n    var _a;\n    for (const wantE of backend.allEndpoints(want)) {\n        const haveE = (_a = have.endpoints[wantE.region]) === null || _a === void 0 ? void 0 : _a[wantE.id];\n        if (!haveE) {\n            continue;\n        }\n        if (!usedDotenv) {\n            wantE.environmentVariables = Object.assign(Object.assign({}, haveE.environmentVariables), wantE.environmentVariables);\n        }\n        if (!wantE.availableMemoryMb && haveE.availableMemoryMb) {\n            wantE.availableMemoryMb = haveE.availableMemoryMb;\n        }\n        maybeCopyTriggerRegion(wantE, haveE);\n    }\n}\nexports.inferDetailsFromExisting = inferDetailsFromExisting;\nfunction maybeCopyTriggerRegion(wantE, haveE) {\n    if (!backend.isEventTriggered(wantE) || !backend.isEventTriggered(haveE)) {\n        return;\n    }\n    if (wantE.eventTrigger.region || !haveE.eventTrigger.region) {\n        return;\n    }\n    if (JSON.stringify(haveE.eventTrigger.eventFilters) !==\n        JSON.stringify(wantE.eventTrigger.eventFilters)) {\n        return;\n    }\n    wantE.eventTrigger.region = haveE.eventTrigger.region;\n}\n"]},"metadata":{},"sourceType":"script"}