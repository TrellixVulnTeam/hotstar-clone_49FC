{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkHttpIam = exports.checkServiceAccountIam = void 0;\n\nconst cli_color_1 = require(\"cli-color\");\n\nconst logger_1 = require(\"../../logger\");\n\nconst functionsDeployHelper_1 = require(\"./functionsDeployHelper\");\n\nconst error_1 = require(\"../../error\");\n\nconst iam_1 = require(\"../../gcp/iam\");\n\nconst backend = require(\"./backend\");\n\nconst track = require(\"../../track\");\n\nconst PERMISSION = \"cloudfunctions.functions.setIamPolicy\";\n\nasync function checkServiceAccountIam(projectId) {\n  const saEmail = `${projectId}@appspot.gserviceaccount.com`;\n  let passed = false;\n\n  try {\n    const iamResult = await iam_1.testResourceIamPermissions(\"https://iam.googleapis.com\", \"v1\", `projects/${projectId}/serviceAccounts/${saEmail}`, [\"iam.serviceAccounts.actAs\"]);\n    passed = iamResult.passed;\n  } catch (err) {\n    logger_1.logger.debug(\"[functions] service account IAM check errored, deploy may fail:\", err);\n    return;\n  }\n\n  if (!passed) {\n    throw new error_1.FirebaseError(`Missing permissions required for functions deploy. You must have permission ${cli_color_1.bold(\"iam.serviceAccounts.ActAs\")} on service account ${cli_color_1.bold(saEmail)}.\\n\\n` + `To address this error, ask a project Owner to assign your account the \"Service Account User\" role from this URL:\\n\\n` + `https://console.cloud.google.com/iam-admin/iam?project=${projectId}`);\n  }\n}\n\nexports.checkServiceAccountIam = checkServiceAccountIam;\n\nasync function checkHttpIam(context, options, payload) {\n  const filterGroups = context.filters || functionsDeployHelper_1.getFilterGroups(options);\n  const httpEndpoints = backend.allEndpoints(payload.functions.backend).filter(backend.isHttpsTriggered).filter(f => functionsDeployHelper_1.functionMatchesAnyGroup(f, filterGroups));\n  const existing = await backend.existingBackend(context);\n  const newHttpsEndpoints = httpEndpoints.filter(backend.missingEndpoint(existing));\n\n  if (newHttpsEndpoints.length === 0) {\n    return;\n  }\n\n  logger_1.logger.debug(\"[functions] found\", newHttpsEndpoints.length, \"new HTTP functions, testing setIamPolicy permission...\");\n  let passed = true;\n\n  try {\n    const iamResult = await iam_1.testIamPermissions(context.projectId, [PERMISSION]);\n    passed = iamResult.passed;\n  } catch (e) {\n    logger_1.logger.debug(\"[functions] failed http create setIamPolicy permission check. deploy may fail:\", e);\n    return;\n  }\n\n  if (!passed) {\n    track(\"Error (User)\", \"deploy:functions:http_create_missing_iam\");\n    throw new error_1.FirebaseError(`Missing required permission on project ${cli_color_1.bold(context.projectId)} to deploy new HTTPS functions. The permission ${cli_color_1.bold(PERMISSION)} is required to deploy the following functions:\\n\\n- ` + newHttpsEndpoints.map(func => func.id).join(\"\\n- \") + `\\n\\nTo address this error, please ask a project Owner to assign your account the \"Cloud Functions Admin\" role at the following URL:\\n\\nhttps://console.cloud.google.com/iam-admin/iam?project=${context.projectId}`);\n  }\n\n  logger_1.logger.debug(\"[functions] found setIamPolicy permission, proceeding with deploy\");\n}\n\nexports.checkHttpIam = checkHttpIam;","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/deploy/functions/checkIam.js"],"names":["Object","defineProperty","exports","value","checkHttpIam","checkServiceAccountIam","cli_color_1","require","logger_1","functionsDeployHelper_1","error_1","iam_1","backend","track","PERMISSION","projectId","saEmail","passed","iamResult","testResourceIamPermissions","err","logger","debug","FirebaseError","bold","context","options","payload","filterGroups","filters","getFilterGroups","httpEndpoints","allEndpoints","functions","filter","isHttpsTriggered","f","functionMatchesAnyGroup","existing","existingBackend","newHttpsEndpoints","missingEndpoint","length","testIamPermissions","e","map","func","id","join"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkHttpIam = exports.checkServiceAccountIam = void 0;\nconst cli_color_1 = require(\"cli-color\");\nconst logger_1 = require(\"../../logger\");\nconst functionsDeployHelper_1 = require(\"./functionsDeployHelper\");\nconst error_1 = require(\"../../error\");\nconst iam_1 = require(\"../../gcp/iam\");\nconst backend = require(\"./backend\");\nconst track = require(\"../../track\");\nconst PERMISSION = \"cloudfunctions.functions.setIamPolicy\";\nasync function checkServiceAccountIam(projectId) {\n    const saEmail = `${projectId}@appspot.gserviceaccount.com`;\n    let passed = false;\n    try {\n        const iamResult = await iam_1.testResourceIamPermissions(\"https://iam.googleapis.com\", \"v1\", `projects/${projectId}/serviceAccounts/${saEmail}`, [\"iam.serviceAccounts.actAs\"]);\n        passed = iamResult.passed;\n    }\n    catch (err) {\n        logger_1.logger.debug(\"[functions] service account IAM check errored, deploy may fail:\", err);\n        return;\n    }\n    if (!passed) {\n        throw new error_1.FirebaseError(`Missing permissions required for functions deploy. You must have permission ${cli_color_1.bold(\"iam.serviceAccounts.ActAs\")} on service account ${cli_color_1.bold(saEmail)}.\\n\\n` +\n            `To address this error, ask a project Owner to assign your account the \"Service Account User\" role from this URL:\\n\\n` +\n            `https://console.cloud.google.com/iam-admin/iam?project=${projectId}`);\n    }\n}\nexports.checkServiceAccountIam = checkServiceAccountIam;\nasync function checkHttpIam(context, options, payload) {\n    const filterGroups = context.filters || functionsDeployHelper_1.getFilterGroups(options);\n    const httpEndpoints = backend\n        .allEndpoints(payload.functions.backend)\n        .filter(backend.isHttpsTriggered)\n        .filter((f) => functionsDeployHelper_1.functionMatchesAnyGroup(f, filterGroups));\n    const existing = await backend.existingBackend(context);\n    const newHttpsEndpoints = httpEndpoints.filter(backend.missingEndpoint(existing));\n    if (newHttpsEndpoints.length === 0) {\n        return;\n    }\n    logger_1.logger.debug(\"[functions] found\", newHttpsEndpoints.length, \"new HTTP functions, testing setIamPolicy permission...\");\n    let passed = true;\n    try {\n        const iamResult = await iam_1.testIamPermissions(context.projectId, [PERMISSION]);\n        passed = iamResult.passed;\n    }\n    catch (e) {\n        logger_1.logger.debug(\"[functions] failed http create setIamPolicy permission check. deploy may fail:\", e);\n        return;\n    }\n    if (!passed) {\n        track(\"Error (User)\", \"deploy:functions:http_create_missing_iam\");\n        throw new error_1.FirebaseError(`Missing required permission on project ${cli_color_1.bold(context.projectId)} to deploy new HTTPS functions. The permission ${cli_color_1.bold(PERMISSION)} is required to deploy the following functions:\\n\\n- ` +\n            newHttpsEndpoints.map((func) => func.id).join(\"\\n- \") +\n            `\\n\\nTo address this error, please ask a project Owner to assign your account the \"Cloud Functions Admin\" role at the following URL:\\n\\nhttps://console.cloud.google.com/iam-admin/iam?project=${context.projectId}`);\n    }\n    logger_1.logger.debug(\"[functions] found setIamPolicy permission, proceeding with deploy\");\n}\nexports.checkHttpIam = checkHttpIam;\n"]},"metadata":{},"sourceType":"script"}