{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst utils = require(\"../utils\");\n\nconst requireAuth_1 = require(\"../requireAuth\");\n\nconst error_1 = require(\"../error\");\n\nconst client_1 = require(\"../appdistribution/client\");\n\nconst options_parser_util_1 = require(\"../appdistribution/options-parser-util\");\n\nconst logger_1 = require(\"../logger\");\n\nmodule.exports = new command_1.Command(\"appdistribution:testers:remove [emails...]\").description(\"remove testers from a project\").option(\"--file <file>\", \"a path to a file containing a list of tester emails to be removed\").before(requireAuth_1.requireAuth).action(async (emails, options) => {\n  const projectName = await options_parser_util_1.getProjectName(options);\n  const appDistroClient = new client_1.AppDistributionClient();\n  const emailsArr = options_parser_util_1.getEmails(emails, options.file);\n  let deleteResponse;\n\n  try {\n    utils.logBullet(`Deleting ${emailsArr.length} testers from project`);\n    deleteResponse = await appDistroClient.removeTesters(projectName, emailsArr);\n  } catch (err) {\n    throw new error_1.FirebaseError(`Failed to remove testers ${err}`);\n  }\n\n  if (!deleteResponse.emails) {\n    utils.logSuccess(`Testers did not exist`);\n    return;\n  }\n\n  logger_1.logger.debug(`Testers: ${deleteResponse.emails}, have been successfully deleted`);\n  utils.logSuccess(`${deleteResponse.emails.length} testers have successfully been deleted`);\n});","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/commands/appdistribution-testers-remove.js"],"names":["Object","defineProperty","exports","value","command_1","require","utils","requireAuth_1","error_1","client_1","options_parser_util_1","logger_1","module","Command","description","option","before","requireAuth","action","emails","options","projectName","getProjectName","appDistroClient","AppDistributionClient","emailsArr","getEmails","file","deleteResponse","logBullet","length","removeTesters","err","FirebaseError","logSuccess","logger","debug"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAArB;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,2BAAD,CAAxB;;AACA,MAAMK,qBAAqB,GAAGL,OAAO,CAAC,wCAAD,CAArC;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,WAAD,CAAxB;;AACAO,MAAM,CAACV,OAAP,GAAiB,IAAIE,SAAS,CAACS,OAAd,CAAsB,4CAAtB,EACZC,WADY,CACA,+BADA,EAEZC,MAFY,CAEL,eAFK,EAEY,mEAFZ,EAGZC,MAHY,CAGLT,aAAa,CAACU,WAHT,EAIZC,MAJY,CAIL,OAAOC,MAAP,EAAeC,OAAf,KAA2B;AACnC,QAAMC,WAAW,GAAG,MAAMX,qBAAqB,CAACY,cAAtB,CAAqCF,OAArC,CAA1B;AACA,QAAMG,eAAe,GAAG,IAAId,QAAQ,CAACe,qBAAb,EAAxB;AACA,QAAMC,SAAS,GAAGf,qBAAqB,CAACgB,SAAtB,CAAgCP,MAAhC,EAAwCC,OAAO,CAACO,IAAhD,CAAlB;AACA,MAAIC,cAAJ;;AACA,MAAI;AACAtB,IAAAA,KAAK,CAACuB,SAAN,CAAiB,YAAWJ,SAAS,CAACK,MAAO,uBAA7C;AACAF,IAAAA,cAAc,GAAG,MAAML,eAAe,CAACQ,aAAhB,CAA8BV,WAA9B,EAA2CI,SAA3C,CAAvB;AACH,GAHD,CAIA,OAAOO,GAAP,EAAY;AACR,UAAM,IAAIxB,OAAO,CAACyB,aAAZ,CAA2B,4BAA2BD,GAAI,EAA1D,CAAN;AACH;;AACD,MAAI,CAACJ,cAAc,CAACT,MAApB,EAA4B;AACxBb,IAAAA,KAAK,CAAC4B,UAAN,CAAkB,uBAAlB;AACA;AACH;;AACDvB,EAAAA,QAAQ,CAACwB,MAAT,CAAgBC,KAAhB,CAAuB,YAAWR,cAAc,CAACT,MAAO,kCAAxD;AACAb,EAAAA,KAAK,CAAC4B,UAAN,CAAkB,GAAEN,cAAc,CAACT,MAAf,CAAsBW,MAAO,yCAAjD;AACH,CAtBgB,CAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst utils = require(\"../utils\");\nconst requireAuth_1 = require(\"../requireAuth\");\nconst error_1 = require(\"../error\");\nconst client_1 = require(\"../appdistribution/client\");\nconst options_parser_util_1 = require(\"../appdistribution/options-parser-util\");\nconst logger_1 = require(\"../logger\");\nmodule.exports = new command_1.Command(\"appdistribution:testers:remove [emails...]\")\n    .description(\"remove testers from a project\")\n    .option(\"--file <file>\", \"a path to a file containing a list of tester emails to be removed\")\n    .before(requireAuth_1.requireAuth)\n    .action(async (emails, options) => {\n    const projectName = await options_parser_util_1.getProjectName(options);\n    const appDistroClient = new client_1.AppDistributionClient();\n    const emailsArr = options_parser_util_1.getEmails(emails, options.file);\n    let deleteResponse;\n    try {\n        utils.logBullet(`Deleting ${emailsArr.length} testers from project`);\n        deleteResponse = await appDistroClient.removeTesters(projectName, emailsArr);\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(`Failed to remove testers ${err}`);\n    }\n    if (!deleteResponse.emails) {\n        utils.logSuccess(`Testers did not exist`);\n        return;\n    }\n    logger_1.logger.debug(`Testers: ${deleteResponse.emails}, have been successfully deleted`);\n    utils.logSuccess(`${deleteResponse.emails.length} testers have successfully been deleted`);\n});\n"]},"metadata":{},"sourceType":"script"}