{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Fabricator = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst error_1 = require(\"../../../error\");\n\nconst sourceTokenScraper_1 = require(\"./sourceTokenScraper\");\n\nconst timer_1 = require(\"./timer\");\n\nconst functional_1 = require(\"../../../functional\");\n\nconst runtimes_1 = require(\"../runtimes\");\n\nconst api_1 = require(\"../../../api\");\n\nconst logger_1 = require(\"../../../logger\");\n\nconst backend = require(\"../backend\");\n\nconst deploymentTool = require(\"../../../deploymentTool\");\n\nconst gcf = require(\"../../../gcp/cloudfunctions\");\n\nconst gcfV2 = require(\"../../../gcp/cloudfunctionsv2\");\n\nconst helper = require(\"../functionsDeployHelper\");\n\nconst poller = require(\"../../../operation-poller\");\n\nconst pubsub = require(\"../../../gcp/pubsub\");\n\nconst reporter = require(\"./reporter\");\n\nconst run = require(\"../../../gcp/run\");\n\nconst scheduler = require(\"../../../gcp/cloudscheduler\");\n\nconst utils = require(\"../../../utils\");\n\nconst gcfV1PollerOptions = {\n  apiOrigin: api_1.functionsOrigin,\n  apiVersion: gcf.API_VERSION,\n  masterTimeout: 25 * 60 * 1000\n};\nconst gcfV2PollerOptions = {\n  apiOrigin: api_1.functionsV2Origin,\n  apiVersion: gcfV2.API_VERSION,\n  masterTimeout: 25 * 60 * 1000\n};\nconst DEFAULT_GCFV2_CONCURRENCY = 80;\n\nconst rethrowAs = (endpoint, op) => err => {\n  throw new reporter.DeploymentError(endpoint, op, err);\n};\n\nclass Fabricator {\n  constructor(args) {\n    this.executor = args.executor;\n    this.functionExecutor = args.functionExecutor;\n    this.sourceUrl = args.sourceUrl;\n    this.storage = args.storage;\n    this.appEngineLocation = args.appEngineLocation;\n  }\n\n  async applyPlan(plan) {\n    const timer = new timer_1.Timer();\n    const summary = {\n      totalTime: 0,\n      results: []\n    };\n    const deployRegions = Object.values(plan).map(async changes => {\n      const results = await this.applyRegionalChanges(changes);\n      summary.results.push(...results);\n      return;\n    });\n    const promiseResults = await utils.allSettled(deployRegions);\n    const errs = promiseResults.filter(r => r.status === \"rejected\").map(r => r.reason);\n\n    if (errs.length) {\n      logger_1.logger.debug(\"Fabricator.applyRegionalChanges returned an unhandled exception. This should never happen\", JSON.stringify(errs, null, 2));\n    }\n\n    summary.totalTime = timer.stop();\n    return summary;\n  }\n\n  async applyRegionalChanges(changes) {\n    const deployResults = [];\n\n    const handle = async (op, endpoint, fn) => {\n      const timer = new timer_1.Timer();\n      const result = {\n        endpoint\n      };\n\n      try {\n        await fn();\n        this.logOpSuccess(op, endpoint);\n      } catch (err) {\n        result.error = err;\n      }\n\n      result.durationMs = timer.stop();\n      deployResults.push(result);\n    };\n\n    const upserts = [];\n    const scraper = new sourceTokenScraper_1.SourceTokenScraper();\n\n    for (const endpoint of changes.endpointsToCreate) {\n      this.logOpStart(\"creating\", endpoint);\n      upserts.push(handle(\"create\", endpoint, () => this.createEndpoint(endpoint, scraper)));\n    }\n\n    for (const update of changes.endpointsToUpdate) {\n      this.logOpStart(\"updating\", update.endpoint);\n      upserts.push(handle(\"update\", update.endpoint, () => this.updateEndpoint(update, scraper)));\n    }\n\n    await utils.allSettled(upserts);\n\n    if (deployResults.find(r => r.error)) {\n      for (const endpoint of changes.endpointsToDelete) {\n        deployResults.push({\n          endpoint,\n          durationMs: 0,\n          error: new reporter.AbortedDeploymentError(endpoint)\n        });\n      }\n\n      return deployResults;\n    }\n\n    const deletes = [];\n\n    for (const endpoint of changes.endpointsToDelete) {\n      this.logOpStart(\"deleting\", endpoint);\n      deletes.push(handle(\"delete\", endpoint, () => this.deleteEndpoint(endpoint)));\n    }\n\n    await utils.allSettled(deletes);\n    return deployResults;\n  }\n\n  async createEndpoint(endpoint, scraper) {\n    endpoint.labels = Object.assign(Object.assign({}, endpoint.labels), deploymentTool.labels());\n\n    if (endpoint.platform === \"gcfv1\") {\n      await this.createV1Function(endpoint, scraper);\n    } else if (endpoint.platform === \"gcfv2\") {\n      await this.createV2Function(endpoint);\n    } else {\n      functional_1.assertExhaustive(endpoint.platform);\n    }\n\n    await this.setTrigger(endpoint);\n  }\n\n  async updateEndpoint(update, scraper) {\n    update.endpoint.labels = Object.assign(Object.assign({}, update.endpoint.labels), deploymentTool.labels());\n\n    if (update.deleteAndRecreate) {\n      await this.deleteEndpoint(update.deleteAndRecreate);\n      await this.createEndpoint(update.endpoint, scraper);\n      return;\n    }\n\n    if (update.endpoint.platform === \"gcfv1\") {\n      await this.updateV1Function(update.endpoint, scraper);\n    } else if (update.endpoint.platform === \"gcfv2\") {\n      await this.updateV2Function(update.endpoint);\n    } else {\n      functional_1.assertExhaustive(update.endpoint.platform);\n    }\n\n    await this.setTrigger(update.endpoint);\n  }\n\n  async deleteEndpoint(endpoint) {\n    await this.deleteTrigger(endpoint);\n\n    if (endpoint.platform === \"gcfv1\") {\n      await this.deleteV1Function(endpoint);\n    } else {\n      await this.deleteV2Function(endpoint);\n    }\n  }\n\n  async createV1Function(endpoint, scraper) {\n    var _a;\n\n    if (!this.sourceUrl) {\n      logger_1.logger.debug(\"Precondition failed. Cannot create a GCF function without sourceUrl\");\n      throw new Error(\"Precondition failed\");\n    }\n\n    const apiFunction = gcf.functionFromEndpoint(endpoint, this.sourceUrl);\n    apiFunction.sourceToken = await scraper.tokenPromise();\n    const resultFunction = await this.functionExecutor.run(async () => {\n      const op = await gcf.createFunction(apiFunction);\n      return poller.pollOperation(Object.assign(Object.assign({}, gcfV1PollerOptions), {\n        pollerName: `create-${endpoint.region}-${endpoint.id}`,\n        operationResourceName: op.name,\n        onPoll: scraper.poller\n      }));\n    }).catch(rethrowAs(endpoint, \"create\"));\n    endpoint.uri = (_a = resultFunction === null || resultFunction === void 0 ? void 0 : resultFunction.httpsTrigger) === null || _a === void 0 ? void 0 : _a.url;\n\n    if (backend.isHttpsTriggered(endpoint)) {\n      const invoker = endpoint.httpsTrigger.invoker || [\"public\"];\n\n      if (!invoker.includes(\"private\")) {\n        await this.executor.run(async () => {\n          await gcf.setInvokerCreate(endpoint.project, backend.functionName(endpoint), invoker);\n        }).catch(rethrowAs(endpoint, \"set invoker\"));\n      }\n    }\n  }\n\n  async createV2Function(endpoint) {\n    var _a;\n\n    if (!this.storage) {\n      logger_1.logger.debug(\"Precondition failed. Cannot create a GCFv2 function without storage\");\n      throw new Error(\"Precondition failed\");\n    }\n\n    const apiFunction = gcfV2.functionFromEndpoint(endpoint, this.storage[endpoint.region]);\n    const topic = (_a = apiFunction.eventTrigger) === null || _a === void 0 ? void 0 : _a.pubsubTopic;\n\n    if (topic) {\n      await this.executor.run(async () => {\n        try {\n          await pubsub.createTopic({\n            name: topic\n          });\n        } catch (err) {\n          if (err.status === 409) {\n            return;\n          }\n\n          throw new error_1.FirebaseError(\"Unexpected error creating Pub/Sub topic\", {\n            original: err\n          });\n        }\n      }).catch(rethrowAs(endpoint, \"create topic\"));\n    }\n\n    const resultFunction = await this.functionExecutor.run(async () => {\n      const op = await gcfV2.createFunction(apiFunction);\n      return await poller.pollOperation(Object.assign(Object.assign({}, gcfV2PollerOptions), {\n        pollerName: `create-${endpoint.region}-${endpoint.id}`,\n        operationResourceName: op.name\n      }));\n    }).catch(rethrowAs(endpoint, \"create\"));\n    endpoint.uri = resultFunction.serviceConfig.uri;\n    const serviceName = resultFunction.serviceConfig.service;\n\n    if (backend.isHttpsTriggered(endpoint)) {\n      const invoker = endpoint.httpsTrigger.invoker || [\"public\"];\n\n      if (!invoker.includes(\"private\")) {\n        await this.executor.run(() => run.setInvokerCreate(endpoint.project, serviceName, invoker)).catch(rethrowAs(endpoint, \"set invoker\"));\n      }\n    }\n\n    await this.setConcurrency(endpoint, serviceName, endpoint.concurrency || DEFAULT_GCFV2_CONCURRENCY);\n  }\n\n  async updateV1Function(endpoint, scraper) {\n    var _a;\n\n    if (!this.sourceUrl) {\n      logger_1.logger.debug(\"Precondition failed. Cannot update a GCF function without sourceUrl\");\n      throw new Error(\"Precondition failed\");\n    }\n\n    const apiFunction = gcf.functionFromEndpoint(endpoint, this.sourceUrl);\n    apiFunction.sourceToken = await scraper.tokenPromise();\n    const resultFunction = await this.functionExecutor.run(async () => {\n      const op = await gcf.updateFunction(apiFunction);\n      return await poller.pollOperation(Object.assign(Object.assign({}, gcfV1PollerOptions), {\n        pollerName: `update-${endpoint.region}-${endpoint.id}`,\n        operationResourceName: op.name,\n        onPoll: scraper.poller\n      }));\n    }).catch(rethrowAs(endpoint, \"update\"));\n    endpoint.uri = (_a = resultFunction === null || resultFunction === void 0 ? void 0 : resultFunction.httpsTrigger) === null || _a === void 0 ? void 0 : _a.url;\n\n    if (backend.isHttpsTriggered(endpoint) && endpoint.httpsTrigger.invoker) {\n      await this.executor.run(async () => {\n        await gcf.setInvokerUpdate(endpoint.project, backend.functionName(endpoint), endpoint.httpsTrigger.invoker);\n        return;\n      }).catch(rethrowAs(endpoint, \"set invoker\"));\n    }\n  }\n\n  async updateV2Function(endpoint) {\n    var _a;\n\n    if (!this.storage) {\n      logger_1.logger.debug(\"Precondition failed. Cannot update a GCFv2 function without storage\");\n      throw new Error(\"Precondition failed\");\n    }\n\n    const apiFunction = gcfV2.functionFromEndpoint(endpoint, this.storage[endpoint.region]);\n\n    if ((_a = apiFunction.eventTrigger) === null || _a === void 0 ? void 0 : _a.pubsubTopic) {\n      delete apiFunction.eventTrigger.pubsubTopic;\n    }\n\n    const resultFunction = await this.functionExecutor.run(async () => {\n      const op = await gcfV2.updateFunction(apiFunction);\n      return await poller.pollOperation(Object.assign(Object.assign({}, gcfV2PollerOptions), {\n        pollerName: `update-${endpoint.region}-${endpoint.id}`,\n        operationResourceName: op.name\n      }));\n    }).catch(rethrowAs(endpoint, \"update\"));\n    endpoint.uri = resultFunction.serviceConfig.uri;\n    const serviceName = resultFunction.serviceConfig.service;\n\n    if (backend.isHttpsTriggered(endpoint) && endpoint.httpsTrigger.invoker) {\n      await this.executor.run(() => run.setInvokerUpdate(endpoint.project, serviceName, endpoint.httpsTrigger.invoker)).catch(rethrowAs(endpoint, \"set invoker\"));\n    }\n\n    if (endpoint.concurrency) {\n      await this.setConcurrency(endpoint, serviceName, endpoint.concurrency);\n    }\n  }\n\n  async deleteV1Function(endpoint) {\n    const fnName = backend.functionName(endpoint);\n    await this.functionExecutor.run(async () => {\n      const op = await gcf.deleteFunction(fnName);\n      const pollerOptions = Object.assign(Object.assign({}, gcfV1PollerOptions), {\n        pollerName: `delete-${endpoint.region}-${endpoint.id}`,\n        operationResourceName: op.name\n      });\n      await poller.pollOperation(pollerOptions);\n    }).catch(rethrowAs(endpoint, \"delete\"));\n  }\n\n  async deleteV2Function(endpoint) {\n    const fnName = backend.functionName(endpoint);\n    await this.functionExecutor.run(async () => {\n      const op = await gcfV2.deleteFunction(fnName);\n      const pollerOptions = Object.assign(Object.assign({}, gcfV2PollerOptions), {\n        pollerName: `delete-${endpoint.region}-${endpoint.id}`,\n        operationResourceName: op.name\n      });\n      await poller.pollOperation(pollerOptions);\n    }).catch(rethrowAs(endpoint, \"delete\"));\n  }\n\n  async setConcurrency(endpoint, serviceName, concurrency) {\n    await this.functionExecutor.run(async () => {\n      const service = await run.getService(serviceName);\n\n      if (service.spec.template.spec.containerConcurrency === concurrency) {\n        logger_1.logger.debug(\"Skipping setConcurrency on\", serviceName, \" because it already matches\");\n        return;\n      }\n\n      delete service.status;\n      delete service.spec.template.metadata.name;\n      service.spec.template.spec.containerConcurrency = concurrency;\n      await run.replaceService(serviceName, service);\n    }).catch(rethrowAs(endpoint, \"set concurrency\"));\n  }\n\n  async setTrigger(endpoint) {\n    if (backend.isScheduleTriggered(endpoint)) {\n      if (endpoint.platform === \"gcfv1\") {\n        await this.upsertScheduleV1(endpoint);\n        return;\n      } else if (endpoint.platform === \"gcfv2\") {\n        await this.upsertScheduleV2(endpoint);\n        return;\n      }\n\n      functional_1.assertExhaustive(endpoint.platform);\n    }\n  }\n\n  async deleteTrigger(endpoint) {\n    if (backend.isScheduleTriggered(endpoint)) {\n      if (endpoint.platform === \"gcfv1\") {\n        await this.deleteScheduleV1(endpoint);\n        return;\n      } else if (endpoint.platform === \"gcfv2\") {\n        await this.deleteScheduleV2(endpoint);\n        return;\n      }\n\n      functional_1.assertExhaustive(endpoint.platform);\n    }\n  }\n\n  async upsertScheduleV1(endpoint) {\n    const job = scheduler.jobFromEndpoint(endpoint, this.appEngineLocation);\n    await this.executor.run(() => scheduler.createOrReplaceJob(job)).catch(rethrowAs(endpoint, \"upsert schedule\"));\n  }\n\n  upsertScheduleV2(endpoint) {\n    return Promise.reject(new reporter.DeploymentError(endpoint, \"upsert schedule\", new Error(\"Not implemented\")));\n  }\n\n  async deleteScheduleV1(endpoint) {\n    const job = scheduler.jobFromEndpoint(endpoint, this.appEngineLocation);\n    await this.executor.run(() => scheduler.deleteJob(job.name)).catch(rethrowAs(endpoint, \"delete schedule\"));\n    await this.executor.run(() => pubsub.deleteTopic(job.pubsubTarget.topicName)).catch(rethrowAs(endpoint, \"delete topic\"));\n  }\n\n  deleteScheduleV2(endpoint) {\n    return Promise.reject(new reporter.DeploymentError(endpoint, \"delete schedule\", new Error(\"Not implemented\")));\n  }\n\n  logOpStart(op, endpoint) {\n    const runtime = runtimes_1.getHumanFriendlyRuntimeName(endpoint.runtime);\n    const label = helper.getFunctionLabel(endpoint);\n    utils.logBullet(`${clc.bold.cyan(\"functions:\")} ${op} ${runtime} function ${clc.bold(label)}...`);\n  }\n\n  logOpSuccess(op, endpoint) {\n    const label = helper.getFunctionLabel(endpoint);\n    utils.logSuccess(`${clc.bold.green(`functions[${label}]`)} Successful ${op} operation.`);\n  }\n\n}\n\nexports.Fabricator = Fabricator;","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/deploy/functions/release/fabricator.js"],"names":["Object","defineProperty","exports","value","Fabricator","clc","require","error_1","sourceTokenScraper_1","timer_1","functional_1","runtimes_1","api_1","logger_1","backend","deploymentTool","gcf","gcfV2","helper","poller","pubsub","reporter","run","scheduler","utils","gcfV1PollerOptions","apiOrigin","functionsOrigin","apiVersion","API_VERSION","masterTimeout","gcfV2PollerOptions","functionsV2Origin","DEFAULT_GCFV2_CONCURRENCY","rethrowAs","endpoint","op","err","DeploymentError","constructor","args","executor","functionExecutor","sourceUrl","storage","appEngineLocation","applyPlan","plan","timer","Timer","summary","totalTime","results","deployRegions","values","map","changes","applyRegionalChanges","push","promiseResults","allSettled","errs","filter","r","status","reason","length","logger","debug","JSON","stringify","stop","deployResults","handle","fn","result","logOpSuccess","error","durationMs","upserts","scraper","SourceTokenScraper","endpointsToCreate","logOpStart","createEndpoint","update","endpointsToUpdate","updateEndpoint","find","endpointsToDelete","AbortedDeploymentError","deletes","deleteEndpoint","labels","assign","platform","createV1Function","createV2Function","assertExhaustive","setTrigger","deleteAndRecreate","updateV1Function","updateV2Function","deleteTrigger","deleteV1Function","deleteV2Function","_a","Error","apiFunction","functionFromEndpoint","sourceToken","tokenPromise","resultFunction","createFunction","pollOperation","pollerName","region","id","operationResourceName","name","onPoll","catch","uri","httpsTrigger","url","isHttpsTriggered","invoker","includes","setInvokerCreate","project","functionName","topic","eventTrigger","pubsubTopic","createTopic","FirebaseError","original","serviceConfig","serviceName","service","setConcurrency","concurrency","updateFunction","setInvokerUpdate","fnName","deleteFunction","pollerOptions","getService","spec","template","containerConcurrency","metadata","replaceService","isScheduleTriggered","upsertScheduleV1","upsertScheduleV2","deleteScheduleV1","deleteScheduleV2","job","jobFromEndpoint","createOrReplaceJob","Promise","reject","deleteJob","deleteTopic","pubsubTarget","topicName","runtime","getHumanFriendlyRuntimeName","label","getFunctionLabel","logBullet","bold","cyan","logSuccess","green"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Fabricator = void 0;\nconst clc = require(\"cli-color\");\nconst error_1 = require(\"../../../error\");\nconst sourceTokenScraper_1 = require(\"./sourceTokenScraper\");\nconst timer_1 = require(\"./timer\");\nconst functional_1 = require(\"../../../functional\");\nconst runtimes_1 = require(\"../runtimes\");\nconst api_1 = require(\"../../../api\");\nconst logger_1 = require(\"../../../logger\");\nconst backend = require(\"../backend\");\nconst deploymentTool = require(\"../../../deploymentTool\");\nconst gcf = require(\"../../../gcp/cloudfunctions\");\nconst gcfV2 = require(\"../../../gcp/cloudfunctionsv2\");\nconst helper = require(\"../functionsDeployHelper\");\nconst poller = require(\"../../../operation-poller\");\nconst pubsub = require(\"../../../gcp/pubsub\");\nconst reporter = require(\"./reporter\");\nconst run = require(\"../../../gcp/run\");\nconst scheduler = require(\"../../../gcp/cloudscheduler\");\nconst utils = require(\"../../../utils\");\nconst gcfV1PollerOptions = {\n    apiOrigin: api_1.functionsOrigin,\n    apiVersion: gcf.API_VERSION,\n    masterTimeout: 25 * 60 * 1000,\n};\nconst gcfV2PollerOptions = {\n    apiOrigin: api_1.functionsV2Origin,\n    apiVersion: gcfV2.API_VERSION,\n    masterTimeout: 25 * 60 * 1000,\n};\nconst DEFAULT_GCFV2_CONCURRENCY = 80;\nconst rethrowAs = (endpoint, op) => (err) => {\n    throw new reporter.DeploymentError(endpoint, op, err);\n};\nclass Fabricator {\n    constructor(args) {\n        this.executor = args.executor;\n        this.functionExecutor = args.functionExecutor;\n        this.sourceUrl = args.sourceUrl;\n        this.storage = args.storage;\n        this.appEngineLocation = args.appEngineLocation;\n    }\n    async applyPlan(plan) {\n        const timer = new timer_1.Timer();\n        const summary = {\n            totalTime: 0,\n            results: [],\n        };\n        const deployRegions = Object.values(plan).map(async (changes) => {\n            const results = await this.applyRegionalChanges(changes);\n            summary.results.push(...results);\n            return;\n        });\n        const promiseResults = await utils.allSettled(deployRegions);\n        const errs = promiseResults\n            .filter((r) => r.status === \"rejected\")\n            .map((r) => r.reason);\n        if (errs.length) {\n            logger_1.logger.debug(\"Fabricator.applyRegionalChanges returned an unhandled exception. This should never happen\", JSON.stringify(errs, null, 2));\n        }\n        summary.totalTime = timer.stop();\n        return summary;\n    }\n    async applyRegionalChanges(changes) {\n        const deployResults = [];\n        const handle = async (op, endpoint, fn) => {\n            const timer = new timer_1.Timer();\n            const result = { endpoint };\n            try {\n                await fn();\n                this.logOpSuccess(op, endpoint);\n            }\n            catch (err) {\n                result.error = err;\n            }\n            result.durationMs = timer.stop();\n            deployResults.push(result);\n        };\n        const upserts = [];\n        const scraper = new sourceTokenScraper_1.SourceTokenScraper();\n        for (const endpoint of changes.endpointsToCreate) {\n            this.logOpStart(\"creating\", endpoint);\n            upserts.push(handle(\"create\", endpoint, () => this.createEndpoint(endpoint, scraper)));\n        }\n        for (const update of changes.endpointsToUpdate) {\n            this.logOpStart(\"updating\", update.endpoint);\n            upserts.push(handle(\"update\", update.endpoint, () => this.updateEndpoint(update, scraper)));\n        }\n        await utils.allSettled(upserts);\n        if (deployResults.find((r) => r.error)) {\n            for (const endpoint of changes.endpointsToDelete) {\n                deployResults.push({\n                    endpoint,\n                    durationMs: 0,\n                    error: new reporter.AbortedDeploymentError(endpoint),\n                });\n            }\n            return deployResults;\n        }\n        const deletes = [];\n        for (const endpoint of changes.endpointsToDelete) {\n            this.logOpStart(\"deleting\", endpoint);\n            deletes.push(handle(\"delete\", endpoint, () => this.deleteEndpoint(endpoint)));\n        }\n        await utils.allSettled(deletes);\n        return deployResults;\n    }\n    async createEndpoint(endpoint, scraper) {\n        endpoint.labels = Object.assign(Object.assign({}, endpoint.labels), deploymentTool.labels());\n        if (endpoint.platform === \"gcfv1\") {\n            await this.createV1Function(endpoint, scraper);\n        }\n        else if (endpoint.platform === \"gcfv2\") {\n            await this.createV2Function(endpoint);\n        }\n        else {\n            functional_1.assertExhaustive(endpoint.platform);\n        }\n        await this.setTrigger(endpoint);\n    }\n    async updateEndpoint(update, scraper) {\n        update.endpoint.labels = Object.assign(Object.assign({}, update.endpoint.labels), deploymentTool.labels());\n        if (update.deleteAndRecreate) {\n            await this.deleteEndpoint(update.deleteAndRecreate);\n            await this.createEndpoint(update.endpoint, scraper);\n            return;\n        }\n        if (update.endpoint.platform === \"gcfv1\") {\n            await this.updateV1Function(update.endpoint, scraper);\n        }\n        else if (update.endpoint.platform === \"gcfv2\") {\n            await this.updateV2Function(update.endpoint);\n        }\n        else {\n            functional_1.assertExhaustive(update.endpoint.platform);\n        }\n        await this.setTrigger(update.endpoint);\n    }\n    async deleteEndpoint(endpoint) {\n        await this.deleteTrigger(endpoint);\n        if (endpoint.platform === \"gcfv1\") {\n            await this.deleteV1Function(endpoint);\n        }\n        else {\n            await this.deleteV2Function(endpoint);\n        }\n    }\n    async createV1Function(endpoint, scraper) {\n        var _a;\n        if (!this.sourceUrl) {\n            logger_1.logger.debug(\"Precondition failed. Cannot create a GCF function without sourceUrl\");\n            throw new Error(\"Precondition failed\");\n        }\n        const apiFunction = gcf.functionFromEndpoint(endpoint, this.sourceUrl);\n        apiFunction.sourceToken = await scraper.tokenPromise();\n        const resultFunction = await this.functionExecutor\n            .run(async () => {\n            const op = await gcf.createFunction(apiFunction);\n            return poller.pollOperation(Object.assign(Object.assign({}, gcfV1PollerOptions), { pollerName: `create-${endpoint.region}-${endpoint.id}`, operationResourceName: op.name, onPoll: scraper.poller }));\n        })\n            .catch(rethrowAs(endpoint, \"create\"));\n        endpoint.uri = (_a = resultFunction === null || resultFunction === void 0 ? void 0 : resultFunction.httpsTrigger) === null || _a === void 0 ? void 0 : _a.url;\n        if (backend.isHttpsTriggered(endpoint)) {\n            const invoker = endpoint.httpsTrigger.invoker || [\"public\"];\n            if (!invoker.includes(\"private\")) {\n                await this.executor\n                    .run(async () => {\n                    await gcf.setInvokerCreate(endpoint.project, backend.functionName(endpoint), invoker);\n                })\n                    .catch(rethrowAs(endpoint, \"set invoker\"));\n            }\n        }\n    }\n    async createV2Function(endpoint) {\n        var _a;\n        if (!this.storage) {\n            logger_1.logger.debug(\"Precondition failed. Cannot create a GCFv2 function without storage\");\n            throw new Error(\"Precondition failed\");\n        }\n        const apiFunction = gcfV2.functionFromEndpoint(endpoint, this.storage[endpoint.region]);\n        const topic = (_a = apiFunction.eventTrigger) === null || _a === void 0 ? void 0 : _a.pubsubTopic;\n        if (topic) {\n            await this.executor\n                .run(async () => {\n                try {\n                    await pubsub.createTopic({ name: topic });\n                }\n                catch (err) {\n                    if (err.status === 409) {\n                        return;\n                    }\n                    throw new error_1.FirebaseError(\"Unexpected error creating Pub/Sub topic\", {\n                        original: err,\n                    });\n                }\n            })\n                .catch(rethrowAs(endpoint, \"create topic\"));\n        }\n        const resultFunction = (await this.functionExecutor\n            .run(async () => {\n            const op = await gcfV2.createFunction(apiFunction);\n            return await poller.pollOperation(Object.assign(Object.assign({}, gcfV2PollerOptions), { pollerName: `create-${endpoint.region}-${endpoint.id}`, operationResourceName: op.name }));\n        })\n            .catch(rethrowAs(endpoint, \"create\")));\n        endpoint.uri = resultFunction.serviceConfig.uri;\n        const serviceName = resultFunction.serviceConfig.service;\n        if (backend.isHttpsTriggered(endpoint)) {\n            const invoker = endpoint.httpsTrigger.invoker || [\"public\"];\n            if (!invoker.includes(\"private\")) {\n                await this.executor\n                    .run(() => run.setInvokerCreate(endpoint.project, serviceName, invoker))\n                    .catch(rethrowAs(endpoint, \"set invoker\"));\n            }\n        }\n        await this.setConcurrency(endpoint, serviceName, endpoint.concurrency || DEFAULT_GCFV2_CONCURRENCY);\n    }\n    async updateV1Function(endpoint, scraper) {\n        var _a;\n        if (!this.sourceUrl) {\n            logger_1.logger.debug(\"Precondition failed. Cannot update a GCF function without sourceUrl\");\n            throw new Error(\"Precondition failed\");\n        }\n        const apiFunction = gcf.functionFromEndpoint(endpoint, this.sourceUrl);\n        apiFunction.sourceToken = await scraper.tokenPromise();\n        const resultFunction = await this.functionExecutor\n            .run(async () => {\n            const op = await gcf.updateFunction(apiFunction);\n            return await poller.pollOperation(Object.assign(Object.assign({}, gcfV1PollerOptions), { pollerName: `update-${endpoint.region}-${endpoint.id}`, operationResourceName: op.name, onPoll: scraper.poller }));\n        })\n            .catch(rethrowAs(endpoint, \"update\"));\n        endpoint.uri = (_a = resultFunction === null || resultFunction === void 0 ? void 0 : resultFunction.httpsTrigger) === null || _a === void 0 ? void 0 : _a.url;\n        if (backend.isHttpsTriggered(endpoint) && endpoint.httpsTrigger.invoker) {\n            await this.executor\n                .run(async () => {\n                await gcf.setInvokerUpdate(endpoint.project, backend.functionName(endpoint), endpoint.httpsTrigger.invoker);\n                return;\n            })\n                .catch(rethrowAs(endpoint, \"set invoker\"));\n        }\n    }\n    async updateV2Function(endpoint) {\n        var _a;\n        if (!this.storage) {\n            logger_1.logger.debug(\"Precondition failed. Cannot update a GCFv2 function without storage\");\n            throw new Error(\"Precondition failed\");\n        }\n        const apiFunction = gcfV2.functionFromEndpoint(endpoint, this.storage[endpoint.region]);\n        if ((_a = apiFunction.eventTrigger) === null || _a === void 0 ? void 0 : _a.pubsubTopic) {\n            delete apiFunction.eventTrigger.pubsubTopic;\n        }\n        const resultFunction = (await this.functionExecutor\n            .run(async () => {\n            const op = await gcfV2.updateFunction(apiFunction);\n            return await poller.pollOperation(Object.assign(Object.assign({}, gcfV2PollerOptions), { pollerName: `update-${endpoint.region}-${endpoint.id}`, operationResourceName: op.name }));\n        })\n            .catch(rethrowAs(endpoint, \"update\")));\n        endpoint.uri = resultFunction.serviceConfig.uri;\n        const serviceName = resultFunction.serviceConfig.service;\n        if (backend.isHttpsTriggered(endpoint) && endpoint.httpsTrigger.invoker) {\n            await this.executor\n                .run(() => run.setInvokerUpdate(endpoint.project, serviceName, endpoint.httpsTrigger.invoker))\n                .catch(rethrowAs(endpoint, \"set invoker\"));\n        }\n        if (endpoint.concurrency) {\n            await this.setConcurrency(endpoint, serviceName, endpoint.concurrency);\n        }\n    }\n    async deleteV1Function(endpoint) {\n        const fnName = backend.functionName(endpoint);\n        await this.functionExecutor\n            .run(async () => {\n            const op = await gcf.deleteFunction(fnName);\n            const pollerOptions = Object.assign(Object.assign({}, gcfV1PollerOptions), { pollerName: `delete-${endpoint.region}-${endpoint.id}`, operationResourceName: op.name });\n            await poller.pollOperation(pollerOptions);\n        })\n            .catch(rethrowAs(endpoint, \"delete\"));\n    }\n    async deleteV2Function(endpoint) {\n        const fnName = backend.functionName(endpoint);\n        await this.functionExecutor\n            .run(async () => {\n            const op = await gcfV2.deleteFunction(fnName);\n            const pollerOptions = Object.assign(Object.assign({}, gcfV2PollerOptions), { pollerName: `delete-${endpoint.region}-${endpoint.id}`, operationResourceName: op.name });\n            await poller.pollOperation(pollerOptions);\n        })\n            .catch(rethrowAs(endpoint, \"delete\"));\n    }\n    async setConcurrency(endpoint, serviceName, concurrency) {\n        await this.functionExecutor\n            .run(async () => {\n            const service = await run.getService(serviceName);\n            if (service.spec.template.spec.containerConcurrency === concurrency) {\n                logger_1.logger.debug(\"Skipping setConcurrency on\", serviceName, \" because it already matches\");\n                return;\n            }\n            delete service.status;\n            delete service.spec.template.metadata.name;\n            service.spec.template.spec.containerConcurrency = concurrency;\n            await run.replaceService(serviceName, service);\n        })\n            .catch(rethrowAs(endpoint, \"set concurrency\"));\n    }\n    async setTrigger(endpoint) {\n        if (backend.isScheduleTriggered(endpoint)) {\n            if (endpoint.platform === \"gcfv1\") {\n                await this.upsertScheduleV1(endpoint);\n                return;\n            }\n            else if (endpoint.platform === \"gcfv2\") {\n                await this.upsertScheduleV2(endpoint);\n                return;\n            }\n            functional_1.assertExhaustive(endpoint.platform);\n        }\n    }\n    async deleteTrigger(endpoint) {\n        if (backend.isScheduleTriggered(endpoint)) {\n            if (endpoint.platform === \"gcfv1\") {\n                await this.deleteScheduleV1(endpoint);\n                return;\n            }\n            else if (endpoint.platform === \"gcfv2\") {\n                await this.deleteScheduleV2(endpoint);\n                return;\n            }\n            functional_1.assertExhaustive(endpoint.platform);\n        }\n    }\n    async upsertScheduleV1(endpoint) {\n        const job = scheduler.jobFromEndpoint(endpoint, this.appEngineLocation);\n        await this.executor\n            .run(() => scheduler.createOrReplaceJob(job))\n            .catch(rethrowAs(endpoint, \"upsert schedule\"));\n    }\n    upsertScheduleV2(endpoint) {\n        return Promise.reject(new reporter.DeploymentError(endpoint, \"upsert schedule\", new Error(\"Not implemented\")));\n    }\n    async deleteScheduleV1(endpoint) {\n        const job = scheduler.jobFromEndpoint(endpoint, this.appEngineLocation);\n        await this.executor\n            .run(() => scheduler.deleteJob(job.name))\n            .catch(rethrowAs(endpoint, \"delete schedule\"));\n        await this.executor\n            .run(() => pubsub.deleteTopic(job.pubsubTarget.topicName))\n            .catch(rethrowAs(endpoint, \"delete topic\"));\n    }\n    deleteScheduleV2(endpoint) {\n        return Promise.reject(new reporter.DeploymentError(endpoint, \"delete schedule\", new Error(\"Not implemented\")));\n    }\n    logOpStart(op, endpoint) {\n        const runtime = runtimes_1.getHumanFriendlyRuntimeName(endpoint.runtime);\n        const label = helper.getFunctionLabel(endpoint);\n        utils.logBullet(`${clc.bold.cyan(\"functions:\")} ${op} ${runtime} function ${clc.bold(label)}...`);\n    }\n    logOpSuccess(op, endpoint) {\n        const label = helper.getFunctionLabel(endpoint);\n        utils.logSuccess(`${clc.bold.green(`functions[${label}]`)} Successful ${op} operation.`);\n    }\n}\nexports.Fabricator = Fabricator;\n"]},"metadata":{},"sourceType":"script"}