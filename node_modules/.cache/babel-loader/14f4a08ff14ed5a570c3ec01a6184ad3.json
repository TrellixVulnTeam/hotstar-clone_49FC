{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.grantServiceAgentRole = exports.addVersion = exports.createSecret = exports.parseSecretResourceName = exports.secretExists = exports.getSecretLabels = exports.getSecret = exports.listSecrets = void 0;\n\nconst api = require(\"../api\");\n\nasync function listSecrets(projectId) {\n  const listRes = await api.request(\"GET\", `/v1beta1/projects/${projectId}/secrets`, {\n    auth: true,\n    origin: api.secretManagerOrigin\n  });\n  return listRes.body.secrets.map(s => parseSecretResourceName(s.name));\n}\n\nexports.listSecrets = listSecrets;\n\nasync function getSecret(projectId, name) {\n  const getRes = await api.request(\"GET\", `/v1beta1/projects/${projectId}/secrets/${name}`, {\n    auth: true,\n    origin: api.secretManagerOrigin\n  });\n  return parseSecretResourceName(getRes.body.name);\n}\n\nexports.getSecret = getSecret;\n\nasync function getSecretLabels(projectId, name) {\n  const getRes = await api.request(\"GET\", `/v1beta1/projects/${projectId}/secrets/${name}`, {\n    auth: true,\n    origin: api.secretManagerOrigin\n  });\n  return getRes.body.labels;\n}\n\nexports.getSecretLabels = getSecretLabels;\n\nasync function secretExists(projectId, name) {\n  try {\n    await getSecret(projectId, name);\n    return true;\n  } catch (err) {\n    if (err.status === 404) {\n      return false;\n    }\n\n    throw err;\n  }\n}\n\nexports.secretExists = secretExists;\n\nfunction parseSecretResourceName(resourceName) {\n  const nameTokens = resourceName.split(\"/\");\n  return {\n    projectId: nameTokens[1],\n    name: nameTokens[3]\n  };\n}\n\nexports.parseSecretResourceName = parseSecretResourceName;\n\nasync function createSecret(projectId, name, labels) {\n  const createRes = await api.request(\"POST\", `/v1beta1/projects/${projectId}/secrets?secretId=${name}`, {\n    auth: true,\n    origin: api.secretManagerOrigin,\n    data: {\n      replication: {\n        automatic: {}\n      },\n      labels\n    }\n  });\n  return parseSecretResourceName(createRes.body.name);\n}\n\nexports.createSecret = createSecret;\n\nasync function addVersion(secret, payloadData) {\n  const res = await api.request(\"POST\", `/v1beta1/projects/${secret.projectId}/secrets/${secret.name}:addVersion`, {\n    auth: true,\n    origin: api.secretManagerOrigin,\n    data: {\n      payload: {\n        data: Buffer.from(payloadData).toString(\"base64\")\n      }\n    }\n  });\n  const nameTokens = res.body.name.split(\"/\");\n  return {\n    secret: {\n      projectId: nameTokens[1],\n      name: nameTokens[3]\n    },\n    versionId: nameTokens[5]\n  };\n}\n\nexports.addVersion = addVersion;\n\nasync function grantServiceAgentRole(secret, serviceAccountEmail, role) {\n  const getPolicyRes = await api.request(\"GET\", `/v1beta1/projects/${secret.projectId}/secrets/${secret.name}:getIamPolicy`, {\n    auth: true,\n    origin: api.secretManagerOrigin\n  });\n  const bindings = getPolicyRes.body.bindings || [];\n\n  if (bindings.find(b => b.role == role && b.members.find(m => m == `serviceAccount:${serviceAccountEmail}`))) {\n    return;\n  }\n\n  bindings.push({\n    role: role,\n    members: [`serviceAccount:${serviceAccountEmail}`]\n  });\n  await api.request(\"POST\", `/v1beta1/projects/${secret.projectId}/secrets/${secret.name}:setIamPolicy`, {\n    auth: true,\n    origin: api.secretManagerOrigin,\n    data: {\n      policy: {\n        bindings\n      },\n      updateMask: {\n        paths: \"bindings\"\n      }\n    }\n  });\n}\n\nexports.grantServiceAgentRole = grantServiceAgentRole;","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/gcp/secretManager.js"],"names":["Object","defineProperty","exports","value","grantServiceAgentRole","addVersion","createSecret","parseSecretResourceName","secretExists","getSecretLabels","getSecret","listSecrets","api","require","projectId","listRes","request","auth","origin","secretManagerOrigin","body","secrets","map","s","name","getRes","labels","err","status","resourceName","nameTokens","split","createRes","data","replication","automatic","secret","payloadData","res","payload","Buffer","from","toString","versionId","serviceAccountEmail","role","getPolicyRes","bindings","find","b","members","m","push","policy","updateMask","paths"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qBAAR,GAAgCF,OAAO,CAACG,UAAR,GAAqBH,OAAO,CAACI,YAAR,GAAuBJ,OAAO,CAACK,uBAAR,GAAkCL,OAAO,CAACM,YAAR,GAAuBN,OAAO,CAACO,eAAR,GAA0BP,OAAO,CAACQ,SAAR,GAAoBR,OAAO,CAACS,WAAR,GAAsB,KAAK,CAA9M;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,eAAeF,WAAf,CAA2BG,SAA3B,EAAsC;AAClC,QAAMC,OAAO,GAAG,MAAMH,GAAG,CAACI,OAAJ,CAAY,KAAZ,EAAoB,qBAAoBF,SAAU,UAAlD,EAA6D;AAC/EG,IAAAA,IAAI,EAAE,IADyE;AAE/EC,IAAAA,MAAM,EAAEN,GAAG,CAACO;AAFmE,GAA7D,CAAtB;AAIA,SAAOJ,OAAO,CAACK,IAAR,CAAaC,OAAb,CAAqBC,GAArB,CAA0BC,CAAD,IAAOhB,uBAAuB,CAACgB,CAAC,CAACC,IAAH,CAAvD,CAAP;AACH;;AACDtB,OAAO,CAACS,WAAR,GAAsBA,WAAtB;;AACA,eAAeD,SAAf,CAAyBI,SAAzB,EAAoCU,IAApC,EAA0C;AACtC,QAAMC,MAAM,GAAG,MAAMb,GAAG,CAACI,OAAJ,CAAY,KAAZ,EAAoB,qBAAoBF,SAAU,YAAWU,IAAK,EAAlE,EAAqE;AACtFP,IAAAA,IAAI,EAAE,IADgF;AAEtFC,IAAAA,MAAM,EAAEN,GAAG,CAACO;AAF0E,GAArE,CAArB;AAIA,SAAOZ,uBAAuB,CAACkB,MAAM,CAACL,IAAP,CAAYI,IAAb,CAA9B;AACH;;AACDtB,OAAO,CAACQ,SAAR,GAAoBA,SAApB;;AACA,eAAeD,eAAf,CAA+BK,SAA/B,EAA0CU,IAA1C,EAAgD;AAC5C,QAAMC,MAAM,GAAG,MAAMb,GAAG,CAACI,OAAJ,CAAY,KAAZ,EAAoB,qBAAoBF,SAAU,YAAWU,IAAK,EAAlE,EAAqE;AACtFP,IAAAA,IAAI,EAAE,IADgF;AAEtFC,IAAAA,MAAM,EAAEN,GAAG,CAACO;AAF0E,GAArE,CAArB;AAIA,SAAOM,MAAM,CAACL,IAAP,CAAYM,MAAnB;AACH;;AACDxB,OAAO,CAACO,eAAR,GAA0BA,eAA1B;;AACA,eAAeD,YAAf,CAA4BM,SAA5B,EAAuCU,IAAvC,EAA6C;AACzC,MAAI;AACA,UAAMd,SAAS,CAACI,SAAD,EAAYU,IAAZ,CAAf;AACA,WAAO,IAAP;AACH,GAHD,CAIA,OAAOG,GAAP,EAAY;AACR,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,aAAO,KAAP;AACH;;AACD,UAAMD,GAAN;AACH;AACJ;;AACDzB,OAAO,CAACM,YAAR,GAAuBA,YAAvB;;AACA,SAASD,uBAAT,CAAiCsB,YAAjC,EAA+C;AAC3C,QAAMC,UAAU,GAAGD,YAAY,CAACE,KAAb,CAAmB,GAAnB,CAAnB;AACA,SAAO;AACHjB,IAAAA,SAAS,EAAEgB,UAAU,CAAC,CAAD,CADlB;AAEHN,IAAAA,IAAI,EAAEM,UAAU,CAAC,CAAD;AAFb,GAAP;AAIH;;AACD5B,OAAO,CAACK,uBAAR,GAAkCA,uBAAlC;;AACA,eAAeD,YAAf,CAA4BQ,SAA5B,EAAuCU,IAAvC,EAA6CE,MAA7C,EAAqD;AACjD,QAAMM,SAAS,GAAG,MAAMpB,GAAG,CAACI,OAAJ,CAAY,MAAZ,EAAqB,qBAAoBF,SAAU,qBAAoBU,IAAK,EAA5E,EAA+E;AACnGP,IAAAA,IAAI,EAAE,IAD6F;AAEnGC,IAAAA,MAAM,EAAEN,GAAG,CAACO,mBAFuF;AAGnGc,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE;AACTC,QAAAA,SAAS,EAAE;AADF,OADX;AAIFT,MAAAA;AAJE;AAH6F,GAA/E,CAAxB;AAUA,SAAOnB,uBAAuB,CAACyB,SAAS,CAACZ,IAAV,CAAeI,IAAhB,CAA9B;AACH;;AACDtB,OAAO,CAACI,YAAR,GAAuBA,YAAvB;;AACA,eAAeD,UAAf,CAA0B+B,MAA1B,EAAkCC,WAAlC,EAA+C;AAC3C,QAAMC,GAAG,GAAG,MAAM1B,GAAG,CAACI,OAAJ,CAAY,MAAZ,EAAqB,qBAAoBoB,MAAM,CAACtB,SAAU,YAAWsB,MAAM,CAACZ,IAAK,aAAjF,EAA+F;AAC7GP,IAAAA,IAAI,EAAE,IADuG;AAE7GC,IAAAA,MAAM,EAAEN,GAAG,CAACO,mBAFiG;AAG7Gc,IAAAA,IAAI,EAAE;AACFM,MAAAA,OAAO,EAAE;AACLN,QAAAA,IAAI,EAAEO,MAAM,CAACC,IAAP,CAAYJ,WAAZ,EAAyBK,QAAzB,CAAkC,QAAlC;AADD;AADP;AAHuG,GAA/F,CAAlB;AASA,QAAMZ,UAAU,GAAGQ,GAAG,CAAClB,IAAJ,CAASI,IAAT,CAAcO,KAAd,CAAoB,GAApB,CAAnB;AACA,SAAO;AACHK,IAAAA,MAAM,EAAE;AACJtB,MAAAA,SAAS,EAAEgB,UAAU,CAAC,CAAD,CADjB;AAEJN,MAAAA,IAAI,EAAEM,UAAU,CAAC,CAAD;AAFZ,KADL;AAKHa,IAAAA,SAAS,EAAEb,UAAU,CAAC,CAAD;AALlB,GAAP;AAOH;;AACD5B,OAAO,CAACG,UAAR,GAAqBA,UAArB;;AACA,eAAeD,qBAAf,CAAqCgC,MAArC,EAA6CQ,mBAA7C,EAAkEC,IAAlE,EAAwE;AACpE,QAAMC,YAAY,GAAG,MAAMlC,GAAG,CAACI,OAAJ,CAAY,KAAZ,EAAoB,qBAAoBoB,MAAM,CAACtB,SAAU,YAAWsB,MAAM,CAACZ,IAAK,eAAhF,EAAgG;AACvHP,IAAAA,IAAI,EAAE,IADiH;AAEvHC,IAAAA,MAAM,EAAEN,GAAG,CAACO;AAF2G,GAAhG,CAA3B;AAIA,QAAM4B,QAAQ,GAAGD,YAAY,CAAC1B,IAAb,CAAkB2B,QAAlB,IAA8B,EAA/C;;AACA,MAAIA,QAAQ,CAACC,IAAT,CAAeC,CAAD,IAAOA,CAAC,CAACJ,IAAF,IAAUA,IAAV,IACrBI,CAAC,CAACC,OAAF,CAAUF,IAAV,CAAgBG,CAAD,IAAOA,CAAC,IAAK,kBAAiBP,mBAAoB,EAAjE,CADA,CAAJ,EAC0E;AACtE;AACH;;AACDG,EAAAA,QAAQ,CAACK,IAAT,CAAc;AACVP,IAAAA,IAAI,EAAEA,IADI;AAEVK,IAAAA,OAAO,EAAE,CAAE,kBAAiBN,mBAAoB,EAAvC;AAFC,GAAd;AAIA,QAAMhC,GAAG,CAACI,OAAJ,CAAY,MAAZ,EAAqB,qBAAoBoB,MAAM,CAACtB,SAAU,YAAWsB,MAAM,CAACZ,IAAK,eAAjF,EAAiG;AACnGP,IAAAA,IAAI,EAAE,IAD6F;AAEnGC,IAAAA,MAAM,EAAEN,GAAG,CAACO,mBAFuF;AAGnGc,IAAAA,IAAI,EAAE;AACFoB,MAAAA,MAAM,EAAE;AACJN,QAAAA;AADI,OADN;AAIFO,MAAAA,UAAU,EAAE;AACRC,QAAAA,KAAK,EAAE;AADC;AAJV;AAH6F,GAAjG,CAAN;AAYH;;AACDrD,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.grantServiceAgentRole = exports.addVersion = exports.createSecret = exports.parseSecretResourceName = exports.secretExists = exports.getSecretLabels = exports.getSecret = exports.listSecrets = void 0;\nconst api = require(\"../api\");\nasync function listSecrets(projectId) {\n    const listRes = await api.request(\"GET\", `/v1beta1/projects/${projectId}/secrets`, {\n        auth: true,\n        origin: api.secretManagerOrigin,\n    });\n    return listRes.body.secrets.map((s) => parseSecretResourceName(s.name));\n}\nexports.listSecrets = listSecrets;\nasync function getSecret(projectId, name) {\n    const getRes = await api.request(\"GET\", `/v1beta1/projects/${projectId}/secrets/${name}`, {\n        auth: true,\n        origin: api.secretManagerOrigin,\n    });\n    return parseSecretResourceName(getRes.body.name);\n}\nexports.getSecret = getSecret;\nasync function getSecretLabels(projectId, name) {\n    const getRes = await api.request(\"GET\", `/v1beta1/projects/${projectId}/secrets/${name}`, {\n        auth: true,\n        origin: api.secretManagerOrigin,\n    });\n    return getRes.body.labels;\n}\nexports.getSecretLabels = getSecretLabels;\nasync function secretExists(projectId, name) {\n    try {\n        await getSecret(projectId, name);\n        return true;\n    }\n    catch (err) {\n        if (err.status === 404) {\n            return false;\n        }\n        throw err;\n    }\n}\nexports.secretExists = secretExists;\nfunction parseSecretResourceName(resourceName) {\n    const nameTokens = resourceName.split(\"/\");\n    return {\n        projectId: nameTokens[1],\n        name: nameTokens[3],\n    };\n}\nexports.parseSecretResourceName = parseSecretResourceName;\nasync function createSecret(projectId, name, labels) {\n    const createRes = await api.request(\"POST\", `/v1beta1/projects/${projectId}/secrets?secretId=${name}`, {\n        auth: true,\n        origin: api.secretManagerOrigin,\n        data: {\n            replication: {\n                automatic: {},\n            },\n            labels,\n        },\n    });\n    return parseSecretResourceName(createRes.body.name);\n}\nexports.createSecret = createSecret;\nasync function addVersion(secret, payloadData) {\n    const res = await api.request(\"POST\", `/v1beta1/projects/${secret.projectId}/secrets/${secret.name}:addVersion`, {\n        auth: true,\n        origin: api.secretManagerOrigin,\n        data: {\n            payload: {\n                data: Buffer.from(payloadData).toString(\"base64\"),\n            },\n        },\n    });\n    const nameTokens = res.body.name.split(\"/\");\n    return {\n        secret: {\n            projectId: nameTokens[1],\n            name: nameTokens[3],\n        },\n        versionId: nameTokens[5],\n    };\n}\nexports.addVersion = addVersion;\nasync function grantServiceAgentRole(secret, serviceAccountEmail, role) {\n    const getPolicyRes = await api.request(\"GET\", `/v1beta1/projects/${secret.projectId}/secrets/${secret.name}:getIamPolicy`, {\n        auth: true,\n        origin: api.secretManagerOrigin,\n    });\n    const bindings = getPolicyRes.body.bindings || [];\n    if (bindings.find((b) => b.role == role &&\n        b.members.find((m) => m == `serviceAccount:${serviceAccountEmail}`))) {\n        return;\n    }\n    bindings.push({\n        role: role,\n        members: [`serviceAccount:${serviceAccountEmail}`],\n    });\n    await api.request(\"POST\", `/v1beta1/projects/${secret.projectId}/secrets/${secret.name}:setIamPolicy`, {\n        auth: true,\n        origin: api.secretManagerOrigin,\n        data: {\n            policy: {\n                bindings,\n            },\n            updateMask: {\n                paths: \"bindings\",\n            },\n        },\n    });\n}\nexports.grantServiceAgentRole = grantServiceAgentRole;\n"]},"metadata":{},"sourceType":"script"}