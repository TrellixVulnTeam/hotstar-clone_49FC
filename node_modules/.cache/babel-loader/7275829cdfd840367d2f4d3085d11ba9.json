{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs-extra\");\n\nconst os = require(\"os\");\n\nconst path = require(\"path\");\n\nconst spawn = require(\"cross-spawn\");\n\nconst uuid = require(\"uuid\");\n\nconst command_1 = require(\"../command\");\n\nconst downloadUtils = require(\"../downloadUtils\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst rimraf = require(\"rimraf\");\n\nconst utils = require(\"../utils\");\n\nvar SymbolGenerator;\n\n(function (SymbolGenerator) {\n  SymbolGenerator[\"breakpad\"] = \"breakpad\";\n  SymbolGenerator[\"csym\"] = \"csym\";\n})(SymbolGenerator || (SymbolGenerator = {}));\n\nconst SYMBOL_CACHE_ROOT_DIR = process.env.FIREBASE_CRASHLYTICS_CACHE_PATH || os.tmpdir();\nconst JAR_CACHE_DIR = process.env.FIREBASE_CRASHLYTICS_BUILDTOOLS_PATH || path.join(os.homedir(), \".cache\", \"firebase\", \"crashlytics\", \"buildtools\");\nconst JAR_VERSION = \"2.8.0\";\nconst JAR_URL = `https://storage.googleapis.com/firebase-preview-drop/android/crashlytics-eap/crashlytics-buildtools/firebase-crashlytics-buildtools-${JAR_VERSION}-alpha-all.jar`;\nexports.default = new command_1.Command(\"crashlytics:symbols:upload <symbolFiles...>\").description(\"Upload symbols for native code, to symbolicate stack traces.\").option(\"--app <appID>\", \"the app id of your Firebase app\").option(\"--generator [breakpad|csym]\", \"the symbol generator being used, defaults to breakpad.\").option(\"--dry-run\", \"generate symbols without uploading them\").option(\"--debug\", \"print debug output and logging from the underlying uploader tool\").action(async (symbolFiles, options) => {\n  const app = getGoogleAppID(options) || \"\";\n  const generator = getSymbolGenerator(options);\n  const dryRun = !!options.dryRun;\n  const debug = !!options.debug;\n  let jarFile = await downloadBuiltoolsJar();\n\n  if (process.env.LOCAL_JAR) {\n    jarFile = process.env.LOCAL_JAR;\n  }\n\n  const jarOptions = {\n    jarFile,\n    app,\n    generator,\n    cachePath: path.join(SYMBOL_CACHE_ROOT_DIR, `crashlytics-${uuid.v4()}`, \"nativeSymbols\", app.replace(/:/g, \"-\"), generator),\n    symbolFile: \"\",\n    generate: true\n  };\n\n  for (const symbolFile of symbolFiles) {\n    utils.logBullet(`Generating symbols for ${symbolFile}`);\n    const generateArgs = buildArgs(Object.assign(Object.assign({}, jarOptions), {\n      symbolFile\n    }));\n    const output = runJar(generateArgs, debug);\n\n    if (output.length > 0) {\n      utils.logBullet(output);\n    } else {\n      utils.logBullet(`Generated symbols for ${symbolFile}`);\n      utils.logBullet(`Output Path: ${jarOptions.cachePath}`);\n    }\n  }\n\n  if (dryRun) {\n    utils.logBullet(\"Skipping upload because --dry-run was passed\");\n    return;\n  }\n\n  utils.logBullet(`Uploading all generated symbols`);\n  const uploadArgs = buildArgs(Object.assign(Object.assign({}, jarOptions), {\n    generate: false\n  }));\n  const output = runJar(uploadArgs, debug);\n\n  if (output.length > 0) {\n    utils.logBullet(output);\n  } else {\n    utils.logBullet(\"Successfully uploaded all symbols\");\n  }\n});\n\nfunction getGoogleAppID(options) {\n  if (!options.app) {\n    throw new error_1.FirebaseError(\"set the --app option to a valid Firebase app id and try again\");\n  }\n\n  return options.app;\n}\n\nfunction getSymbolGenerator(options) {\n  if (!options.generator) {\n    return SymbolGenerator.breakpad;\n  }\n\n  if (!Object.values(SymbolGenerator).includes(options.generator)) {\n    throw new error_1.FirebaseError('--symbol-generator should be set to either \"breakpad\" or \"csym\"');\n  }\n\n  return options.generator;\n}\n\nasync function downloadBuiltoolsJar() {\n  const jarPath = path.join(JAR_CACHE_DIR, `crashlytics-buildtools-${JAR_VERSION}.jar`);\n\n  if (fs.existsSync(jarPath)) {\n    logger_1.logger.debug(`Buildtools Jar already downloaded at ${jarPath}`);\n    return jarPath;\n  }\n\n  if (fs.existsSync(JAR_CACHE_DIR)) {\n    logger_1.logger.debug(`Deleting Jar cache at ${JAR_CACHE_DIR} because the CLI was run with a newer Jar version`);\n    rimraf.sync(JAR_CACHE_DIR);\n  }\n\n  utils.logBullet(\"Downloading buildtools.jar to \" + jarPath);\n  utils.logBullet(\"For open source licenses used by this command, look in the META-INF directory in the buildtools.jar file\");\n  const tmpfile = await downloadUtils.downloadToTmp(JAR_URL);\n  fs.mkdirSync(JAR_CACHE_DIR, {\n    recursive: true\n  });\n  fs.copySync(tmpfile, jarPath);\n  return jarPath;\n}\n\nfunction buildArgs(options) {\n  const baseArgs = [\"-jar\", options.jarFile, `-symbolGenerator=${options.generator}`, `-symbolFileCacheDir=${options.cachePath}`, \"-verbose\"];\n\n  if (options.generate) {\n    return baseArgs.concat([\"-generateNativeSymbols\", `-unstrippedLibrary=${options.symbolFile}`]);\n  }\n\n  return baseArgs.concat([\"-uploadNativeSymbols\", `-googleAppId=${options.app}`]);\n}\n\nfunction runJar(args, debug) {\n  var _a, _b, _c;\n\n  const outputs = spawn.sync(\"java\", args, {\n    stdio: debug ? \"inherit\" : \"pipe\"\n  });\n\n  if (outputs.status || 0 > 0) {\n    if (!debug) {\n      utils.logWarning(((_a = outputs.stdout) === null || _a === void 0 ? void 0 : _a.toString()) || \"An unknown error occurred\");\n    }\n\n    throw new error_1.FirebaseError(\"Failed to upload symbols\");\n  }\n\n  if (!debug) {\n    let logRegex = /(Generated symbol file.*$)/m;\n    let matched = (((_b = outputs.stdout) === null || _b === void 0 ? void 0 : _b.toString()) || \"\").match(logRegex);\n\n    if (matched) {\n      return matched[1];\n    }\n\n    logRegex = /(Crashlytics symbol file uploaded successfully.*$)/m;\n    matched = (((_c = outputs.stdout) === null || _c === void 0 ? void 0 : _c.toString()) || \"\").match(logRegex);\n\n    if (matched) {\n      return matched[1];\n    }\n\n    return \"\";\n  }\n\n  return \"\";\n}","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/commands/crashlytics-symbols-upload.js"],"names":["Object","defineProperty","exports","value","fs","require","os","path","spawn","uuid","command_1","downloadUtils","error_1","logger_1","rimraf","utils","SymbolGenerator","SYMBOL_CACHE_ROOT_DIR","process","env","FIREBASE_CRASHLYTICS_CACHE_PATH","tmpdir","JAR_CACHE_DIR","FIREBASE_CRASHLYTICS_BUILDTOOLS_PATH","join","homedir","JAR_VERSION","JAR_URL","default","Command","description","option","action","symbolFiles","options","app","getGoogleAppID","generator","getSymbolGenerator","dryRun","debug","jarFile","downloadBuiltoolsJar","LOCAL_JAR","jarOptions","cachePath","v4","replace","symbolFile","generate","logBullet","generateArgs","buildArgs","assign","output","runJar","length","uploadArgs","FirebaseError","breakpad","values","includes","jarPath","existsSync","logger","sync","tmpfile","downloadToTmp","mkdirSync","recursive","copySync","baseArgs","concat","args","_a","_b","_c","outputs","stdio","status","logWarning","stdout","toString","logRegex","matched","match"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs-extra\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst spawn = require(\"cross-spawn\");\nconst uuid = require(\"uuid\");\nconst command_1 = require(\"../command\");\nconst downloadUtils = require(\"../downloadUtils\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst rimraf = require(\"rimraf\");\nconst utils = require(\"../utils\");\nvar SymbolGenerator;\n(function (SymbolGenerator) {\n    SymbolGenerator[\"breakpad\"] = \"breakpad\";\n    SymbolGenerator[\"csym\"] = \"csym\";\n})(SymbolGenerator || (SymbolGenerator = {}));\nconst SYMBOL_CACHE_ROOT_DIR = process.env.FIREBASE_CRASHLYTICS_CACHE_PATH || os.tmpdir();\nconst JAR_CACHE_DIR = process.env.FIREBASE_CRASHLYTICS_BUILDTOOLS_PATH ||\n    path.join(os.homedir(), \".cache\", \"firebase\", \"crashlytics\", \"buildtools\");\nconst JAR_VERSION = \"2.8.0\";\nconst JAR_URL = `https://storage.googleapis.com/firebase-preview-drop/android/crashlytics-eap/crashlytics-buildtools/firebase-crashlytics-buildtools-${JAR_VERSION}-alpha-all.jar`;\nexports.default = new command_1.Command(\"crashlytics:symbols:upload <symbolFiles...>\")\n    .description(\"Upload symbols for native code, to symbolicate stack traces.\")\n    .option(\"--app <appID>\", \"the app id of your Firebase app\")\n    .option(\"--generator [breakpad|csym]\", \"the symbol generator being used, defaults to breakpad.\")\n    .option(\"--dry-run\", \"generate symbols without uploading them\")\n    .option(\"--debug\", \"print debug output and logging from the underlying uploader tool\")\n    .action(async (symbolFiles, options) => {\n    const app = getGoogleAppID(options) || \"\";\n    const generator = getSymbolGenerator(options);\n    const dryRun = !!options.dryRun;\n    const debug = !!options.debug;\n    let jarFile = await downloadBuiltoolsJar();\n    if (process.env.LOCAL_JAR) {\n        jarFile = process.env.LOCAL_JAR;\n    }\n    const jarOptions = {\n        jarFile,\n        app,\n        generator,\n        cachePath: path.join(SYMBOL_CACHE_ROOT_DIR, `crashlytics-${uuid.v4()}`, \"nativeSymbols\", app.replace(/:/g, \"-\"), generator),\n        symbolFile: \"\",\n        generate: true,\n    };\n    for (const symbolFile of symbolFiles) {\n        utils.logBullet(`Generating symbols for ${symbolFile}`);\n        const generateArgs = buildArgs(Object.assign(Object.assign({}, jarOptions), { symbolFile }));\n        const output = runJar(generateArgs, debug);\n        if (output.length > 0) {\n            utils.logBullet(output);\n        }\n        else {\n            utils.logBullet(`Generated symbols for ${symbolFile}`);\n            utils.logBullet(`Output Path: ${jarOptions.cachePath}`);\n        }\n    }\n    if (dryRun) {\n        utils.logBullet(\"Skipping upload because --dry-run was passed\");\n        return;\n    }\n    utils.logBullet(`Uploading all generated symbols`);\n    const uploadArgs = buildArgs(Object.assign(Object.assign({}, jarOptions), { generate: false }));\n    const output = runJar(uploadArgs, debug);\n    if (output.length > 0) {\n        utils.logBullet(output);\n    }\n    else {\n        utils.logBullet(\"Successfully uploaded all symbols\");\n    }\n});\nfunction getGoogleAppID(options) {\n    if (!options.app) {\n        throw new error_1.FirebaseError(\"set the --app option to a valid Firebase app id and try again\");\n    }\n    return options.app;\n}\nfunction getSymbolGenerator(options) {\n    if (!options.generator) {\n        return SymbolGenerator.breakpad;\n    }\n    if (!Object.values(SymbolGenerator).includes(options.generator)) {\n        throw new error_1.FirebaseError('--symbol-generator should be set to either \"breakpad\" or \"csym\"');\n    }\n    return options.generator;\n}\nasync function downloadBuiltoolsJar() {\n    const jarPath = path.join(JAR_CACHE_DIR, `crashlytics-buildtools-${JAR_VERSION}.jar`);\n    if (fs.existsSync(jarPath)) {\n        logger_1.logger.debug(`Buildtools Jar already downloaded at ${jarPath}`);\n        return jarPath;\n    }\n    if (fs.existsSync(JAR_CACHE_DIR)) {\n        logger_1.logger.debug(`Deleting Jar cache at ${JAR_CACHE_DIR} because the CLI was run with a newer Jar version`);\n        rimraf.sync(JAR_CACHE_DIR);\n    }\n    utils.logBullet(\"Downloading buildtools.jar to \" + jarPath);\n    utils.logBullet(\"For open source licenses used by this command, look in the META-INF directory in the buildtools.jar file\");\n    const tmpfile = await downloadUtils.downloadToTmp(JAR_URL);\n    fs.mkdirSync(JAR_CACHE_DIR, { recursive: true });\n    fs.copySync(tmpfile, jarPath);\n    return jarPath;\n}\nfunction buildArgs(options) {\n    const baseArgs = [\n        \"-jar\",\n        options.jarFile,\n        `-symbolGenerator=${options.generator}`,\n        `-symbolFileCacheDir=${options.cachePath}`,\n        \"-verbose\",\n    ];\n    if (options.generate) {\n        return baseArgs.concat([\"-generateNativeSymbols\", `-unstrippedLibrary=${options.symbolFile}`]);\n    }\n    return baseArgs.concat([\n        \"-uploadNativeSymbols\",\n        `-googleAppId=${options.app}`,\n    ]);\n}\nfunction runJar(args, debug) {\n    var _a, _b, _c;\n    const outputs = spawn.sync(\"java\", args, {\n        stdio: debug ? \"inherit\" : \"pipe\",\n    });\n    if (outputs.status || 0 > 0) {\n        if (!debug) {\n            utils.logWarning(((_a = outputs.stdout) === null || _a === void 0 ? void 0 : _a.toString()) || \"An unknown error occurred\");\n        }\n        throw new error_1.FirebaseError(\"Failed to upload symbols\");\n    }\n    if (!debug) {\n        let logRegex = /(Generated symbol file.*$)/m;\n        let matched = (((_b = outputs.stdout) === null || _b === void 0 ? void 0 : _b.toString()) || \"\").match(logRegex);\n        if (matched) {\n            return matched[1];\n        }\n        logRegex = /(Crashlytics symbol file uploaded successfully.*$)/m;\n        matched = (((_c = outputs.stdout) === null || _c === void 0 ? void 0 : _c.toString()) || \"\").match(logRegex);\n        if (matched) {\n            return matched[1];\n        }\n        return \"\";\n    }\n    return \"\";\n}\n"]},"metadata":{},"sourceType":"script"}