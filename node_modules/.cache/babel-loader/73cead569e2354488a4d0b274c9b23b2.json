{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Distribution = exports.DistributionFileType = void 0;\n\nconst fs = require(\"fs-extra\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst pathUtil = require(\"path\");\n\nvar DistributionFileType;\n\n(function (DistributionFileType) {\n  DistributionFileType[\"IPA\"] = \"ipa\";\n  DistributionFileType[\"APK\"] = \"apk\";\n  DistributionFileType[\"AAB\"] = \"aab\";\n})(DistributionFileType = exports.DistributionFileType || (exports.DistributionFileType = {}));\n\nclass Distribution {\n  constructor(path) {\n    this.path = path;\n\n    if (!path) {\n      throw new error_1.FirebaseError(\"must specify a release binary file\");\n    }\n\n    const distributionType = path.split(\".\").pop();\n\n    if (distributionType !== DistributionFileType.IPA && distributionType !== DistributionFileType.APK && distributionType !== DistributionFileType.AAB) {\n      throw new error_1.FirebaseError(\"Unsupported file format, should be .ipa, .apk or .aab\");\n    }\n\n    let stat;\n\n    try {\n      stat = fs.statSync(path);\n    } catch (err) {\n      logger_1.logger.info(err);\n      throw new error_1.FirebaseError(`File ${path} does not exist: verify that file points to a binary`);\n    }\n\n    if (!stat.isFile()) {\n      throw new error_1.FirebaseError(`${path} is not a file. Verify that it points to a binary.`);\n    }\n\n    this.path = path;\n    this.fileType = distributionType;\n    this.fileName = pathUtil.basename(path);\n  }\n\n  distributionFileType() {\n    return this.fileType;\n  }\n\n  readStream() {\n    return fs.createReadStream(this.path);\n  }\n\n  getFileName() {\n    return this.fileName;\n  }\n\n}\n\nexports.Distribution = Distribution;","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/appdistribution/distribution.js"],"names":["Object","defineProperty","exports","value","Distribution","DistributionFileType","fs","require","error_1","logger_1","pathUtil","constructor","path","FirebaseError","distributionType","split","pop","IPA","APK","AAB","stat","statSync","err","logger","info","isFile","fileType","fileName","basename","distributionFileType","readStream","createReadStream","getFileName"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuBF,OAAO,CAACG,oBAAR,GAA+B,KAAK,CAA3D;;AACA,MAAMC,EAAE,GAAGC,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,MAAD,CAAxB;;AACA,IAAIF,oBAAJ;;AACA,CAAC,UAAUA,oBAAV,EAAgC;AAC7BA,EAAAA,oBAAoB,CAAC,KAAD,CAApB,GAA8B,KAA9B;AACAA,EAAAA,oBAAoB,CAAC,KAAD,CAApB,GAA8B,KAA9B;AACAA,EAAAA,oBAAoB,CAAC,KAAD,CAApB,GAA8B,KAA9B;AACH,CAJD,EAIGA,oBAAoB,GAAGH,OAAO,CAACG,oBAAR,KAAiCH,OAAO,CAACG,oBAAR,GAA+B,EAAhE,CAJ1B;;AAKA,MAAMD,YAAN,CAAmB;AACfO,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;;AACA,QAAI,CAACA,IAAL,EAAW;AACP,YAAM,IAAIJ,OAAO,CAACK,aAAZ,CAA0B,oCAA1B,CAAN;AACH;;AACD,UAAMC,gBAAgB,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgBC,GAAhB,EAAzB;;AACA,QAAIF,gBAAgB,KAAKT,oBAAoB,CAACY,GAA1C,IACAH,gBAAgB,KAAKT,oBAAoB,CAACa,GAD1C,IAEAJ,gBAAgB,KAAKT,oBAAoB,CAACc,GAF9C,EAEmD;AAC/C,YAAM,IAAIX,OAAO,CAACK,aAAZ,CAA0B,uDAA1B,CAAN;AACH;;AACD,QAAIO,IAAJ;;AACA,QAAI;AACAA,MAAAA,IAAI,GAAGd,EAAE,CAACe,QAAH,CAAYT,IAAZ,CAAP;AACH,KAFD,CAGA,OAAOU,GAAP,EAAY;AACRb,MAAAA,QAAQ,CAACc,MAAT,CAAgBC,IAAhB,CAAqBF,GAArB;AACA,YAAM,IAAId,OAAO,CAACK,aAAZ,CAA2B,QAAOD,IAAK,sDAAvC,CAAN;AACH;;AACD,QAAI,CAACQ,IAAI,CAACK,MAAL,EAAL,EAAoB;AAChB,YAAM,IAAIjB,OAAO,CAACK,aAAZ,CAA2B,GAAED,IAAK,oDAAlC,CAAN;AACH;;AACD,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKc,QAAL,GAAgBZ,gBAAhB;AACA,SAAKa,QAAL,GAAgBjB,QAAQ,CAACkB,QAAT,CAAkBhB,IAAlB,CAAhB;AACH;;AACDiB,EAAAA,oBAAoB,GAAG;AACnB,WAAO,KAAKH,QAAZ;AACH;;AACDI,EAAAA,UAAU,GAAG;AACT,WAAOxB,EAAE,CAACyB,gBAAH,CAAoB,KAAKnB,IAAzB,CAAP;AACH;;AACDoB,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKL,QAAZ;AACH;;AAnCc;;AAqCnBzB,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Distribution = exports.DistributionFileType = void 0;\nconst fs = require(\"fs-extra\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst pathUtil = require(\"path\");\nvar DistributionFileType;\n(function (DistributionFileType) {\n    DistributionFileType[\"IPA\"] = \"ipa\";\n    DistributionFileType[\"APK\"] = \"apk\";\n    DistributionFileType[\"AAB\"] = \"aab\";\n})(DistributionFileType = exports.DistributionFileType || (exports.DistributionFileType = {}));\nclass Distribution {\n    constructor(path) {\n        this.path = path;\n        if (!path) {\n            throw new error_1.FirebaseError(\"must specify a release binary file\");\n        }\n        const distributionType = path.split(\".\").pop();\n        if (distributionType !== DistributionFileType.IPA &&\n            distributionType !== DistributionFileType.APK &&\n            distributionType !== DistributionFileType.AAB) {\n            throw new error_1.FirebaseError(\"Unsupported file format, should be .ipa, .apk or .aab\");\n        }\n        let stat;\n        try {\n            stat = fs.statSync(path);\n        }\n        catch (err) {\n            logger_1.logger.info(err);\n            throw new error_1.FirebaseError(`File ${path} does not exist: verify that file points to a binary`);\n        }\n        if (!stat.isFile()) {\n            throw new error_1.FirebaseError(`${path} is not a file. Verify that it points to a binary.`);\n        }\n        this.path = path;\n        this.fileType = distributionType;\n        this.fileName = pathUtil.basename(path);\n    }\n    distributionFileType() {\n        return this.fileType;\n    }\n    readStream() {\n        return fs.createReadStream(this.path);\n    }\n    getFileName() {\n        return this.fileName;\n    }\n}\nexports.Distribution = Distribution;\n"]},"metadata":{},"sourceType":"script"}