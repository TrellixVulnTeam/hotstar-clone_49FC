{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prettySecretName = exports.getSecretLabels = exports.getManagedSecrets = exports.grantFirexServiceAgentSecretAdminRole = exports.usesSecrets = exports.ensureSecretManagerApiEnabled = void 0;\n\nconst getProjectNumber_1 = require(\"../getProjectNumber\");\n\nconst utils = require(\"../utils\");\n\nconst ensureApiEnabled_1 = require(\"../ensureApiEnabled\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst extensionsApi = require(\"./extensionsApi\");\n\nconst secretManagerApi = require(\"../gcp/secretManager\");\n\nconst logger_1 = require(\"../logger\");\n\nconst SECRET_LABEL = \"firebase-extensions-managed\";\n\nasync function ensureSecretManagerApiEnabled(options) {\n  const projectId = projectUtils_1.needProjectId(options);\n  return await ensureApiEnabled_1.ensure(projectId, \"secretmanager.googleapis.com\", \"extensions\", options.markdown);\n}\n\nexports.ensureSecretManagerApiEnabled = ensureSecretManagerApiEnabled;\n\nfunction usesSecrets(spec) {\n  return spec.params && !!spec.params.find(p => p.type == extensionsApi.ParamType.SECRET);\n}\n\nexports.usesSecrets = usesSecrets;\n\nasync function grantFirexServiceAgentSecretAdminRole(secret) {\n  const projectNumber = await getProjectNumber_1.getProjectNumber({\n    projectId: secret.projectId\n  });\n  const firexSaProjectId = utils.envOverride(\"FIREBASE_EXTENSIONS_SA_PROJECT_ID\", \"gcp-sa-firebasemods\");\n  const saEmail = `service-${projectNumber}@${firexSaProjectId}.iam.gserviceaccount.com`;\n  return secretManagerApi.grantServiceAgentRole(secret, saEmail, \"roles/secretmanager.admin\");\n}\n\nexports.grantFirexServiceAgentSecretAdminRole = grantFirexServiceAgentSecretAdminRole;\n\nasync function getManagedSecrets(instance) {\n  return (await Promise.all(getActiveSecrets(instance).map(async secretResourceName => {\n    const secret = secretManagerApi.parseSecretResourceName(secretResourceName);\n    const labels = await secretManagerApi.getSecretLabels(secret.projectId, secret.name);\n\n    if (labels && labels[SECRET_LABEL]) {\n      return secretResourceName;\n    }\n\n    return Promise.resolve(\"\");\n  }))).filter(secretId => !!secretId);\n}\n\nexports.getManagedSecrets = getManagedSecrets;\n\nfunction getActiveSecrets(instance) {\n  return instance.config.source.spec.params.map(p => p.type == extensionsApi.ParamType.SECRET && instance.config.params[p.param]).filter(pv => !!pv);\n}\n\nfunction getSecretLabels(instanceId) {\n  const labels = {};\n  labels[SECRET_LABEL] = instanceId;\n  return labels;\n}\n\nexports.getSecretLabels = getSecretLabels;\n\nfunction prettySecretName(secretResourceName) {\n  const nameTokens = secretResourceName.split(\"/\");\n\n  if (nameTokens.length != 4 && nameTokens.length != 6) {\n    logger_1.logger.debug(`unable to parse secret secretResourceName: ${secretResourceName}`);\n    return secretResourceName;\n  }\n\n  return nameTokens.slice(0, 4).join(\"/\");\n}\n\nexports.prettySecretName = prettySecretName;","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/extensions/secretsUtils.js"],"names":["Object","defineProperty","exports","value","prettySecretName","getSecretLabels","getManagedSecrets","grantFirexServiceAgentSecretAdminRole","usesSecrets","ensureSecretManagerApiEnabled","getProjectNumber_1","require","utils","ensureApiEnabled_1","projectUtils_1","extensionsApi","secretManagerApi","logger_1","SECRET_LABEL","options","projectId","needProjectId","ensure","markdown","spec","params","find","p","type","ParamType","SECRET","secret","projectNumber","getProjectNumber","firexSaProjectId","envOverride","saEmail","grantServiceAgentRole","instance","Promise","all","getActiveSecrets","map","secretResourceName","parseSecretResourceName","labels","name","resolve","filter","secretId","config","source","param","pv","instanceId","nameTokens","split","length","logger","debug","slice","join"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prettySecretName = exports.getSecretLabels = exports.getManagedSecrets = exports.grantFirexServiceAgentSecretAdminRole = exports.usesSecrets = exports.ensureSecretManagerApiEnabled = void 0;\nconst getProjectNumber_1 = require(\"../getProjectNumber\");\nconst utils = require(\"../utils\");\nconst ensureApiEnabled_1 = require(\"../ensureApiEnabled\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst extensionsApi = require(\"./extensionsApi\");\nconst secretManagerApi = require(\"../gcp/secretManager\");\nconst logger_1 = require(\"../logger\");\nconst SECRET_LABEL = \"firebase-extensions-managed\";\nasync function ensureSecretManagerApiEnabled(options) {\n    const projectId = projectUtils_1.needProjectId(options);\n    return await ensureApiEnabled_1.ensure(projectId, \"secretmanager.googleapis.com\", \"extensions\", options.markdown);\n}\nexports.ensureSecretManagerApiEnabled = ensureSecretManagerApiEnabled;\nfunction usesSecrets(spec) {\n    return spec.params && !!spec.params.find((p) => p.type == extensionsApi.ParamType.SECRET);\n}\nexports.usesSecrets = usesSecrets;\nasync function grantFirexServiceAgentSecretAdminRole(secret) {\n    const projectNumber = await getProjectNumber_1.getProjectNumber({ projectId: secret.projectId });\n    const firexSaProjectId = utils.envOverride(\"FIREBASE_EXTENSIONS_SA_PROJECT_ID\", \"gcp-sa-firebasemods\");\n    const saEmail = `service-${projectNumber}@${firexSaProjectId}.iam.gserviceaccount.com`;\n    return secretManagerApi.grantServiceAgentRole(secret, saEmail, \"roles/secretmanager.admin\");\n}\nexports.grantFirexServiceAgentSecretAdminRole = grantFirexServiceAgentSecretAdminRole;\nasync function getManagedSecrets(instance) {\n    return (await Promise.all(getActiveSecrets(instance).map(async (secretResourceName) => {\n        const secret = secretManagerApi.parseSecretResourceName(secretResourceName);\n        const labels = await secretManagerApi.getSecretLabels(secret.projectId, secret.name);\n        if (labels && labels[SECRET_LABEL]) {\n            return secretResourceName;\n        }\n        return Promise.resolve(\"\");\n    }))).filter((secretId) => !!secretId);\n}\nexports.getManagedSecrets = getManagedSecrets;\nfunction getActiveSecrets(instance) {\n    return instance.config.source.spec.params\n        .map((p) => p.type == extensionsApi.ParamType.SECRET && instance.config.params[p.param])\n        .filter((pv) => !!pv);\n}\nfunction getSecretLabels(instanceId) {\n    const labels = {};\n    labels[SECRET_LABEL] = instanceId;\n    return labels;\n}\nexports.getSecretLabels = getSecretLabels;\nfunction prettySecretName(secretResourceName) {\n    const nameTokens = secretResourceName.split(\"/\");\n    if (nameTokens.length != 4 && nameTokens.length != 6) {\n        logger_1.logger.debug(`unable to parse secret secretResourceName: ${secretResourceName}`);\n        return secretResourceName;\n    }\n    return nameTokens.slice(0, 4).join(\"/\");\n}\nexports.prettySecretName = prettySecretName;\n"]},"metadata":{},"sourceType":"script"}