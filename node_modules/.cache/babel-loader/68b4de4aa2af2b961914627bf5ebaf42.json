{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst marked = require(\"marked\");\n\nconst TerminalRenderer = require(\"marked-terminal\");\n\nconst command_1 = require(\"../command\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst refs = require(\"../extensions/refs\");\n\nconst localHelper_1 = require(\"../extensions/localHelper\");\n\nconst publishHelpers_1 = require(\"../extensions/publishHelpers\");\n\nconst requireAuth_1 = require(\"../requireAuth\");\n\nconst error_1 = require(\"../error\");\n\nconst utils = require(\"../utils\");\n\nmarked.setOptions({\n  renderer: new TerminalRenderer()\n});\nexports.default = new command_1.Command(\"ext:dev:publish <extensionRef>\").description(`publish a new version of an extension`).withForce().help(\"if you have not previously published a version of this extension, this will \" + \"create the extension. If you have previously published a version of this extension, this version must \" + \"be greater than previous versions.\").before(requireAuth_1.requireAuth).action(async (extensionRef, options) => {\n  const {\n    publisherId,\n    extensionId,\n    version\n  } = refs.parse(extensionRef);\n\n  if (version) {\n    throw new error_1.FirebaseError(`The input extension reference must be of the format ${clc.bold(\"<publisherId>/<extensionId>\")}. Version should not be supplied and will be inferred directly from extension.yaml. Please increment the version in extension.yaml if you would like to bump/specify a version.`);\n  }\n\n  if (!publisherId || !extensionId) {\n    throw new error_1.FirebaseError(`Error parsing publisher ID and extension ID from extension reference '${clc.bold(extensionRef)}'. Please use the format '${clc.bold(\"<publisherId>/<extensionId>\")}'.`);\n  }\n\n  const extensionYamlDirectory = localHelper_1.findExtensionYaml(process.cwd());\n  const res = await extensionsHelper_1.publishExtensionVersionFromLocalSource({\n    publisherId,\n    extensionId,\n    rootDirectory: extensionYamlDirectory,\n    nonInteractive: options.nonInteractive,\n    force: options.force\n  });\n\n  if (res) {\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(`[Install Link](${publishHelpers_1.consoleInstallLink(res.ref)})`));\n  }\n\n  return res;\n});","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/commands/ext-dev-publish.js"],"names":["Object","defineProperty","exports","value","clc","require","marked","TerminalRenderer","command_1","extensionsHelper_1","refs","localHelper_1","publishHelpers_1","requireAuth_1","error_1","utils","setOptions","renderer","default","Command","description","withForce","help","before","requireAuth","action","extensionRef","options","publisherId","extensionId","version","parse","FirebaseError","bold","extensionYamlDirectory","findExtensionYaml","process","cwd","res","publishExtensionVersionFromLocalSource","rootDirectory","nonInteractive","force","logLabeledBullet","logPrefix","consoleInstallLink","ref"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,iBAAD,CAAhC;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,gCAAD,CAAlC;;AACA,MAAMK,IAAI,GAAGL,OAAO,CAAC,oBAAD,CAApB;;AACA,MAAMM,aAAa,GAAGN,OAAO,CAAC,2BAAD,CAA7B;;AACA,MAAMO,gBAAgB,GAAGP,OAAO,CAAC,8BAAD,CAAhC;;AACA,MAAMQ,aAAa,GAAGR,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAMS,OAAO,GAAGT,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMU,KAAK,GAAGV,OAAO,CAAC,UAAD,CAArB;;AACAC,MAAM,CAACU,UAAP,CAAkB;AACdC,EAAAA,QAAQ,EAAE,IAAIV,gBAAJ;AADI,CAAlB;AAGAL,OAAO,CAACgB,OAAR,GAAkB,IAAIV,SAAS,CAACW,OAAd,CAAsB,gCAAtB,EACbC,WADa,CACA,uCADA,EAEbC,SAFa,GAGbC,IAHa,CAGR,iFACN,wGADM,GAEN,oCALc,EAMbC,MANa,CAMNV,aAAa,CAACW,WANR,EAObC,MAPa,CAON,OAAOC,YAAP,EAAqBC,OAArB,KAAiC;AACzC,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,WAAf;AAA4BC,IAAAA;AAA5B,MAAwCpB,IAAI,CAACqB,KAAL,CAAWL,YAAX,CAA9C;;AACA,MAAII,OAAJ,EAAa;AACT,UAAM,IAAIhB,OAAO,CAACkB,aAAZ,CAA2B,uDAAsD5B,GAAG,CAAC6B,IAAJ,CAAS,6BAAT,CAAwC,iLAAzH,CAAN;AACH;;AACD,MAAI,CAACL,WAAD,IAAgB,CAACC,WAArB,EAAkC;AAC9B,UAAM,IAAIf,OAAO,CAACkB,aAAZ,CAA2B,yEAAwE5B,GAAG,CAAC6B,IAAJ,CAASP,YAAT,CAAuB,6BAA4BtB,GAAG,CAAC6B,IAAJ,CAAS,6BAAT,CAAwC,IAA9L,CAAN;AACH;;AACD,QAAMC,sBAAsB,GAAGvB,aAAa,CAACwB,iBAAd,CAAgCC,OAAO,CAACC,GAAR,EAAhC,CAA/B;AACA,QAAMC,GAAG,GAAG,MAAM7B,kBAAkB,CAAC8B,sCAAnB,CAA0D;AACxEX,IAAAA,WADwE;AAExEC,IAAAA,WAFwE;AAGxEW,IAAAA,aAAa,EAAEN,sBAHyD;AAIxEO,IAAAA,cAAc,EAAEd,OAAO,CAACc,cAJgD;AAKxEC,IAAAA,KAAK,EAAEf,OAAO,CAACe;AALyD,GAA1D,CAAlB;;AAOA,MAAIJ,GAAJ,EAAS;AACLvB,IAAAA,KAAK,CAAC4B,gBAAN,CAAuBlC,kBAAkB,CAACmC,SAA1C,EAAqDtC,MAAM,CAAE,kBAAiBM,gBAAgB,CAACiC,kBAAjB,CAAoCP,GAAG,CAACQ,GAAxC,CAA6C,GAAhE,CAA3D;AACH;;AACD,SAAOR,GAAP;AACH,CA3BiB,CAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst marked = require(\"marked\");\nconst TerminalRenderer = require(\"marked-terminal\");\nconst command_1 = require(\"../command\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst refs = require(\"../extensions/refs\");\nconst localHelper_1 = require(\"../extensions/localHelper\");\nconst publishHelpers_1 = require(\"../extensions/publishHelpers\");\nconst requireAuth_1 = require(\"../requireAuth\");\nconst error_1 = require(\"../error\");\nconst utils = require(\"../utils\");\nmarked.setOptions({\n    renderer: new TerminalRenderer(),\n});\nexports.default = new command_1.Command(\"ext:dev:publish <extensionRef>\")\n    .description(`publish a new version of an extension`)\n    .withForce()\n    .help(\"if you have not previously published a version of this extension, this will \" +\n    \"create the extension. If you have previously published a version of this extension, this version must \" +\n    \"be greater than previous versions.\")\n    .before(requireAuth_1.requireAuth)\n    .action(async (extensionRef, options) => {\n    const { publisherId, extensionId, version } = refs.parse(extensionRef);\n    if (version) {\n        throw new error_1.FirebaseError(`The input extension reference must be of the format ${clc.bold(\"<publisherId>/<extensionId>\")}. Version should not be supplied and will be inferred directly from extension.yaml. Please increment the version in extension.yaml if you would like to bump/specify a version.`);\n    }\n    if (!publisherId || !extensionId) {\n        throw new error_1.FirebaseError(`Error parsing publisher ID and extension ID from extension reference '${clc.bold(extensionRef)}'. Please use the format '${clc.bold(\"<publisherId>/<extensionId>\")}'.`);\n    }\n    const extensionYamlDirectory = localHelper_1.findExtensionYaml(process.cwd());\n    const res = await extensionsHelper_1.publishExtensionVersionFromLocalSource({\n        publisherId,\n        extensionId,\n        rootDirectory: extensionYamlDirectory,\n        nonInteractive: options.nonInteractive,\n        force: options.force,\n    });\n    if (res) {\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(`[Install Link](${publishHelpers_1.consoleInstallLink(res.ref)})`));\n    }\n    return res;\n});\n"]},"metadata":{},"sourceType":"script"}