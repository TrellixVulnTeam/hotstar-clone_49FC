{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ask = exports.getInquirerDefault = exports.askForParam = exports.checkResponse = void 0;\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst marked = require(\"marked\");\n\nconst extensionsApi_1 = require(\"./extensionsApi\");\n\nconst secretManagerApi = require(\"../gcp/secretManager\");\n\nconst secretsUtils = require(\"./secretsUtils\");\n\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\n\nconst utils_1 = require(\"./utils\");\n\nconst logger_1 = require(\"../logger\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst utils = require(\"../utils\");\n\nvar SecretUpdateAction;\n\n(function (SecretUpdateAction) {\n  SecretUpdateAction[SecretUpdateAction[\"LEAVE\"] = 0] = \"LEAVE\";\n  SecretUpdateAction[SecretUpdateAction[\"SET_NEW\"] = 1] = \"SET_NEW\";\n})(SecretUpdateAction || (SecretUpdateAction = {}));\n\nfunction checkResponse(response, spec) {\n  let valid = true;\n  let responses;\n\n  if (spec.required && (response == \"\" || response == undefined)) {\n    utils.logWarning(`Param ${spec.param} is required, but no value was provided.`);\n    return false;\n  }\n\n  if (spec.type === extensionsApi_1.ParamType.MULTISELECT) {\n    responses = response.split(\",\");\n  } else {\n    responses = [response];\n  }\n\n  if (spec.validationRegex && !!response) {\n    const re = new RegExp(spec.validationRegex);\n\n    _.forEach(responses, resp => {\n      if ((spec.required || resp !== \"\") && !re.test(resp)) {\n        const genericWarn = `${resp} is not a valid value for ${spec.param} since it` + ` does not meet the requirements of the regex validation: \"${spec.validationRegex}\"`;\n        utils.logWarning(spec.validationErrorMessage || genericWarn);\n        valid = false;\n      }\n    });\n  }\n\n  if (spec.type && (spec.type === extensionsApi_1.ParamType.MULTISELECT || spec.type === extensionsApi_1.ParamType.SELECT)) {\n    _.forEach(responses, r => {\n      const validChoice = _.some(spec.options, option => {\n        return r === option.value;\n      });\n\n      if (!validChoice) {\n        utils.logWarning(`${r} is not a valid option for ${spec.param}.`);\n        valid = false;\n      }\n    });\n  }\n\n  return valid;\n}\n\nexports.checkResponse = checkResponse;\n\nasync function askForParam(projectId, instanceId, paramSpec, reconfiguring) {\n  let valid = false;\n  let response = \"\";\n  const description = paramSpec.description || \"\";\n  const label = paramSpec.label.trim();\n  logger_1.logger.info(`\\n${clc.bold(label)}${clc.bold(paramSpec.required ? \"\" : \" (Optional)\")}: ${marked(description).trim()}`);\n\n  while (!valid) {\n    switch (paramSpec.type) {\n      case extensionsApi_1.ParamType.SELECT:\n        response = await prompt_1.promptOnce({\n          name: \"input\",\n          type: \"list\",\n          default: () => {\n            if (paramSpec.default) {\n              return getInquirerDefault(_.get(paramSpec, \"options\", []), paramSpec.default);\n            }\n          },\n          message: \"Which option do you want enabled for this parameter? \" + \"Select an option with the arrow keys, and use Enter to confirm your choice. \" + \"You may only select one option.\",\n          choices: utils_1.convertExtensionOptionToLabeledList(paramSpec.options)\n        });\n        break;\n\n      case extensionsApi_1.ParamType.MULTISELECT:\n        response = await utils_1.onceWithJoin({\n          name: \"input\",\n          type: \"checkbox\",\n          default: () => {\n            if (paramSpec.default) {\n              const defaults = paramSpec.default.split(\",\");\n              return defaults.map(def => {\n                return getInquirerDefault(_.get(paramSpec, \"options\", []), def);\n              });\n            }\n          },\n          message: \"Which options do you want enabled for this parameter? \" + \"Press Space to select, then Enter to confirm your choices. \" + \"You may select multiple options.\",\n          choices: utils_1.convertExtensionOptionToLabeledList(paramSpec.options)\n        });\n        break;\n\n      case extensionsApi_1.ParamType.SECRET:\n        response = reconfiguring ? await promptReconfigureSecret(projectId, instanceId, paramSpec) : await promptCreateSecret(projectId, instanceId, paramSpec);\n        break;\n\n      default:\n        response = await prompt_1.promptOnce({\n          name: paramSpec.param,\n          type: \"input\",\n          default: paramSpec.default,\n          message: `Enter a value for ${label}:`\n        });\n    }\n\n    valid = checkResponse(response, paramSpec);\n  }\n\n  return response;\n}\n\nexports.askForParam = askForParam;\n\nasync function promptReconfigureSecret(projectId, instanceId, paramSpec) {\n  const action = await prompt_1.promptOnce({\n    type: \"list\",\n    message: `Choose what you would like to do with this secret:`,\n    choices: [{\n      name: \"Leave unchanged\",\n      value: SecretUpdateAction.LEAVE\n    }, {\n      name: \"Set new value\",\n      value: SecretUpdateAction.SET_NEW\n    }]\n  });\n\n  switch (action) {\n    case SecretUpdateAction.SET_NEW:\n      let secret;\n      let secretName;\n\n      if (paramSpec.default) {\n        secret = secretManagerApi.parseSecretResourceName(paramSpec.default);\n        secretName = secret.name;\n      } else {\n        secretName = await generateSecretName(projectId, instanceId, paramSpec.param);\n      }\n\n      const secretValue = await prompt_1.promptOnce({\n        name: paramSpec.param,\n        type: \"password\",\n        message: `This secret will be stored in Cloud Secret Manager as ${secretName}.\\nEnter new value for ${paramSpec.label.trim()}:`\n      });\n\n      if (!secret) {\n        secret = await secretManagerApi.createSecret(projectId, secretName, secretsUtils.getSecretLabels(instanceId));\n      }\n\n      return addNewSecretVersion(projectId, instanceId, secret, paramSpec, secretValue);\n\n    case SecretUpdateAction.LEAVE:\n    default:\n      return paramSpec.default || \"\";\n  }\n}\n\nasync function promptCreateSecret(projectId, instanceId, paramSpec) {\n  const secretName = await generateSecretName(projectId, instanceId, paramSpec.param);\n  const secretValue = await prompt_1.promptOnce({\n    name: paramSpec.param,\n    type: \"password\",\n    default: paramSpec.default,\n    message: `This secret will be stored in Cloud Secret Manager (https://cloud.google.com/secret-manager/pricing) as ${secretName} and managed by Firebase Extensions (Firebase Extensions Service Agent will be granted Secret Admin role on this secret).\\nEnter a value for ${paramSpec.label.trim()}:`\n  });\n  const secret = await secretManagerApi.createSecret(projectId, secretName, secretsUtils.getSecretLabels(instanceId));\n  return addNewSecretVersion(projectId, instanceId, secret, paramSpec, secretValue);\n}\n\nasync function generateSecretName(projectId, instanceId, paramName) {\n  let secretName = `ext-${instanceId}-${paramName}`;\n\n  while (await secretManagerApi.secretExists(projectId, secretName)) {\n    secretName += `-${utils_1.getRandomString(3)}`;\n  }\n\n  return secretName;\n}\n\nasync function addNewSecretVersion(projectId, instanceId, secret, paramSpec, secretValue) {\n  const version = await secretManagerApi.addVersion(secret, secretValue);\n  await secretsUtils.grantFirexServiceAgentSecretAdminRole(secret);\n  return `projects/${version.secret.projectId}/secrets/${version.secret.name}/versions/${version.versionId}`;\n}\n\nfunction getInquirerDefault(options, def) {\n  const defaultOption = _.find(options, option => {\n    return option.value === def;\n  });\n\n  return defaultOption ? defaultOption.label || defaultOption.value : \"\";\n}\n\nexports.getInquirerDefault = getInquirerDefault;\n\nasync function ask(projectId, instanceId, paramSpecs, firebaseProjectParams, reconfiguring) {\n  if (_.isEmpty(paramSpecs)) {\n    logger_1.logger.debug(\"No params were specified for this extension.\");\n    return {};\n  }\n\n  utils.logLabeledBullet(extensionsHelper_1.logPrefix, \"answer the questions below to configure your extension:\");\n  const substituted = extensionsHelper_1.substituteParams(paramSpecs, firebaseProjectParams);\n  const result = {};\n\n  const promises = _.map(substituted, paramSpec => {\n    return async () => {\n      result[paramSpec.param] = await askForParam(projectId, instanceId, paramSpec, reconfiguring);\n    };\n  });\n\n  await promises.reduce((prev, cur) => prev.then(cur), Promise.resolve());\n  logger_1.logger.info();\n  return result;\n}\n\nexports.ask = ask;","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/extensions/askUserForParam.js"],"names":["Object","defineProperty","exports","value","ask","getInquirerDefault","askForParam","checkResponse","_","require","clc","marked","extensionsApi_1","secretManagerApi","secretsUtils","extensionsHelper_1","utils_1","logger_1","prompt_1","utils","SecretUpdateAction","response","spec","valid","responses","required","undefined","logWarning","param","type","ParamType","MULTISELECT","split","validationRegex","re","RegExp","forEach","resp","test","genericWarn","validationErrorMessage","SELECT","r","validChoice","some","options","option","projectId","instanceId","paramSpec","reconfiguring","description","label","trim","logger","info","bold","promptOnce","name","default","get","message","choices","convertExtensionOptionToLabeledList","onceWithJoin","defaults","map","def","SECRET","promptReconfigureSecret","promptCreateSecret","action","LEAVE","SET_NEW","secret","secretName","parseSecretResourceName","generateSecretName","secretValue","createSecret","getSecretLabels","addNewSecretVersion","paramName","secretExists","getRandomString","version","addVersion","grantFirexServiceAgentSecretAdminRole","versionId","defaultOption","find","paramSpecs","firebaseProjectParams","isEmpty","debug","logLabeledBullet","logPrefix","substituted","substituteParams","result","promises","reduce","prev","cur","then","Promise","resolve"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ask = exports.getInquirerDefault = exports.askForParam = exports.checkResponse = void 0;\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst marked = require(\"marked\");\nconst extensionsApi_1 = require(\"./extensionsApi\");\nconst secretManagerApi = require(\"../gcp/secretManager\");\nconst secretsUtils = require(\"./secretsUtils\");\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\nconst utils_1 = require(\"./utils\");\nconst logger_1 = require(\"../logger\");\nconst prompt_1 = require(\"../prompt\");\nconst utils = require(\"../utils\");\nvar SecretUpdateAction;\n(function (SecretUpdateAction) {\n    SecretUpdateAction[SecretUpdateAction[\"LEAVE\"] = 0] = \"LEAVE\";\n    SecretUpdateAction[SecretUpdateAction[\"SET_NEW\"] = 1] = \"SET_NEW\";\n})(SecretUpdateAction || (SecretUpdateAction = {}));\nfunction checkResponse(response, spec) {\n    let valid = true;\n    let responses;\n    if (spec.required && (response == \"\" || response == undefined)) {\n        utils.logWarning(`Param ${spec.param} is required, but no value was provided.`);\n        return false;\n    }\n    if (spec.type === extensionsApi_1.ParamType.MULTISELECT) {\n        responses = response.split(\",\");\n    }\n    else {\n        responses = [response];\n    }\n    if (spec.validationRegex && !!response) {\n        const re = new RegExp(spec.validationRegex);\n        _.forEach(responses, (resp) => {\n            if ((spec.required || resp !== \"\") && !re.test(resp)) {\n                const genericWarn = `${resp} is not a valid value for ${spec.param} since it` +\n                    ` does not meet the requirements of the regex validation: \"${spec.validationRegex}\"`;\n                utils.logWarning(spec.validationErrorMessage || genericWarn);\n                valid = false;\n            }\n        });\n    }\n    if (spec.type && (spec.type === extensionsApi_1.ParamType.MULTISELECT || spec.type === extensionsApi_1.ParamType.SELECT)) {\n        _.forEach(responses, (r) => {\n            const validChoice = _.some(spec.options, (option) => {\n                return r === option.value;\n            });\n            if (!validChoice) {\n                utils.logWarning(`${r} is not a valid option for ${spec.param}.`);\n                valid = false;\n            }\n        });\n    }\n    return valid;\n}\nexports.checkResponse = checkResponse;\nasync function askForParam(projectId, instanceId, paramSpec, reconfiguring) {\n    let valid = false;\n    let response = \"\";\n    const description = paramSpec.description || \"\";\n    const label = paramSpec.label.trim();\n    logger_1.logger.info(`\\n${clc.bold(label)}${clc.bold(paramSpec.required ? \"\" : \" (Optional)\")}: ${marked(description).trim()}`);\n    while (!valid) {\n        switch (paramSpec.type) {\n            case extensionsApi_1.ParamType.SELECT:\n                response = await prompt_1.promptOnce({\n                    name: \"input\",\n                    type: \"list\",\n                    default: () => {\n                        if (paramSpec.default) {\n                            return getInquirerDefault(_.get(paramSpec, \"options\", []), paramSpec.default);\n                        }\n                    },\n                    message: \"Which option do you want enabled for this parameter? \" +\n                        \"Select an option with the arrow keys, and use Enter to confirm your choice. \" +\n                        \"You may only select one option.\",\n                    choices: utils_1.convertExtensionOptionToLabeledList(paramSpec.options),\n                });\n                break;\n            case extensionsApi_1.ParamType.MULTISELECT:\n                response = await utils_1.onceWithJoin({\n                    name: \"input\",\n                    type: \"checkbox\",\n                    default: () => {\n                        if (paramSpec.default) {\n                            const defaults = paramSpec.default.split(\",\");\n                            return defaults.map((def) => {\n                                return getInquirerDefault(_.get(paramSpec, \"options\", []), def);\n                            });\n                        }\n                    },\n                    message: \"Which options do you want enabled for this parameter? \" +\n                        \"Press Space to select, then Enter to confirm your choices. \" +\n                        \"You may select multiple options.\",\n                    choices: utils_1.convertExtensionOptionToLabeledList(paramSpec.options),\n                });\n                break;\n            case extensionsApi_1.ParamType.SECRET:\n                response = reconfiguring\n                    ? await promptReconfigureSecret(projectId, instanceId, paramSpec)\n                    : await promptCreateSecret(projectId, instanceId, paramSpec);\n                break;\n            default:\n                response = await prompt_1.promptOnce({\n                    name: paramSpec.param,\n                    type: \"input\",\n                    default: paramSpec.default,\n                    message: `Enter a value for ${label}:`,\n                });\n        }\n        valid = checkResponse(response, paramSpec);\n    }\n    return response;\n}\nexports.askForParam = askForParam;\nasync function promptReconfigureSecret(projectId, instanceId, paramSpec) {\n    const action = await prompt_1.promptOnce({\n        type: \"list\",\n        message: `Choose what you would like to do with this secret:`,\n        choices: [\n            { name: \"Leave unchanged\", value: SecretUpdateAction.LEAVE },\n            { name: \"Set new value\", value: SecretUpdateAction.SET_NEW },\n        ],\n    });\n    switch (action) {\n        case SecretUpdateAction.SET_NEW:\n            let secret;\n            let secretName;\n            if (paramSpec.default) {\n                secret = secretManagerApi.parseSecretResourceName(paramSpec.default);\n                secretName = secret.name;\n            }\n            else {\n                secretName = await generateSecretName(projectId, instanceId, paramSpec.param);\n            }\n            const secretValue = await prompt_1.promptOnce({\n                name: paramSpec.param,\n                type: \"password\",\n                message: `This secret will be stored in Cloud Secret Manager as ${secretName}.\\nEnter new value for ${paramSpec.label.trim()}:`,\n            });\n            if (!secret) {\n                secret = await secretManagerApi.createSecret(projectId, secretName, secretsUtils.getSecretLabels(instanceId));\n            }\n            return addNewSecretVersion(projectId, instanceId, secret, paramSpec, secretValue);\n        case SecretUpdateAction.LEAVE:\n        default:\n            return paramSpec.default || \"\";\n    }\n}\nasync function promptCreateSecret(projectId, instanceId, paramSpec) {\n    const secretName = await generateSecretName(projectId, instanceId, paramSpec.param);\n    const secretValue = await prompt_1.promptOnce({\n        name: paramSpec.param,\n        type: \"password\",\n        default: paramSpec.default,\n        message: `This secret will be stored in Cloud Secret Manager (https://cloud.google.com/secret-manager/pricing) as ${secretName} and managed by Firebase Extensions (Firebase Extensions Service Agent will be granted Secret Admin role on this secret).\\nEnter a value for ${paramSpec.label.trim()}:`,\n    });\n    const secret = await secretManagerApi.createSecret(projectId, secretName, secretsUtils.getSecretLabels(instanceId));\n    return addNewSecretVersion(projectId, instanceId, secret, paramSpec, secretValue);\n}\nasync function generateSecretName(projectId, instanceId, paramName) {\n    let secretName = `ext-${instanceId}-${paramName}`;\n    while (await secretManagerApi.secretExists(projectId, secretName)) {\n        secretName += `-${utils_1.getRandomString(3)}`;\n    }\n    return secretName;\n}\nasync function addNewSecretVersion(projectId, instanceId, secret, paramSpec, secretValue) {\n    const version = await secretManagerApi.addVersion(secret, secretValue);\n    await secretsUtils.grantFirexServiceAgentSecretAdminRole(secret);\n    return `projects/${version.secret.projectId}/secrets/${version.secret.name}/versions/${version.versionId}`;\n}\nfunction getInquirerDefault(options, def) {\n    const defaultOption = _.find(options, (option) => {\n        return option.value === def;\n    });\n    return defaultOption ? defaultOption.label || defaultOption.value : \"\";\n}\nexports.getInquirerDefault = getInquirerDefault;\nasync function ask(projectId, instanceId, paramSpecs, firebaseProjectParams, reconfiguring) {\n    if (_.isEmpty(paramSpecs)) {\n        logger_1.logger.debug(\"No params were specified for this extension.\");\n        return {};\n    }\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, \"answer the questions below to configure your extension:\");\n    const substituted = extensionsHelper_1.substituteParams(paramSpecs, firebaseProjectParams);\n    const result = {};\n    const promises = _.map(substituted, (paramSpec) => {\n        return async () => {\n            result[paramSpec.param] = await askForParam(projectId, instanceId, paramSpec, reconfiguring);\n        };\n    });\n    await promises.reduce((prev, cur) => prev.then(cur), Promise.resolve());\n    logger_1.logger.info();\n    return result;\n}\nexports.ask = ask;\n"]},"metadata":{},"sourceType":"script"}