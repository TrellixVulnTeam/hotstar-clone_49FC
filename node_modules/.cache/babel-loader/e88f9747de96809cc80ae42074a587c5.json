{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StorageCloudFunctions = void 0;\n\nconst registry_1 = require(\"../registry\");\n\nconst types_1 = require(\"../types\");\n\nconst emulatorLogger_1 = require(\"../emulatorLogger\");\n\nconst metadata_1 = require(\"./metadata\");\n\nconst apiv2_1 = require(\"../../apiv2\");\n\nconst STORAGE_V2_ACTION_MAP = {\n  finalize: \"finalized\",\n  metadataUpdate: \"metadataUpdated\",\n  delete: \"deleted\",\n  archive: \"archived\"\n};\n\nclass StorageCloudFunctions {\n  constructor(projectId) {\n    this.projectId = projectId;\n    this.logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE);\n    this.multicastOrigin = \"\";\n    this.multicastPath = \"\";\n    this.enabled = false;\n    const functionsEmulator = registry_1.EmulatorRegistry.get(types_1.Emulators.FUNCTIONS);\n\n    if (functionsEmulator) {\n      this.enabled = true;\n      this.functionsEmulatorInfo = functionsEmulator.getInfo();\n      this.multicastOrigin = `http://${registry_1.EmulatorRegistry.getInfoHostString(this.functionsEmulatorInfo)}`;\n      this.multicastPath = `/functions/projects/${projectId}/trigger_multicast`;\n      this.client = new apiv2_1.Client({\n        urlPrefix: this.multicastOrigin,\n        auth: false\n      });\n    }\n  }\n\n  async dispatch(action, object) {\n    if (!this.enabled) {\n      return;\n    }\n\n    const errStatus = [];\n    let err;\n\n    try {\n      const eventBody = this.createLegacyEventRequestBody(action, object);\n      const eventRes = await this.client.post(this.multicastPath, eventBody);\n\n      if (eventRes.status !== 200) {\n        errStatus.push(eventRes.status);\n      }\n\n      const cloudEventBody = this.createCloudEventRequestBody(action, object);\n      const cloudEventRes = await this.client.post(this.multicastPath, cloudEventBody, {\n        headers: {\n          \"Content-Type\": \"application/cloudevents+json; charset=UTF-8\"\n        }\n      });\n\n      if (cloudEventRes.status !== 200) {\n        errStatus.push(cloudEventRes.status);\n      }\n    } catch (e) {\n      err = e;\n    }\n\n    if (err || errStatus.length > 0) {\n      this.logger.logLabeled(\"WARN\", \"functions\", `Firebase Storage function was not triggered due to emulation error. Please file a bug.`);\n    }\n  }\n\n  createLegacyEventRequestBody(action, objectMetadataPayload) {\n    const timestamp = new Date();\n    return JSON.stringify({\n      eventId: `${timestamp.getTime()}`,\n      timestamp: metadata_1.toSerializedDate(timestamp),\n      eventType: `google.storage.object.${action}`,\n      resource: {\n        service: \"storage.googleapis.com\",\n        name: `projects/_/buckets/${objectMetadataPayload.bucket}/objects/${objectMetadataPayload.name}`,\n        type: \"storage#object\"\n      },\n      data: objectMetadataPayload\n    });\n  }\n\n  createCloudEventRequestBody(action, objectMetadataPayload) {\n    const ceAction = STORAGE_V2_ACTION_MAP[action];\n\n    if (!ceAction) {\n      throw new Error(\"Action is not definied as a CloudEvents action\");\n    }\n\n    const data = objectMetadataPayload;\n    return JSON.stringify({\n      specVersion: 1,\n      type: `google.cloud.storage.object.v1.${ceAction}`,\n      source: `//storage.googleapis.com/projects/_/buckets/${objectMetadataPayload.bucket}/objects/${objectMetadataPayload.name}`,\n      data\n    });\n  }\n\n}\n\nexports.StorageCloudFunctions = StorageCloudFunctions;","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/emulator/storage/cloudFunctions.js"],"names":["Object","defineProperty","exports","value","StorageCloudFunctions","registry_1","require","types_1","emulatorLogger_1","metadata_1","apiv2_1","STORAGE_V2_ACTION_MAP","finalize","metadataUpdate","delete","archive","constructor","projectId","logger","EmulatorLogger","forEmulator","Emulators","STORAGE","multicastOrigin","multicastPath","enabled","functionsEmulator","EmulatorRegistry","get","FUNCTIONS","functionsEmulatorInfo","getInfo","getInfoHostString","client","Client","urlPrefix","auth","dispatch","action","object","errStatus","err","eventBody","createLegacyEventRequestBody","eventRes","post","status","push","cloudEventBody","createCloudEventRequestBody","cloudEventRes","headers","e","length","logLabeled","objectMetadataPayload","timestamp","Date","JSON","stringify","eventId","getTime","toSerializedDate","eventType","resource","service","name","bucket","type","data","ceAction","Error","specVersion","source"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qBAAR,GAAgC,KAAK,CAArC;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,mBAAD,CAAhC;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMK,qBAAqB,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,WADgB;AAE1BC,EAAAA,cAAc,EAAE,iBAFU;AAG1BC,EAAAA,MAAM,EAAE,SAHkB;AAI1BC,EAAAA,OAAO,EAAE;AAJiB,CAA9B;;AAMA,MAAMX,qBAAN,CAA4B;AACxBY,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAcV,gBAAgB,CAACW,cAAjB,CAAgCC,WAAhC,CAA4Cb,OAAO,CAACc,SAAR,CAAkBC,OAA9D,CAAd;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,OAAL,GAAe,KAAf;AACA,UAAMC,iBAAiB,GAAGrB,UAAU,CAACsB,gBAAX,CAA4BC,GAA5B,CAAgCrB,OAAO,CAACc,SAAR,CAAkBQ,SAAlD,CAA1B;;AACA,QAAIH,iBAAJ,EAAuB;AACnB,WAAKD,OAAL,GAAe,IAAf;AACA,WAAKK,qBAAL,GAA6BJ,iBAAiB,CAACK,OAAlB,EAA7B;AACA,WAAKR,eAAL,GAAwB,UAASlB,UAAU,CAACsB,gBAAX,CAA4BK,iBAA5B,CAA8C,KAAKF,qBAAnD,CAA0E,EAA3G;AACA,WAAKN,aAAL,GAAsB,uBAAsBP,SAAU,oBAAtD;AACA,WAAKgB,MAAL,GAAc,IAAIvB,OAAO,CAACwB,MAAZ,CAAmB;AAAEC,QAAAA,SAAS,EAAE,KAAKZ,eAAlB;AAAmCa,QAAAA,IAAI,EAAE;AAAzC,OAAnB,CAAd;AACH;AACJ;;AACa,QAARC,QAAQ,CAACC,MAAD,EAASC,MAAT,EAAiB;AAC3B,QAAI,CAAC,KAAKd,OAAV,EAAmB;AACf;AACH;;AACD,UAAMe,SAAS,GAAG,EAAlB;AACA,QAAIC,GAAJ;;AACA,QAAI;AACA,YAAMC,SAAS,GAAG,KAAKC,4BAAL,CAAkCL,MAAlC,EAA0CC,MAA1C,CAAlB;AACA,YAAMK,QAAQ,GAAG,MAAM,KAAKX,MAAL,CAAYY,IAAZ,CAAiB,KAAKrB,aAAtB,EAAqCkB,SAArC,CAAvB;;AACA,UAAIE,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzBN,QAAAA,SAAS,CAACO,IAAV,CAAeH,QAAQ,CAACE,MAAxB;AACH;;AACD,YAAME,cAAc,GAAG,KAAKC,2BAAL,CAAiCX,MAAjC,EAAyCC,MAAzC,CAAvB;AACA,YAAMW,aAAa,GAAG,MAAM,KAAKjB,MAAL,CAAYY,IAAZ,CAAiB,KAAKrB,aAAtB,EAAqCwB,cAArC,EAAqD;AAC7EG,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AADoE,OAArD,CAA5B;;AAGA,UAAID,aAAa,CAACJ,MAAd,KAAyB,GAA7B,EAAkC;AAC9BN,QAAAA,SAAS,CAACO,IAAV,CAAeG,aAAa,CAACJ,MAA7B;AACH;AACJ,KAbD,CAcA,OAAOM,CAAP,EAAU;AACNX,MAAAA,GAAG,GAAGW,CAAN;AACH;;AACD,QAAIX,GAAG,IAAID,SAAS,CAACa,MAAV,GAAmB,CAA9B,EAAiC;AAC7B,WAAKnC,MAAL,CAAYoC,UAAZ,CAAuB,MAAvB,EAA+B,WAA/B,EAA6C,wFAA7C;AACH;AACJ;;AACDX,EAAAA,4BAA4B,CAACL,MAAD,EAASiB,qBAAT,EAAgC;AACxD,UAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB;AACA,WAAOC,IAAI,CAACC,SAAL,CAAe;AAClBC,MAAAA,OAAO,EAAG,GAAEJ,SAAS,CAACK,OAAV,EAAoB,EADd;AAElBL,MAAAA,SAAS,EAAE/C,UAAU,CAACqD,gBAAX,CAA4BN,SAA5B,CAFO;AAGlBO,MAAAA,SAAS,EAAG,yBAAwBzB,MAAO,EAHzB;AAIlB0B,MAAAA,QAAQ,EAAE;AACNC,QAAAA,OAAO,EAAE,wBADH;AAENC,QAAAA,IAAI,EAAG,sBAAqBX,qBAAqB,CAACY,MAAO,YAAWZ,qBAAqB,CAACW,IAAK,EAFzF;AAGNE,QAAAA,IAAI,EAAE;AAHA,OAJQ;AASlBC,MAAAA,IAAI,EAAEd;AATY,KAAf,CAAP;AAWH;;AACDN,EAAAA,2BAA2B,CAACX,MAAD,EAASiB,qBAAT,EAAgC;AACvD,UAAMe,QAAQ,GAAG3D,qBAAqB,CAAC2B,MAAD,CAAtC;;AACA,QAAI,CAACgC,QAAL,EAAe;AACX,YAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACH;;AACD,UAAMF,IAAI,GAAGd,qBAAb;AACA,WAAOG,IAAI,CAACC,SAAL,CAAe;AAClBa,MAAAA,WAAW,EAAE,CADK;AAElBJ,MAAAA,IAAI,EAAG,kCAAiCE,QAAS,EAF/B;AAGlBG,MAAAA,MAAM,EAAG,+CAA8ClB,qBAAqB,CAACY,MAAO,YAAWZ,qBAAqB,CAACW,IAAK,EAHxG;AAIlBG,MAAAA;AAJkB,KAAf,CAAP;AAMH;;AArEuB;;AAuE5BnE,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StorageCloudFunctions = void 0;\nconst registry_1 = require(\"../registry\");\nconst types_1 = require(\"../types\");\nconst emulatorLogger_1 = require(\"../emulatorLogger\");\nconst metadata_1 = require(\"./metadata\");\nconst apiv2_1 = require(\"../../apiv2\");\nconst STORAGE_V2_ACTION_MAP = {\n    finalize: \"finalized\",\n    metadataUpdate: \"metadataUpdated\",\n    delete: \"deleted\",\n    archive: \"archived\",\n};\nclass StorageCloudFunctions {\n    constructor(projectId) {\n        this.projectId = projectId;\n        this.logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE);\n        this.multicastOrigin = \"\";\n        this.multicastPath = \"\";\n        this.enabled = false;\n        const functionsEmulator = registry_1.EmulatorRegistry.get(types_1.Emulators.FUNCTIONS);\n        if (functionsEmulator) {\n            this.enabled = true;\n            this.functionsEmulatorInfo = functionsEmulator.getInfo();\n            this.multicastOrigin = `http://${registry_1.EmulatorRegistry.getInfoHostString(this.functionsEmulatorInfo)}`;\n            this.multicastPath = `/functions/projects/${projectId}/trigger_multicast`;\n            this.client = new apiv2_1.Client({ urlPrefix: this.multicastOrigin, auth: false });\n        }\n    }\n    async dispatch(action, object) {\n        if (!this.enabled) {\n            return;\n        }\n        const errStatus = [];\n        let err;\n        try {\n            const eventBody = this.createLegacyEventRequestBody(action, object);\n            const eventRes = await this.client.post(this.multicastPath, eventBody);\n            if (eventRes.status !== 200) {\n                errStatus.push(eventRes.status);\n            }\n            const cloudEventBody = this.createCloudEventRequestBody(action, object);\n            const cloudEventRes = await this.client.post(this.multicastPath, cloudEventBody, {\n                headers: { \"Content-Type\": \"application/cloudevents+json; charset=UTF-8\" },\n            });\n            if (cloudEventRes.status !== 200) {\n                errStatus.push(cloudEventRes.status);\n            }\n        }\n        catch (e) {\n            err = e;\n        }\n        if (err || errStatus.length > 0) {\n            this.logger.logLabeled(\"WARN\", \"functions\", `Firebase Storage function was not triggered due to emulation error. Please file a bug.`);\n        }\n    }\n    createLegacyEventRequestBody(action, objectMetadataPayload) {\n        const timestamp = new Date();\n        return JSON.stringify({\n            eventId: `${timestamp.getTime()}`,\n            timestamp: metadata_1.toSerializedDate(timestamp),\n            eventType: `google.storage.object.${action}`,\n            resource: {\n                service: \"storage.googleapis.com\",\n                name: `projects/_/buckets/${objectMetadataPayload.bucket}/objects/${objectMetadataPayload.name}`,\n                type: \"storage#object\",\n            },\n            data: objectMetadataPayload,\n        });\n    }\n    createCloudEventRequestBody(action, objectMetadataPayload) {\n        const ceAction = STORAGE_V2_ACTION_MAP[action];\n        if (!ceAction) {\n            throw new Error(\"Action is not definied as a CloudEvents action\");\n        }\n        const data = objectMetadataPayload;\n        return JSON.stringify({\n            specVersion: 1,\n            type: `google.cloud.storage.object.v1.${ceAction}`,\n            source: `//storage.googleapis.com/projects/_/buckets/${objectMetadataPayload.bucket}/objects/${objectMetadataPayload.name}`,\n            data,\n        });\n    }\n}\nexports.StorageCloudFunctions = StorageCloudFunctions;\n"]},"metadata":{},"sourceType":"script"}