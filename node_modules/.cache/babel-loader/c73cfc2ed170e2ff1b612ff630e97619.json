{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst opn = require(\"open\");\n\nconst qs = require(\"querystring\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst cloudlogging = require(\"../gcp/cloudlogging\");\n\nconst functionsLog = require(\"../functions/functionslog\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nmodule.exports = new command_1.Command(\"functions:log\").description(\"read logs from deployed functions\").option(\"--only <function_names>\", 'only show logs of specified, comma-seperated functions (e.g. \"funcA,funcB\")').option(\"-n, --lines <num_lines>\", \"specify number of log lines to fetch\").option(\"--open\", \"open logs page in web browser\").before(requirePermissions_1.requirePermissions, [\"logging.logEntries.list\", \"logging.logs.list\"]).action(async options => {\n  try {\n    const projectId = projectUtils_1.needProjectId(options);\n    const apiFilter = functionsLog.getApiFilter(options.only);\n\n    if (options.open) {\n      const url = `https://console.developers.google.com/logs/viewer?advancedFilter=${qs.escape(apiFilter)}&project=${projectId}`;\n      opn(url);\n      return;\n    }\n\n    const entries = await cloudlogging.listEntries(projectId, apiFilter, options.lines || 35, \"desc\");\n    functionsLog.logEntries(entries);\n    return entries;\n  } catch (err) {\n    throw new error_1.FirebaseError(`Failed to list log entries ${err.message}`, {\n      exit: 1\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/commands/functions-log.js"],"names":["Object","defineProperty","exports","value","opn","require","qs","command_1","error_1","cloudlogging","functionsLog","projectUtils_1","requirePermissions_1","module","Command","description","option","before","requirePermissions","action","options","projectId","needProjectId","apiFilter","getApiFilter","only","open","url","escape","entries","listEntries","lines","logEntries","err","FirebaseError","message","exit"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,aAAD,CAAlB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,qBAAD,CAA5B;;AACA,MAAMK,YAAY,GAAGL,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAMM,cAAc,GAAGN,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMO,oBAAoB,GAAGP,OAAO,CAAC,uBAAD,CAApC;;AACAQ,MAAM,CAACX,OAAP,GAAiB,IAAIK,SAAS,CAACO,OAAd,CAAsB,eAAtB,EACZC,WADY,CACA,mCADA,EAEZC,MAFY,CAEL,yBAFK,EAEsB,6EAFtB,EAGZA,MAHY,CAGL,yBAHK,EAGsB,sCAHtB,EAIZA,MAJY,CAIL,QAJK,EAIK,+BAJL,EAKZC,MALY,CAKLL,oBAAoB,CAACM,kBALhB,EAKoC,CAAC,yBAAD,EAA4B,mBAA5B,CALpC,EAMZC,MANY,CAML,MAAOC,OAAP,IAAmB;AAC3B,MAAI;AACA,UAAMC,SAAS,GAAGV,cAAc,CAACW,aAAf,CAA6BF,OAA7B,CAAlB;AACA,UAAMG,SAAS,GAAGb,YAAY,CAACc,YAAb,CAA0BJ,OAAO,CAACK,IAAlC,CAAlB;;AACA,QAAIL,OAAO,CAACM,IAAZ,EAAkB;AACd,YAAMC,GAAG,GAAI,oEAAmErB,EAAE,CAACsB,MAAH,CAAUL,SAAV,CAAqB,YAAWF,SAAU,EAA1H;AACAjB,MAAAA,GAAG,CAACuB,GAAD,CAAH;AACA;AACH;;AACD,UAAME,OAAO,GAAG,MAAMpB,YAAY,CAACqB,WAAb,CAAyBT,SAAzB,EAAoCE,SAApC,EAA+CH,OAAO,CAACW,KAAR,IAAiB,EAAhE,EAAoE,MAApE,CAAtB;AACArB,IAAAA,YAAY,CAACsB,UAAb,CAAwBH,OAAxB;AACA,WAAOA,OAAP;AACH,GAXD,CAYA,OAAOI,GAAP,EAAY;AACR,UAAM,IAAIzB,OAAO,CAAC0B,aAAZ,CAA2B,8BAA6BD,GAAG,CAACE,OAAQ,EAApE,EAAuE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAvE,CAAN;AACH;AACJ,CAtBgB,CAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst opn = require(\"open\");\nconst qs = require(\"querystring\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst cloudlogging = require(\"../gcp/cloudlogging\");\nconst functionsLog = require(\"../functions/functionslog\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nmodule.exports = new command_1.Command(\"functions:log\")\n    .description(\"read logs from deployed functions\")\n    .option(\"--only <function_names>\", 'only show logs of specified, comma-seperated functions (e.g. \"funcA,funcB\")')\n    .option(\"-n, --lines <num_lines>\", \"specify number of log lines to fetch\")\n    .option(\"--open\", \"open logs page in web browser\")\n    .before(requirePermissions_1.requirePermissions, [\"logging.logEntries.list\", \"logging.logs.list\"])\n    .action(async (options) => {\n    try {\n        const projectId = projectUtils_1.needProjectId(options);\n        const apiFilter = functionsLog.getApiFilter(options.only);\n        if (options.open) {\n            const url = `https://console.developers.google.com/logs/viewer?advancedFilter=${qs.escape(apiFilter)}&project=${projectId}`;\n            opn(url);\n            return;\n        }\n        const entries = await cloudlogging.listEntries(projectId, apiFilter, options.lines || 35, \"desc\");\n        functionsLog.logEntries(entries);\n        return entries;\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(`Failed to list log entries ${err.message}`, { exit: 1 });\n    }\n});\n"]},"metadata":{},"sourceType":"script"}