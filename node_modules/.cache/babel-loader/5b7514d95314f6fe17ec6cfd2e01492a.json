{"ast":null,"code":"/* eslint-disable global-require, no-use-before-define */\n'use strict';\n/**\n * This callback will be called to transform a script to JavaScript.\n *\n * @callback compileCallback\n * @param {string} code - Script code to transform to JavaScript.\n * @param {string} filename - Filename of this script.\n * @return {string} JavaScript code that represents the script code.\n */\n\n/**\n * This callback will be called to resolve a module if it couldn't be found.\n *\n * @callback resolveCallback\n * @param {string} moduleName - Name of the module to resolve.\n * @param {string} dirname - Name of the current directory.\n * @return {(string|undefined)} The file or directory to use to load the requested module.\n */\n\nconst fs = require('fs');\n\nconst vm = require('vm');\n\nconst pa = require('path');\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst {\n  INSPECT_MAX_BYTES\n} = require('buffer');\n\nconst helpers = require('./helpers.js');\n\nconst importModuleDynamically = () => {\n  // We can't throw an error object here because since vm.Script doesn't store a context, we can't properly contextify that error object.\n  // eslint-disable-next-line no-throw-literal\n  throw 'Dynamic imports are not allowed.';\n};\n\nconst MODULE_PREFIX = '(function (exports, require, module, __filename, __dirname) { ';\nconst STRICT_MODULE_PREFIX = MODULE_PREFIX + '\"use strict\"; ';\nconst MODULE_SUFFIX = '\\n});';\n/**\n * Load a script from a file and compile it.\n * \n * @private\n * @param {string} filename - File to load and compile to a script.\n * @param {string} prefix - Prefix for the script.\n * @param {string} suffix - Suffix for the script.\n * @return {vm.Script} The compiled script.\n */\n\nfunction loadAndCompileScript(filename, prefix, suffix) {\n  const data = fs.readFileSync(filename, 'utf8');\n  return new vm.Script(prefix + data + suffix, {\n    filename,\n    displayErrors: false,\n    importModuleDynamically\n  });\n}\n/**\n * Cache where we can cache some things\n * \n * @private\n * @property {?compileCallback} coffeeScriptCompiler - The coffee script compiler or null if not yet used.\n * @property {?Object} timeoutContext - The context used for the timeout functionality of null if not yet used.\n * @property {?vm.Script} timeoutScript - The compiled script used for the timeout functionality of null if not yet used.\n * @property {vm.Script} contextifyScript - The compiled script used to setup a sandbox.\n * @property {?vm.Script} sandboxScript - The compiled script used to setup the NodeVM require mechanism of null if not yet used.\n * @property {?vm.Script} hookScript - The compiled script used to setup the async hooking functionality.\n * @property {?vm.Script} getGlobalScript - The compiled script used to get the global sandbox object.\n * @property {?vm.Script} getGeneratorFunctionScript - The compiled script used to get the generator function constructor.\n * @property {?vm.Script} getAsyncFunctionScript - The compiled script used to get the async function constructor.\n * @property {?vm.Script} getAsyncGeneratorFunctionScript - The compiled script used to get the async generator function constructor.\n */\n\n\nconst CACHE = {\n  coffeeScriptCompiler: null,\n  timeoutContext: null,\n  timeoutScript: null,\n  contextifyScript: loadAndCompileScript(`${__dirname}/contextify.js`, '(function(require, host) { ', '\\n})'),\n  sandboxScript: null,\n  hookScript: null,\n  getGlobalScript: null,\n  getGeneratorFunctionScript: null,\n  getAsyncFunctionScript: null,\n  getAsyncGeneratorFunctionScript: null\n};\n/**\n * Default run options for vm.Script.runInContext\n * \n * @private\n */\n\nconst DEFAULT_RUN_OPTIONS = {\n  displayErrors: false,\n  importModuleDynamically\n};\n/**\n * Returns the cached coffee script compiler or loads it\n * if it is not found in the cache.\n * \n * @private\n * @return {compileCallback} The coffee script compiler.\n * @throws {VMError} If the coffee-script module can't be found.\n */\n\nfunction getCoffeeScriptCompiler() {\n  if (!CACHE.coffeeScriptCompiler) {\n    try {\n      const coffeeScript = require('coffee-script');\n\n      CACHE.coffeeScriptCompiler = (code, filename) => {\n        return coffeeScript.compile(code, {\n          header: false,\n          bare: true\n        });\n      };\n    } catch (e) {\n      throw new VMError('Coffee-Script compiler is not installed.');\n    }\n  }\n\n  return CACHE.coffeeScriptCompiler;\n}\n/**\n * The JavaScript compiler, just a identity function.\n * \n * @private\n * @type {compileCallback}\n * @param {string} code - The JavaScript code.\n * @param {string} filename - Filename of this script.\n * @return {string} The code.\n */\n\n\nfunction jsCompiler(code, filename) {\n  return removeShebang(code);\n}\n/**\n * Look up the compiler for a specific name.\n * \n * @private\n * @param {(string|compileCallback)} compiler - A compile callback or the name of the compiler.\n * @return {compileCallback} The resolved compiler.\n * @throws {VMError} If the compiler is unknown or the coffee script module was needed and couldn't be found.\n */\n\n\nfunction lookupCompiler(compiler) {\n  if ('function' === typeof compiler) return compiler;\n\n  switch (compiler) {\n    case 'coffeescript':\n    case 'coffee-script':\n    case 'cs':\n    case 'text/coffeescript':\n      return getCoffeeScriptCompiler();\n\n    case 'javascript':\n    case 'java-script':\n    case 'js':\n    case 'text/javascript':\n      return jsCompiler;\n\n    default:\n      throw new VMError(`Unsupported compiler '${compiler}'.`);\n  }\n}\n/**\n * Remove the shebang from source code.\n * \n * @private\n * @param {string} code - Code from which to remove the shebang.\n * @return {string} code without the shebang.\n */\n\n\nfunction removeShebang(code) {\n  if (!code.startsWith('#!')) return code;\n  return '//' + code.substr(2);\n}\n/**\n * Class Script\n *\n * @public\n */\n\n\nclass VMScript {\n  /**\n   * The script code with wrapping. If set will invalidate the cache.<br>\n   * Writable only for backwards compatibility.\n   * \n   * @public\n   * @readonly\n   * @member {string} code\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The filename used for this script.\n   * \n   * @public\n   * @readonly\n   * @since v3.9.0\n   * @member {string} filename\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The line offset use for stack traces.\n   * \n   * @public\n   * @readonly\n   * @since v3.9.0\n   * @member {number} lineOffset\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The column offset use for stack traces.\n   * \n   * @public\n   * @readonly\n   * @since v3.9.0\n   * @member {number} columnOffset\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The compiler to use to get the JavaScript code.\n   * \n   * @public\n   * @readonly\n   * @since v3.9.0\n   * @member {(string|compileCallback)} compiler\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The prefix for the script.\n   * \n   * @private\n   * @member {string} _prefix\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The suffix for the script.\n   * \n   * @private\n   * @member {string} _suffix\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The compiled vm.Script for the VM or if not compiled <code>null</code>.\n   * \n   * @private\n   * @member {?vm.Script} _compiledVM\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The compiled vm.Script for the NodeVM or if not compiled <code>null</code>.\n   * \n   * @private\n   * @member {?vm.Script} _compiledNodeVM\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The compiled vm.Script for the NodeVM in strict mode or if not compiled <code>null</code>.\n   * \n   * @private\n   * @member {?vm.Script} _compiledNodeVMStrict\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The resolved compiler to use to get the JavaScript code.\n   * \n   * @private\n   * @readonly\n   * @member {compileCallback} _compiler\n   * @memberOf VMScript#\n   */\n\n  /**\n   * The script to run without wrapping.\n   * \n   * @private\n   * @member {string} _code\n   * @memberOf VMScript#\n   */\n\n  /**\n   * Create VMScript instance.\n   *\n   * @public\n   * @param {string} code - Code to run.\n   * @param {(string|Object)} [options] - Options map or filename.\n   * @param {string} [options.filename=\"vm.js\"] - Filename that shows up in any stack traces produced from this script.\n   * @param {number} [options.lineOffset=0] - Passed to vm.Script options.\n   * @param {number} [options.columnOffset=0] - Passed to vm.Script options.\n   * @param {(string|compileCallback)} [options.compiler=\"javascript\"] - The compiler to use.\n   * @throws {VMError} If the compiler is unknown or if coffee-script was requested but the module not found.\n   */\n  constructor(code, options) {\n    const sCode = `${code}`;\n    let useFileName;\n    let useOptions;\n\n    if (arguments.length === 2) {\n      if (typeof options === 'object' && options.toString === Object.prototype.toString) {\n        useOptions = options || {};\n        useFileName = useOptions.filename;\n      } else {\n        useOptions = {};\n        useFileName = options;\n      }\n    } else if (arguments.length > 2) {\n      // We do it this way so that there are no more arguments in the function.\n      // eslint-disable-next-line prefer-rest-params\n      useOptions = arguments[2] || {};\n      useFileName = options || useOptions.filename;\n    } else {\n      useOptions = {};\n    }\n\n    const {\n      compiler = 'javascript',\n      lineOffset = 0,\n      columnOffset = 0\n    } = useOptions; // Throw if the compiler is unknown.\n\n    const resolvedCompiler = lookupCompiler(compiler);\n    Object.defineProperties(this, {\n      code: {\n        // Put this here so that it is enumerable, and looks like a property.\n        get() {\n          return this._prefix + this._code + this._suffix;\n        },\n\n        set(value) {\n          const strNewCode = String(value);\n          if (strNewCode === this._code && this._prefix === '' && this._suffix === '') return;\n          this._code = strNewCode;\n          this._prefix = '';\n          this._suffix = '';\n          this._compiledVM = null;\n          this._compiledNodeVM = null;\n          this._compiledCode = null;\n        },\n\n        enumerable: true\n      },\n      filename: {\n        value: useFileName || 'vm.js',\n        enumerable: true\n      },\n      lineOffset: {\n        value: lineOffset,\n        enumerable: true\n      },\n      columnOffset: {\n        value: columnOffset,\n        enumerable: true\n      },\n      compiler: {\n        value: compiler,\n        enumerable: true\n      },\n      _code: {\n        value: sCode,\n        writable: true\n      },\n      _prefix: {\n        value: '',\n        writable: true\n      },\n      _suffix: {\n        value: '',\n        writable: true\n      },\n      _compiledVM: {\n        value: null,\n        writable: true\n      },\n      _compiledNodeVM: {\n        value: null,\n        writable: true\n      },\n      _compiledNodeVMStrict: {\n        value: null,\n        writable: true\n      },\n      _compiledCode: {\n        value: null,\n        writable: true\n      },\n      _compiler: {\n        value: resolvedCompiler\n      }\n    });\n  }\n  /**\n   * Wraps the code.<br>\n   * This will replace the old wrapping.<br>\n   * Will invalidate the code cache.\n   *\n   * @public\n   * @deprecated Since v3.9.0. Wrap your code before passing it into the VMScript object.\n   * @param {string} prefix - String that will be appended before the script code.\n   * @param {script} suffix - String that will be appended behind the script code.\n   * @return {this} This for chaining.\n   * @throws {TypeError} If prefix or suffix is a Symbol.\n   */\n\n\n  wrap(prefix, suffix) {\n    const strPrefix = `${prefix}`;\n    const strSuffix = `${suffix}`;\n    if (this._prefix === strPrefix && this._suffix === strSuffix) return this;\n    this._prefix = strPrefix;\n    this._suffix = strSuffix;\n    this._compiledVM = null;\n    this._compiledNodeVM = null;\n    this._compiledNodeVMStrict = null;\n    return this;\n  }\n  /**\n   * Compile this script. <br>\n   * This is useful to detect syntax errors in the script.\n   *\n   * @public\n   * @return {this} This for chaining.\n   * @throws {SyntaxError} If there is a syntax error in the script.\n   */\n\n\n  compile() {\n    this._compileVM();\n\n    return this;\n  }\n  /**\n   * Get the compiled code.\n   * \n   * @private\n   * @return {string} The code.\n   */\n\n\n  getCompiledCode() {\n    if (!this._compiledCode) {\n      this._compiledCode = this._compiler(this._prefix + removeShebang(this._code) + this._suffix, this.filename);\n    }\n\n    return this._compiledCode;\n  }\n  /**\n   * Compiles this script to a vm.Script.\n   * \n   * @private\n   * @param {string} prefix - JavaScript code that will be used as prefix.\n   * @param {string} suffix - JavaScript code that will be used as suffix.\n   * @return {vm.Script} The compiled vm.Script.\n   * @throws {SyntaxError} If there is a syntax error in the script.\n   */\n\n\n  _compile(prefix, suffix) {\n    return new vm.Script(prefix + this.getCompiledCode() + suffix, {\n      filename: this.filename,\n      displayErrors: false,\n      lineOffset: this.lineOffset,\n      columnOffset: this.columnOffset,\n      importModuleDynamically\n    });\n  }\n  /**\n   * Will return the cached version of the script intended for VM or compile it.\n   * \n   * @private\n   * @return {vm.Script} The compiled script\n   * @throws {SyntaxError} If there is a syntax error in the script.\n   */\n\n\n  _compileVM() {\n    let script = this._compiledVM;\n\n    if (!script) {\n      this._compiledVM = script = this._compile('', '');\n    }\n\n    return script;\n  }\n  /**\n   * Will return the cached version of the script intended for NodeVM or compile it.\n   * \n   * @private\n   * @return {vm.Script} The compiled script\n   * @throws {SyntaxError} If there is a syntax error in the script.\n   */\n\n\n  _compileNodeVM() {\n    let script = this._compiledNodeVM;\n\n    if (!script) {\n      this._compiledNodeVM = script = this._compile(MODULE_PREFIX, MODULE_SUFFIX);\n    }\n\n    return script;\n  }\n  /**\n   * Will return the cached version of the script intended for NodeVM in strict mode or compile it.\n   * \n   * @private\n   * @return {vm.Script} The compiled script\n   * @throws {SyntaxError} If there is a syntax error in the script.\n   */\n\n\n  _compileNodeVMStrict() {\n    let script = this._compiledNodeVMStrict;\n\n    if (!script) {\n      this._compiledNodeVMStrict = script = this._compile(STRICT_MODULE_PREFIX, MODULE_SUFFIX);\n    }\n\n    return script;\n  }\n\n}\n/**\n * \n * This callback will be called and has a specific time to finish.<br>\n * No parameters will be supplied.<br>\n * If parameters are required, use a closure.\n * \n * @private\n * @callback runWithTimeout\n * @return {*} \n * \n */\n\n/**\n * Run a function with a specific timeout.\n * \n * @private\n * @param {runWithTimeout} fn - Function to run with the specific timeout.\n * @param {number} timeout - The amount of time to give the function to finish.\n * @return {*} The value returned by the function.\n * @throws {Error} If the function took to long.\n */\n\n\nfunction doWithTimeout(fn, timeout) {\n  let ctx = CACHE.timeoutContext;\n  let script = CACHE.timeoutScript;\n\n  if (!ctx) {\n    CACHE.timeoutContext = ctx = vm.createContext();\n    CACHE.timeoutScript = script = new vm.Script('fn()', {\n      filename: 'timeout_bridge.js',\n      displayErrors: false,\n      importModuleDynamically\n    });\n  }\n\n  ctx.fn = fn;\n\n  try {\n    return script.runInContext(ctx, {\n      displayErrors: false,\n      importModuleDynamically,\n      timeout\n    });\n  } finally {\n    ctx.fn = null;\n  }\n}\n\nfunction tryCompile(args) {\n  const code = args[args.length - 1];\n  const params = args.slice(0, -1);\n  vm.compileFunction(code, params);\n}\n\nfunction makeCheckHook(checkAsync, checkImport) {\n  if (!checkAsync && !checkImport) return null;\n  return (hook, args) => {\n    if (hook === 'function' || hook === 'generator_function' || hook === 'eval' || hook === 'run' || !checkAsync && (hook === 'async_function' || hook === 'async_generator_function')) {\n      if (hook === 'eval') {\n        const script = args[0];\n        args = [script];\n        if (typeof script !== 'string') return args;\n      } else {\n        // Next line throws on Symbol, this is the same behavior as function constructor calls\n        args = args.map(arg => `${arg}`);\n      }\n\n      const hasAsync = checkAsync && args.findIndex(arg => /\\basync\\b/.test(arg)) !== -1;\n      const hasImport = checkImport && args.findIndex(arg => /\\bimport\\b/.test(arg)) !== -1;\n      if (!hasAsync && !hasImport) return args;\n      const mapped = args.map(arg => {\n        if (hasAsync) arg = arg.replace(/async/g, 'a\\\\u0073ync');\n        if (hasImport) arg = arg.replace(/import/g, 'i\\\\u006dport');\n        return arg;\n      });\n\n      try {\n        tryCompile(mapped);\n      } catch (u) {\n        // Some random syntax error or error because of async or import.\n        // First report real syntax errors\n        tryCompile(args);\n\n        if (hasAsync && hasImport) {\n          const mapped2 = args.map(arg => arg.replace(/async/g, 'a\\\\u0073ync'));\n\n          try {\n            tryCompile(mapped2);\n          } catch (e) {\n            throw new VMError('Async not available');\n          }\n\n          throw new VMError('Dynamic Import not supported');\n        }\n\n        if (hasAsync) {\n          // Then async error\n          throw new VMError('Async not available');\n        }\n\n        throw new VMError('Dynamic Import not supported');\n      }\n\n      return args;\n    }\n\n    if (checkAsync) throw new VMError('Async not available');\n    return args;\n  };\n}\n/**\n * Class VM.\n *\n * @public\n */\n\n\nclass VM extends EventEmitter {\n  /**\n   * The timeout for {@link VM#run} calls.\n   *\n   * @public\n   * @since v3.9.0\n   * @member {number} timeout\n   * @memberOf VM#\n   */\n\n  /**\n   * Get the global sandbox object.\n   *\n   * @public\n   * @readonly\n   * @since v3.9.0\n   * @member {Object} sandbox\n   * @memberOf VM#\n   */\n\n  /**\n   * The compiler to use to get the JavaScript code.\n   * \n   * @public\n   * @readonly\n   * @since v3.9.0\n   * @member {(string|compileCallback)} compiler\n   * @memberOf VM#\n   */\n\n  /**\n   * The context for this sandbox.\n   * \n   * @private\n   * @readonly\n   * @member {Object} _context\n   * @memberOf VM#\n   */\n\n  /**\n   * The internal methods for this sandbox.\n   * \n   * @private\n   * @readonly\n   * @member {{Contextify: Object, Decontextify: Object, Buffer: Object, sandbox:Object}} _internal\n   * @memberOf VM#\n   */\n\n  /**\n   * The resolved compiler to use to get the JavaScript code.\n   * \n   * @private\n   * @readonly\n   * @member {compileCallback} _compiler\n   * @memberOf VM#\n   */\n\n  /**\n   * The hook called when some events occurs.\n   * \n   * @private\n   * @readonly\n   * @since v3.9.2\n   * @member {Function} _hook\n   * @memberOf VM#\n   */\n\n  /**\n   * Create a new VM instance.\n   *\n   * @public\n   * @param {Object} [options] - VM options.\n   * @param {number} [options.timeout] - The amount of time until a call to {@link VM#run} will timeout.\n   * @param {Object} [options.sandbox] - Objects that will be copied into the global object of the sandbox.\n   * @param {(string|compileCallback)} [options.compiler=\"javascript\"] - The compiler to use.\n   * @param {boolean} [options.eval=true] - Allow the dynamic evaluation of code via eval(code) or Function(code)().<br>\n   * Only available for node v10+.\n   * @param {boolean} [options.wasm=true] - Allow to run wasm code.<br>\n   * Only available for node v10+.\n   * @param {boolean} [options.fixAsync=false] - Filters for async functions.\n   * @throws {VMError} If the compiler is unknown.\n   */\n  constructor(options = {}) {\n    super(); // Read all options\n\n    const {\n      timeout,\n      sandbox,\n      compiler = 'javascript'\n    } = options;\n    const allowEval = options.eval !== false;\n    const allowWasm = options.wasm !== false;\n    const fixAsync = !!options.fixAsync; // Early error if sandbox is not an object.\n\n    if (sandbox && 'object' !== typeof sandbox) {\n      throw new VMError('Sandbox must be object.');\n    } // Early error if compiler can't be found.\n\n\n    const resolvedCompiler = lookupCompiler(compiler); // Create a new context for this vm.\n\n    const _context = vm.createContext(undefined, {\n      codeGeneration: {\n        strings: allowEval,\n        wasm: allowWasm\n      }\n    }); // Create the bridge between the host and the sandbox.\n\n\n    const _internal = CACHE.contextifyScript.runInContext(_context, DEFAULT_RUN_OPTIONS).call(_context, require, HOST);\n\n    const hook = makeCheckHook(fixAsync, true); // Define the properties of this object.\n    // Use Object.defineProperties here to be able to\n    // hide and set properties write only.\n\n    Object.defineProperties(this, {\n      timeout: {\n        value: timeout,\n        writable: true,\n        enumerable: true\n      },\n      compiler: {\n        value: compiler,\n        enumerable: true\n      },\n      sandbox: {\n        value: _internal.sandbox,\n        enumerable: true\n      },\n      _context: {\n        value: _context\n      },\n      _internal: {\n        value: _internal\n      },\n      _compiler: {\n        value: resolvedCompiler\n      },\n      _hook: {\n        value: hook\n      }\n    });\n\n    if (hook) {\n      if (!CACHE.hookScript) {\n        CACHE.hookScript = loadAndCompileScript(`${__dirname}/fixasync.js`, '(function() { ', '\\n})');\n        CACHE.getGlobalScript = new vm.Script('this', {\n          filename: 'get_global.js',\n          displayErrors: false,\n          importModuleDynamically\n        });\n\n        try {\n          CACHE.getGeneratorFunctionScript = new vm.Script('(function*(){}).constructor', {\n            filename: 'get_generator_function.js',\n            displayErrors: false,\n            importModuleDynamically\n          });\n        } catch (ex) {}\n\n        try {\n          CACHE.getAsyncFunctionScript = new vm.Script('(async function(){}).constructor', {\n            filename: 'get_async_function.js',\n            displayErrors: false,\n            importModuleDynamically\n          });\n        } catch (ex) {}\n\n        try {\n          CACHE.getAsyncGeneratorFunctionScript = new vm.Script('(async function*(){}).constructor', {\n            filename: 'get_async_generator_function.js',\n            displayErrors: false,\n            importModuleDynamically\n          });\n        } catch (ex) {}\n      }\n\n      const internal = {\n        __proto__: null,\n        global: CACHE.getGlobalScript.runInContext(_context, DEFAULT_RUN_OPTIONS),\n        internal: _internal,\n        host: HOST,\n        hook\n      };\n\n      if (CACHE.getGeneratorFunctionScript) {\n        try {\n          internal.GeneratorFunction = CACHE.getGeneratorFunctionScript.runInContext(_context, DEFAULT_RUN_OPTIONS);\n        } catch (ex) {}\n      }\n\n      if (CACHE.getAsyncFunctionScript) {\n        try {\n          internal.AsyncFunction = CACHE.getAsyncFunctionScript.runInContext(_context, DEFAULT_RUN_OPTIONS);\n        } catch (ex) {}\n      }\n\n      if (CACHE.getAsyncGeneratorFunctionScript) {\n        try {\n          internal.AsyncGeneratorFunction = CACHE.getAsyncGeneratorFunctionScript.runInContext(_context, DEFAULT_RUN_OPTIONS);\n        } catch (ex) {}\n      }\n\n      CACHE.hookScript.runInContext(_context, DEFAULT_RUN_OPTIONS).call(internal);\n    } // prepare global sandbox\n\n\n    if (sandbox) {\n      this.setGlobals(sandbox);\n    }\n  }\n  /**\n   * Adds all the values to the globals.\n   * \n   * @public\n   * @since v3.9.0\n   * @param {Object} values - All values that will be added to the globals.\n   * @return {this} This for chaining.\n   * @throws {*} If the setter of a global throws an exception it is propagated. And the remaining globals will not be written.\n   */\n\n\n  setGlobals(values) {\n    for (const name in values) {\n      if (Object.prototype.hasOwnProperty.call(values, name)) {\n        this._internal.Contextify.setGlobal(name, values[name]);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Set a global value.\n   * \n   * @public\n   * @since v3.9.0\n   * @param {string} name - The name of the global.\n   * @param {*} value - The value of the global.\n   * @return {this} This for chaining.\n   * @throws {*} If the setter of the global throws an exception it is propagated.\n   */\n\n\n  setGlobal(name, value) {\n    this._internal.Contextify.setGlobal(name, value);\n\n    return this;\n  }\n  /**\n   * Get a global value.\n   * \n   * @public\n   * @since v3.9.0\n   * @param {string} name - The name of the global.\n   * @return {*} The value of the global.\n   * @throws {*} If the getter of the global throws an exception it is propagated.\n   */\n\n\n  getGlobal(name) {\n    return this._internal.Contextify.getGlobal(name);\n  }\n  /**\n   * Freezes the object inside VM making it read-only. Not available for primitive values.\n   *\n   * @public\n   * @param {*} value - Object to freeze.\n   * @param {string} [globalName] - Whether to add the object to global.\n   * @return {*} Object to freeze.\n   * @throws {*} If the setter of the global throws an exception it is propagated.\n   */\n\n\n  freeze(value, globalName) {\n    this._internal.Contextify.readonly(value);\n\n    if (globalName) this._internal.Contextify.setGlobal(globalName, value);\n    return value;\n  }\n  /**\n   * Protects the object inside VM making impossible to set functions as it's properties. Not available for primitive values.\n   *\n   * @public\n   * @param {*} value - Object to protect.\n   * @param {string} [globalName] - Whether to add the object to global.\n   * @return {*} Object to protect.\n   * @throws {*} If the setter of the global throws an exception it is propagated.\n   */\n\n\n  protect(value, globalName) {\n    this._internal.Contextify.protected(value);\n\n    if (globalName) this._internal.Contextify.setGlobal(globalName, value);\n    return value;\n  }\n  /**\n   * Run the code in VM.\n   *\n   * @public\n   * @param {(string|VMScript)} code - Code to run.\n   * @param {string} [filename=\"vm.js\"] - Filename that shows up in any stack traces produced from this script.<br>\n   * This is only used if code is a String.\n   * @return {*} Result of executed code.\n   * @throws {SyntaxError} If there is a syntax error in the script.\n   * @throws {Error} An error is thrown when the script took to long and there is a timeout.\n   * @throws {*} If the script execution terminated with an exception it is propagated.\n   */\n\n\n  run(code, filename) {\n    let script;\n\n    if (code instanceof VMScript) {\n      if (this._hook) {\n        const scriptCode = code.getCompiledCode();\n\n        const changed = this._hook('run', [scriptCode])[0];\n\n        if (changed === scriptCode) {\n          script = code._compileVM();\n        } else {\n          script = new vm.Script(changed, {\n            filename: code.filename,\n            displayErrors: false,\n            importModuleDynamically\n          });\n        }\n      } else {\n        script = code._compileVM();\n      }\n    } else {\n      const useFileName = filename || 'vm.js';\n\n      let scriptCode = this._compiler(code, useFileName);\n\n      if (this._hook) {\n        scriptCode = this._hook('run', [scriptCode])[0];\n      } // Compile the script here so that we don't need to create a instance of VMScript.\n\n\n      script = new vm.Script(scriptCode, {\n        filename: useFileName,\n        displayErrors: false,\n        importModuleDynamically\n      });\n    }\n\n    if (!this.timeout) {\n      // If no timeout is given, directly run the script.\n      try {\n        return this._internal.Decontextify.value(script.runInContext(this._context, DEFAULT_RUN_OPTIONS));\n      } catch (e) {\n        throw this._internal.Decontextify.value(e);\n      }\n    }\n\n    return doWithTimeout(() => {\n      try {\n        return this._internal.Decontextify.value(script.runInContext(this._context, DEFAULT_RUN_OPTIONS));\n      } catch (e) {\n        throw this._internal.Decontextify.value(e);\n      }\n    }, this.timeout);\n  }\n  /**\n   * Run the code in VM.\n   *\n   * @public\n   * @since v3.9.0\n   * @param {string} filename - Filename of file to load and execute in a NodeVM.\n   * @return {*} Result of executed code.\n   * @throws {Error} If filename is not a valid filename.\n   * @throws {SyntaxError} If there is a syntax error in the script.\n   * @throws {Error} An error is thrown when the script took to long and there is a timeout.\n   * @throws {*} If the script execution terminated with an exception it is propagated.\n   */\n\n\n  runFile(filename) {\n    const resolvedFilename = pa.resolve(filename);\n\n    if (!fs.existsSync(resolvedFilename)) {\n      throw new VMError(`Script '${filename}' not found.`);\n    }\n\n    if (fs.statSync(resolvedFilename).isDirectory()) {\n      throw new VMError('Script must be file, got directory.');\n    }\n\n    return this.run(fs.readFileSync(resolvedFilename, 'utf8'), resolvedFilename);\n  }\n\n}\n/**\n * Event caused by a <code>console.debug</code> call if <code>options.console=\"redirect\"</code> is specified.\n *\n * @public\n * @event NodeVM.\"console.debug\"\n * @type {...*}\n */\n\n/**\n * Event caused by a <code>console.log</code> call if <code>options.console=\"redirect\"</code> is specified.\n *\n * @public\n * @event NodeVM.\"console.log\"\n * @type {...*}\n */\n\n/**\n * Event caused by a <code>console.info</code> call if <code>options.console=\"redirect\"</code> is specified.\n *\n * @public\n * @event NodeVM.\"console.info\"\n * @type {...*}\n */\n\n/**\n * Event caused by a <code>console.warn</code> call if <code>options.console=\"redirect\"</code> is specified.\n *\n * @public\n * @event NodeVM.\"console.warn\"\n * @type {...*}\n */\n\n/**\n * Event caused by a <code>console.error</code> call if <code>options.console=\"redirect\"</code> is specified.\n *\n * @public\n * @event NodeVM.\"console.error\"\n * @type {...*}\n */\n\n/**\n * Event caused by a <code>console.dir</code> call if <code>options.console=\"redirect\"</code> is specified.\n *\n * @public\n * @event NodeVM.\"console.dir\"\n * @type {...*}\n */\n\n/**\n * Event caused by a <code>console.trace</code> call if <code>options.console=\"redirect\"</code> is specified.\n *\n * @public\n * @event NodeVM.\"console.trace\"\n * @type {...*}\n */\n\n/**\n * Class NodeVM.\n *\n * @public\n * @extends {VM}\n * @extends {EventEmitter}\n */\n\n\nclass NodeVM extends VM {\n  /**\n   * Create a new NodeVM instance.<br>\n   *\n   * Unlike VM, NodeVM lets you use require same way like in regular node.<br>\n   * \n   * However, it does not use the timeout.\n   *\n   * @public\n   * @param {Object} [options] - VM options.\n   * @param {Object} [options.sandbox] - Objects that will be copied into the global object of the sandbox.\n   * @param {(string|compileCallback)} [options.compiler=\"javascript\"] - The compiler to use.\n   * @param {boolean} [options.eval=true] - Allow the dynamic evaluation of code via eval(code) or Function(code)().<br>\n   * Only available for node v10+.\n   * @param {boolean} [options.wasm=true] - Allow to run wasm code.<br>\n   * Only available for node v10+.\n   * @param {(\"inherit\"|\"redirect\"|\"off\")} [options.console=\"inherit\"] - Sets the behavior of the console in the sandbox.\n   * <code>inherit</code> to enable console, <code>redirect</code> to redirect to events, <code>off</code> to disable console.\n   * @param {Object|boolean} [options.require=false] - Allow require inside the sandbox.\n   * @param {(boolean|string[]|Object)} [options.require.external=false] - true, an array of allowed external modules or an object.\n   * @param {(string[])} [options.require.external.modules] - Array of allowed external modules. Also supports wildcards, so specifying ['@scope/*-ver-??], \n   * for instance, will allow using all modules having a name of the form @scope/something-ver-aa, @scope/other-ver-11, etc.\n   * @param {boolean} [options.require.external.transitive=false] - Boolean which indicates if transitive dependencies of external modules are allowed.\n   * @param {string[]} [options.require.builtin=[]] - Array of allowed builtin modules, accepts [\"*\"] for all.\n   * @param {(string|string[])} [options.require.root] - Restricted path(s) where local modules can be required. If omitted every path is allowed.\n   * @param {Object} [options.require.mock] - Collection of mock modules (both external or builtin).\n   * @param {(\"host\"|\"sandbox\")} [options.require.context=\"host\"] - <code>host</code> to require modules in host and proxy them to sandbox.\n   * <code>sandbox</code> to load, compile and require modules in sandbox.\n   * Builtin modules except <code>events</code> always required in host and proxied to sandbox.\n   * @param {string[]} [options.require.import] - Array of modules to be loaded into NodeVM on start.\n   * @param {resolveCallback} [options.require.resolve] - An additional lookup function in case a module wasn't\n   * found in one of the traditional node lookup paths.\n   * @param {boolean} [options.nesting=false] - Allow nesting of VMs.\n   * @param {(\"commonjs\"|\"none\")} [options.wrapper=\"commonjs\"] - <code>commonjs</code> to wrap script into CommonJS wrapper, \n   * <code>none</code> to retrieve value returned by the script.\n   * @param {string[]} [options.sourceExtensions=[\"js\"]] - Array of file extensions to treat as source code.\n   * @param {string[]} [options.argv=[]] - Array of arguments passed to <code>process.argv</code>. \n   * This object will not be copied and the script can change this object.\n   * @param {Object} [options.env={}] - Environment map passed to <code>process.env</code>. \n   * This object will not be copied and the script can change this object.\n   * @param {boolean} [options.strict=false] - If modules should be loaded in strict mode.\n   * @throws {VMError} If the compiler is unknown.\n   */\n  constructor(options = {}) {\n    const sandbox = options.sandbox; // Throw this early\n\n    if (sandbox && 'object' !== typeof sandbox) {\n      throw new VMError('Sandbox must be object.');\n    }\n\n    super({\n      compiler: options.compiler,\n      eval: options.eval,\n      wasm: options.wasm\n    }); // defaults\n\n    Object.defineProperty(this, 'options', {\n      value: {\n        console: options.console || 'inherit',\n        require: options.require || false,\n        nesting: options.nesting || false,\n        wrapper: options.wrapper || 'commonjs',\n        sourceExtensions: options.sourceExtensions || ['js'],\n        strict: options.strict || false\n      }\n    });\n    let sandboxScript = CACHE.sandboxScript;\n\n    if (!sandboxScript) {\n      CACHE.sandboxScript = sandboxScript = loadAndCompileScript(`${__dirname}/sandbox.js`, '(function (vm, host, Contextify, Decontextify, Buffer, options) { ', '\\n})');\n    }\n\n    const closure = sandboxScript.runInContext(this._context, DEFAULT_RUN_OPTIONS);\n    Object.defineProperty(this, '_prepareRequire', {\n      value: closure.call(this._context, this, HOST, this._internal.Contextify, this._internal.Decontextify, this._internal.Buffer, options)\n    }); // prepare global sandbox\n\n    if (sandbox) {\n      this.setGlobals(sandbox);\n    }\n\n    if (this.options.require && this.options.require.import) {\n      if (Array.isArray(this.options.require.import)) {\n        for (let i = 0, l = this.options.require.import.length; i < l; i++) {\n          this.require(this.options.require.import[i]);\n        }\n      } else {\n        this.require(this.options.require.import);\n      }\n    }\n  }\n  /**\n   * @ignore\n   * @deprecated Just call the method yourself like <code>method(args);</code>\n   * @param {function} method - Function to invoke.\n   * @param {...*} args - Arguments to pass to the function.\n   * @return {*} Return value of the function.\n   * @todo Can we remove this function? It even had a bug that would use args as this parameter.\n   * @throws {*} Rethrows anything the method throws.\n   * @throws {VMError} If method is not a function.\n   * @throws {Error} If method is a class.\n   */\n\n\n  call(method, ...args) {\n    if ('function' === typeof method) {\n      return method(...args);\n    } else {\n      throw new VMError('Unrecognized method type.');\n    }\n  }\n  /**\n   * Require a module in VM and return it's exports.\n   *\n   * @public\n   * @param {string} module - Module name.\n   * @return {*} Exported module.\n   * @throws {*} If the module couldn't be found or loading it threw an error.\n   */\n\n\n  require(module) {\n    return this.run(`module.exports = require('${module}');`, 'vm.js');\n  }\n  /**\n   * Run the code in NodeVM.\n   *\n   * First time you run this method, code is executed same way like in node's regular `require` - it's executed with\n   * `module`, `require`, `exports`, `__dirname`, `__filename` variables and expect result in `module.exports'.\n   *\n   * @param {(string|VMScript)} code - Code to run.\n   * @param {string} [filename] - Filename that shows up in any stack traces produced from this script.<br>\n   * This is only used if code is a String.\n   * @return {*} Result of executed code.\n   * @throws {SyntaxError} If there is a syntax error in the script.\n   * @throws {*} If the script execution terminated with an exception it is propagated.\n   * @fires NodeVM.\"console.debug\"\n   * @fires NodeVM.\"console.log\"\n   * @fires NodeVM.\"console.info\"\n   * @fires NodeVM.\"console.warn\"\n   * @fires NodeVM.\"console.error\"\n   * @fires NodeVM.\"console.dir\"\n   * @fires NodeVM.\"console.trace\"\n   */\n\n\n  run(code, filename) {\n    let dirname;\n    let resolvedFilename;\n    let script;\n\n    if (code instanceof VMScript) {\n      if (this._hook) {\n        const prefix = this.options.strict ? STRICT_MODULE_PREFIX : MODULE_PREFIX;\n        const scriptCode = prefix + code.getCompiledCode() + MODULE_SUFFIX;\n\n        const changed = this._hook('run', [scriptCode])[0];\n\n        if (changed === scriptCode) {\n          script = this.options.strict ? code._compileNodeVMStrict() : code._compileNodeVM();\n        } else {\n          script = new vm.Script(changed, {\n            filename: code.filename,\n            displayErrors: false,\n            importModuleDynamically\n          });\n        }\n      } else {\n        script = this.options.strict ? code._compileNodeVMStrict() : code._compileNodeVM();\n      }\n\n      resolvedFilename = pa.resolve(code.filename);\n      dirname = pa.dirname(resolvedFilename);\n    } else {\n      const unresolvedFilename = filename || 'vm.js';\n\n      if (filename) {\n        resolvedFilename = pa.resolve(filename);\n        dirname = pa.dirname(resolvedFilename);\n      } else {\n        resolvedFilename = null;\n        dirname = null;\n      }\n\n      const prefix = this.options.strict ? STRICT_MODULE_PREFIX : MODULE_PREFIX;\n      let scriptCode = prefix + this._compiler(code, unresolvedFilename) + MODULE_SUFFIX;\n\n      if (this._hook) {\n        scriptCode = this._hook('run', [scriptCode])[0];\n      }\n\n      script = new vm.Script(scriptCode, {\n        filename: unresolvedFilename,\n        displayErrors: false,\n        importModuleDynamically\n      });\n    }\n\n    const wrapper = this.options.wrapper;\n\n    const module = this._internal.Contextify.makeModule();\n\n    try {\n      const closure = script.runInContext(this._context, DEFAULT_RUN_OPTIONS);\n      const returned = closure.call(this._context, module.exports, this._prepareRequire(dirname), module, resolvedFilename, dirname);\n      return this._internal.Decontextify.value(wrapper === 'commonjs' ? module.exports : returned);\n    } catch (e) {\n      throw this._internal.Decontextify.value(e);\n    }\n  }\n  /**\n   * Create NodeVM and run code inside it.\n   *\n   * @public\n   * @static\n   * @param {string} script - Code to execute.\n   * @param {string} [filename] - File name (used in stack traces only).\n   * @param {Object} [options] - VM options.\n   * @param {string} [options.filename] - File name (used in stack traces only). Used if <code>filename</code> is omitted.\n   * @return {*} Result of executed code.\n   * @see {@link NodeVM} for the options.\n   * @throws {SyntaxError} If there is a syntax error in the script.\n   * @throws {*} If the script execution terminated with an exception it is propagated.\n   */\n\n\n  static code(script, filename, options) {\n    let unresolvedFilename;\n\n    if (filename != null) {\n      if ('object' === typeof filename) {\n        options = filename;\n        unresolvedFilename = options.filename;\n      } else if ('string' === typeof filename) {\n        unresolvedFilename = filename;\n      } else {\n        throw new VMError('Invalid arguments.');\n      }\n    } else if ('object' === typeof options) {\n      unresolvedFilename = options.filename;\n    }\n\n    if (arguments.length > 3) {\n      throw new VMError('Invalid number of arguments.');\n    }\n\n    const resolvedFilename = typeof unresolvedFilename === 'string' ? pa.resolve(unresolvedFilename) : undefined;\n    return new NodeVM(options).run(script, resolvedFilename);\n  }\n  /**\n   * Create NodeVM and run script from file inside it.\n   *\n   * @public\n   * @static\n   * @param {string} filename - Filename of file to load and execute in a NodeVM.\n   * @param {Object} [options] - NodeVM options.\n   * @return {*} Result of executed code.\n   * @see {@link NodeVM} for the options.\n   * @throws {Error} If filename is not a valid filename.\n   * @throws {SyntaxError} If there is a syntax error in the script.\n   * @throws {*} If the script execution terminated with an exception it is propagated.\n   */\n\n\n  static file(filename, options) {\n    const resolvedFilename = pa.resolve(filename);\n\n    if (!fs.existsSync(resolvedFilename)) {\n      throw new VMError(`Script '${filename}' not found.`);\n    }\n\n    if (fs.statSync(resolvedFilename).isDirectory()) {\n      throw new VMError('Script must be file, got directory.');\n    }\n\n    return new NodeVM(options).run(fs.readFileSync(resolvedFilename, 'utf8'), resolvedFilename);\n  }\n\n}\n/**\n * VMError.\n *\n * @public\n * @extends {Error}\n */\n\n\nclass VMError extends Error {\n  /**\n   * Create VMError instance.\n   *\n   * @public\n   * @param {string} message - Error message.\n   */\n  constructor(message) {\n    super(message);\n    this.name = 'VMError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n/**\n * Host objects\n * \n * @private\n */\n\n\nconst HOST = {\n  version: parseInt(process.versions.node.split('.')[0]),\n  require,\n  process,\n  console,\n  setTimeout,\n  setInterval,\n  setImmediate,\n  clearTimeout,\n  clearInterval,\n  clearImmediate,\n  String,\n  Number,\n  Buffer,\n  Boolean,\n  Array,\n  Date,\n  Error,\n  EvalError,\n  RangeError,\n  ReferenceError,\n  SyntaxError,\n  TypeError,\n  URIError,\n  RegExp,\n  Function,\n  Object,\n  VMError,\n  Proxy,\n  Reflect,\n  Map,\n  WeakMap,\n  Set,\n  WeakSet,\n  Promise,\n  Symbol,\n  INSPECT_MAX_BYTES,\n  VM,\n  NodeVM,\n  helpers,\n  MODULE_PREFIX,\n  STRICT_MODULE_PREFIX,\n  MODULE_SUFFIX\n};\nexports.VMError = VMError;\nexports.NodeVM = NodeVM;\nexports.VM = VM;\nexports.VMScript = VMScript;","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/vm2/lib/main.js"],"names":["fs","require","vm","pa","EventEmitter","INSPECT_MAX_BYTES","helpers","importModuleDynamically","MODULE_PREFIX","STRICT_MODULE_PREFIX","MODULE_SUFFIX","loadAndCompileScript","filename","prefix","suffix","data","readFileSync","Script","displayErrors","CACHE","coffeeScriptCompiler","timeoutContext","timeoutScript","contextifyScript","__dirname","sandboxScript","hookScript","getGlobalScript","getGeneratorFunctionScript","getAsyncFunctionScript","getAsyncGeneratorFunctionScript","DEFAULT_RUN_OPTIONS","getCoffeeScriptCompiler","coffeeScript","code","compile","header","bare","e","VMError","jsCompiler","removeShebang","lookupCompiler","compiler","startsWith","substr","VMScript","constructor","options","sCode","useFileName","useOptions","arguments","length","toString","Object","prototype","lineOffset","columnOffset","resolvedCompiler","defineProperties","get","_prefix","_code","_suffix","set","value","strNewCode","String","_compiledVM","_compiledNodeVM","_compiledCode","enumerable","writable","_compiledNodeVMStrict","_compiler","wrap","strPrefix","strSuffix","_compileVM","getCompiledCode","_compile","script","_compileNodeVM","_compileNodeVMStrict","doWithTimeout","fn","timeout","ctx","createContext","runInContext","tryCompile","args","params","slice","compileFunction","makeCheckHook","checkAsync","checkImport","hook","map","arg","hasAsync","findIndex","test","hasImport","mapped","replace","u","mapped2","VM","sandbox","allowEval","eval","allowWasm","wasm","fixAsync","_context","undefined","codeGeneration","strings","_internal","call","HOST","_hook","ex","internal","__proto__","global","host","GeneratorFunction","AsyncFunction","AsyncGeneratorFunction","setGlobals","values","name","hasOwnProperty","Contextify","setGlobal","getGlobal","freeze","globalName","readonly","protect","protected","run","scriptCode","changed","Decontextify","runFile","resolvedFilename","resolve","existsSync","statSync","isDirectory","NodeVM","defineProperty","console","nesting","wrapper","sourceExtensions","strict","closure","Buffer","import","Array","isArray","i","l","method","module","dirname","unresolvedFilename","makeModule","returned","exports","_prepareRequire","file","Error","message","captureStackTrace","version","parseInt","process","versions","node","split","setTimeout","setInterval","setImmediate","clearTimeout","clearInterval","clearImmediate","Number","Boolean","Date","EvalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError","RegExp","Function","Proxy","Reflect","Map","WeakMap","Set","WeakSet","Promise","Symbol"],"mappings":"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","sourcesContent":["/* eslint-disable global-require, no-use-before-define */\n\n'use strict';\n\n/**\n * This callback will be called to transform a script to JavaScript.\n *\n * @callback compileCallback\n * @param {string} code - Script code to transform to JavaScript.\n * @param {string} filename - Filename of this script.\n * @return {string} JavaScript code that represents the script code.\n */\n\n/**\n * This callback will be called to resolve a module if it couldn't be found.\n *\n * @callback resolveCallback\n * @param {string} moduleName - Name of the module to resolve.\n * @param {string} dirname - Name of the current directory.\n * @return {(string|undefined)} The file or directory to use to load the requested module.\n */\n\nconst fs = require('fs');\nconst vm = require('vm');\nconst pa = require('path');\nconst {EventEmitter} = require('events');\nconst {INSPECT_MAX_BYTES} = require('buffer');\nconst helpers = require('./helpers.js');\nconst importModuleDynamically = () => {\n\t// We can't throw an error object here because since vm.Script doesn't store a context, we can't properly contextify that error object.\n\t// eslint-disable-next-line no-throw-literal\n\tthrow 'Dynamic imports are not allowed.';\n};\n\nconst MODULE_PREFIX = '(function (exports, require, module, __filename, __dirname) { ';\nconst STRICT_MODULE_PREFIX = MODULE_PREFIX + '\"use strict\"; ';\nconst MODULE_SUFFIX = '\\n});';\n\n/**\n * Load a script from a file and compile it.\n * \n * @private\n * @param {string} filename - File to load and compile to a script.\n * @param {string} prefix - Prefix for the script.\n * @param {string} suffix - Suffix for the script.\n * @return {vm.Script} The compiled script.\n */\nfunction loadAndCompileScript(filename, prefix, suffix) {\n\tconst data = fs.readFileSync(filename, 'utf8');\n\treturn new vm.Script(prefix + data + suffix, {\n\t\tfilename,\n\t\tdisplayErrors: false,\n\t\timportModuleDynamically\n\t});\n}\n\n/**\n * Cache where we can cache some things\n * \n * @private\n * @property {?compileCallback} coffeeScriptCompiler - The coffee script compiler or null if not yet used.\n * @property {?Object} timeoutContext - The context used for the timeout functionality of null if not yet used.\n * @property {?vm.Script} timeoutScript - The compiled script used for the timeout functionality of null if not yet used.\n * @property {vm.Script} contextifyScript - The compiled script used to setup a sandbox.\n * @property {?vm.Script} sandboxScript - The compiled script used to setup the NodeVM require mechanism of null if not yet used.\n * @property {?vm.Script} hookScript - The compiled script used to setup the async hooking functionality.\n * @property {?vm.Script} getGlobalScript - The compiled script used to get the global sandbox object.\n * @property {?vm.Script} getGeneratorFunctionScript - The compiled script used to get the generator function constructor.\n * @property {?vm.Script} getAsyncFunctionScript - The compiled script used to get the async function constructor.\n * @property {?vm.Script} getAsyncGeneratorFunctionScript - The compiled script used to get the async generator function constructor.\n */\nconst CACHE = {\n\tcoffeeScriptCompiler: null,\n\ttimeoutContext: null,\n\ttimeoutScript: null,\n\tcontextifyScript: loadAndCompileScript(`${__dirname}/contextify.js`, '(function(require, host) { ', '\\n})'),\n\tsandboxScript: null,\n\thookScript: null,\n\tgetGlobalScript: null,\n\tgetGeneratorFunctionScript: null,\n\tgetAsyncFunctionScript: null,\n\tgetAsyncGeneratorFunctionScript: null,\n};\n\n/**\n * Default run options for vm.Script.runInContext\n * \n * @private\n */\nconst DEFAULT_RUN_OPTIONS = {displayErrors: false, importModuleDynamically};\n\n/**\n * Returns the cached coffee script compiler or loads it\n * if it is not found in the cache.\n * \n * @private\n * @return {compileCallback} The coffee script compiler.\n * @throws {VMError} If the coffee-script module can't be found.\n */\nfunction getCoffeeScriptCompiler() {\n\tif (!CACHE.coffeeScriptCompiler) {\n\t\ttry {\n\t\t\tconst coffeeScript = require('coffee-script');\n\t\t\tCACHE.coffeeScriptCompiler = (code, filename) => {\n\t\t\t\treturn coffeeScript.compile(code, {header: false, bare: true});\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow new VMError('Coffee-Script compiler is not installed.');\n\t\t}\n\t}\n\treturn CACHE.coffeeScriptCompiler;\n}\n\n/**\n * The JavaScript compiler, just a identity function.\n * \n * @private\n * @type {compileCallback}\n * @param {string} code - The JavaScript code.\n * @param {string} filename - Filename of this script.\n * @return {string} The code.\n */\nfunction jsCompiler(code, filename) {\n\treturn removeShebang(code);\n}\n\n/**\n * Look up the compiler for a specific name.\n * \n * @private\n * @param {(string|compileCallback)} compiler - A compile callback or the name of the compiler.\n * @return {compileCallback} The resolved compiler.\n * @throws {VMError} If the compiler is unknown or the coffee script module was needed and couldn't be found.\n */\nfunction lookupCompiler(compiler) {\n\tif ('function' === typeof compiler) return compiler;\n\tswitch (compiler) {\n\t\tcase 'coffeescript':\n\t\tcase 'coffee-script':\n\t\tcase 'cs':\n\t\tcase 'text/coffeescript':\n\t\t\treturn getCoffeeScriptCompiler();\n\t\tcase 'javascript':\n\t\tcase 'java-script':\n\t\tcase 'js':\n\t\tcase 'text/javascript':\n\t\t\treturn jsCompiler;\n\t\tdefault:\n\t\t\tthrow new VMError(`Unsupported compiler '${compiler}'.`);\n\t}\n}\n\n/**\n * Remove the shebang from source code.\n * \n * @private\n * @param {string} code - Code from which to remove the shebang.\n * @return {string} code without the shebang.\n */\nfunction removeShebang(code) {\n\tif (!code.startsWith('#!')) return code;\n\treturn '//' + code.substr(2);\n}\n\n/**\n * Class Script\n *\n * @public\n */\nclass VMScript {\n\n\t/**\n\t * The script code with wrapping. If set will invalidate the cache.<br>\n\t * Writable only for backwards compatibility.\n\t * \n\t * @public\n\t * @readonly\n\t * @member {string} code\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The filename used for this script.\n\t * \n\t * @public\n\t * @readonly\n\t * @since v3.9.0\n\t * @member {string} filename\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The line offset use for stack traces.\n\t * \n\t * @public\n\t * @readonly\n\t * @since v3.9.0\n\t * @member {number} lineOffset\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The column offset use for stack traces.\n\t * \n\t * @public\n\t * @readonly\n\t * @since v3.9.0\n\t * @member {number} columnOffset\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The compiler to use to get the JavaScript code.\n\t * \n\t * @public\n\t * @readonly\n\t * @since v3.9.0\n\t * @member {(string|compileCallback)} compiler\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The prefix for the script.\n\t * \n\t * @private\n\t * @member {string} _prefix\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The suffix for the script.\n\t * \n\t * @private\n\t * @member {string} _suffix\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The compiled vm.Script for the VM or if not compiled <code>null</code>.\n\t * \n\t * @private\n\t * @member {?vm.Script} _compiledVM\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The compiled vm.Script for the NodeVM or if not compiled <code>null</code>.\n\t * \n\t * @private\n\t * @member {?vm.Script} _compiledNodeVM\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The compiled vm.Script for the NodeVM in strict mode or if not compiled <code>null</code>.\n\t * \n\t * @private\n\t * @member {?vm.Script} _compiledNodeVMStrict\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The resolved compiler to use to get the JavaScript code.\n\t * \n\t * @private\n\t * @readonly\n\t * @member {compileCallback} _compiler\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * The script to run without wrapping.\n\t * \n\t * @private\n\t * @member {string} _code\n\t * @memberOf VMScript#\n\t */\n\n\t/**\n\t * Create VMScript instance.\n\t *\n\t * @public\n\t * @param {string} code - Code to run.\n\t * @param {(string|Object)} [options] - Options map or filename.\n\t * @param {string} [options.filename=\"vm.js\"] - Filename that shows up in any stack traces produced from this script.\n\t * @param {number} [options.lineOffset=0] - Passed to vm.Script options.\n\t * @param {number} [options.columnOffset=0] - Passed to vm.Script options.\n\t * @param {(string|compileCallback)} [options.compiler=\"javascript\"] - The compiler to use.\n\t * @throws {VMError} If the compiler is unknown or if coffee-script was requested but the module not found.\n\t */\n\tconstructor(code, options) {\n\t\tconst sCode = `${code}`;\n\t\tlet useFileName;\n\t\tlet useOptions;\n\t\tif (arguments.length === 2) {\n\t\t\tif (typeof options === 'object' && options.toString === Object.prototype.toString) {\n\t\t\t\tuseOptions = options || {};\n\t\t\t\tuseFileName = useOptions.filename;\n\t\t\t} else {\n\t\t\t\tuseOptions = {};\n\t\t\t\tuseFileName = options;\n\t\t\t}\n\t\t} else if (arguments.length > 2) {\n\t\t\t// We do it this way so that there are no more arguments in the function.\n\t\t\t// eslint-disable-next-line prefer-rest-params\n\t\t\tuseOptions = arguments[2] || {};\n\t\t\tuseFileName = options || useOptions.filename;\n\t\t} else {\n\t\t\tuseOptions = {};\n\t\t}\n\n\t\tconst {\n\t\t\tcompiler = 'javascript',\n\t\t\tlineOffset = 0,\n\t\t\tcolumnOffset = 0\n\t\t} = useOptions;\n\n\t\t// Throw if the compiler is unknown.\n\t\tconst resolvedCompiler = lookupCompiler(compiler);\n\n\t\tObject.defineProperties(this, {\n\t\t\tcode: {\n\t\t\t\t// Put this here so that it is enumerable, and looks like a property.\n\t\t\t\tget() {\n\t\t\t\t\treturn this._prefix + this._code + this._suffix;\n\t\t\t\t},\n\t\t\t\tset(value) {\n\t\t\t\t\tconst strNewCode = String(value);\n\t\t\t\t\tif (strNewCode === this._code && this._prefix === '' && this._suffix === '') return;\n\t\t\t\t\tthis._code = strNewCode;\n\t\t\t\t\tthis._prefix = '';\n\t\t\t\t\tthis._suffix = '';\n\t\t\t\t\tthis._compiledVM = null;\n\t\t\t\t\tthis._compiledNodeVM = null;\n\t\t\t\t\tthis._compiledCode = null;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tfilename: {\n\t\t\t\tvalue: useFileName || 'vm.js',\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tlineOffset: {\n\t\t\t\tvalue: lineOffset,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tcolumnOffset: {\n\t\t\t\tvalue: columnOffset,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tcompiler: {\n\t\t\t\tvalue: compiler,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t_code: {\n\t\t\t\tvalue: sCode,\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t_prefix: {\n\t\t\t\tvalue: '',\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t_suffix: {\n\t\t\t\tvalue: '',\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t_compiledVM: {\n\t\t\t\tvalue: null,\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t_compiledNodeVM: {\n\t\t\t\tvalue: null,\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t_compiledNodeVMStrict: {\n\t\t\t\tvalue: null,\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t_compiledCode: {\n\t\t\t\tvalue: null,\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t_compiler: {value: resolvedCompiler}\n\t\t});\n\t}\n\n\t/**\n\t * Wraps the code.<br>\n\t * This will replace the old wrapping.<br>\n\t * Will invalidate the code cache.\n\t *\n\t * @public\n\t * @deprecated Since v3.9.0. Wrap your code before passing it into the VMScript object.\n\t * @param {string} prefix - String that will be appended before the script code.\n\t * @param {script} suffix - String that will be appended behind the script code.\n\t * @return {this} This for chaining.\n\t * @throws {TypeError} If prefix or suffix is a Symbol.\n\t */\n\twrap(prefix, suffix) {\n\t\tconst strPrefix = `${prefix}`;\n\t\tconst strSuffix = `${suffix}`;\n\t\tif (this._prefix === strPrefix && this._suffix === strSuffix) return this;\n\t\tthis._prefix = strPrefix;\n\t\tthis._suffix = strSuffix;\n\t\tthis._compiledVM = null;\n\t\tthis._compiledNodeVM = null;\n\t\tthis._compiledNodeVMStrict = null;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Compile this script. <br>\n\t * This is useful to detect syntax errors in the script.\n\t *\n\t * @public\n\t * @return {this} This for chaining.\n\t * @throws {SyntaxError} If there is a syntax error in the script.\n\t */\n\tcompile() {\n\t\tthis._compileVM();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the compiled code.\n\t * \n\t * @private\n\t * @return {string} The code.\n\t */\n\tgetCompiledCode() {\n\t\tif (!this._compiledCode) {\n\t\t\tthis._compiledCode = this._compiler(this._prefix + removeShebang(this._code) + this._suffix, this.filename);\n\t\t}\n\t\treturn this._compiledCode;\n\t}\n\n\t/**\n\t * Compiles this script to a vm.Script.\n\t * \n\t * @private\n\t * @param {string} prefix - JavaScript code that will be used as prefix.\n\t * @param {string} suffix - JavaScript code that will be used as suffix.\n\t * @return {vm.Script} The compiled vm.Script.\n\t * @throws {SyntaxError} If there is a syntax error in the script.\n\t */\n\t_compile(prefix, suffix) {\n\t\treturn new vm.Script(prefix + this.getCompiledCode() + suffix, {\n\t\t\tfilename: this.filename,\n\t\t\tdisplayErrors: false,\n\t\t\tlineOffset: this.lineOffset,\n\t\t\tcolumnOffset: this.columnOffset,\n\t\t\timportModuleDynamically\n\t\t});\n\t}\n\n\t/**\n\t * Will return the cached version of the script intended for VM or compile it.\n\t * \n\t * @private\n\t * @return {vm.Script} The compiled script\n\t * @throws {SyntaxError} If there is a syntax error in the script.\n\t */\n\t_compileVM() {\n\t\tlet script = this._compiledVM;\n\t\tif (!script) {\n\t\t\tthis._compiledVM = script = this._compile('', '');\n\t\t}\n\t\treturn script;\n\t}\n\n\t/**\n\t * Will return the cached version of the script intended for NodeVM or compile it.\n\t * \n\t * @private\n\t * @return {vm.Script} The compiled script\n\t * @throws {SyntaxError} If there is a syntax error in the script.\n\t */\n\t_compileNodeVM() {\n\t\tlet script = this._compiledNodeVM;\n\t\tif (!script) {\n\t\t\tthis._compiledNodeVM = script = this._compile(MODULE_PREFIX, MODULE_SUFFIX);\n\t\t}\n\t\treturn script;\n\t}\n\n\t/**\n\t * Will return the cached version of the script intended for NodeVM in strict mode or compile it.\n\t * \n\t * @private\n\t * @return {vm.Script} The compiled script\n\t * @throws {SyntaxError} If there is a syntax error in the script.\n\t */\n\t_compileNodeVMStrict() {\n\t\tlet script = this._compiledNodeVMStrict;\n\t\tif (!script) {\n\t\t\tthis._compiledNodeVMStrict = script = this._compile(STRICT_MODULE_PREFIX, MODULE_SUFFIX);\n\t\t}\n\t\treturn script;\n\t}\n\n}\n\n/**\n * \n * This callback will be called and has a specific time to finish.<br>\n * No parameters will be supplied.<br>\n * If parameters are required, use a closure.\n * \n * @private\n * @callback runWithTimeout\n * @return {*} \n * \n */\n\n/**\n * Run a function with a specific timeout.\n * \n * @private\n * @param {runWithTimeout} fn - Function to run with the specific timeout.\n * @param {number} timeout - The amount of time to give the function to finish.\n * @return {*} The value returned by the function.\n * @throws {Error} If the function took to long.\n */\nfunction doWithTimeout(fn, timeout) {\n\tlet ctx = CACHE.timeoutContext;\n\tlet script = CACHE.timeoutScript;\n\tif (!ctx) {\n\t\tCACHE.timeoutContext = ctx = vm.createContext();\n\t\tCACHE.timeoutScript = script = new vm.Script('fn()', {\n\t\t\tfilename: 'timeout_bridge.js',\n\t\t\tdisplayErrors: false,\n\t\t\timportModuleDynamically\n\t\t});\n\t}\n\tctx.fn = fn;\n\ttry {\n\t\treturn script.runInContext(ctx, {\n\t\t\tdisplayErrors: false,\n\t\t\timportModuleDynamically,\n\t\t\ttimeout\n\t\t});\n\t} finally {\n\t\tctx.fn = null;\n\t}\n}\n\nfunction tryCompile(args) {\n\tconst code = args[args.length - 1];\n\tconst params = args.slice(0, -1);\n\tvm.compileFunction(code, params);\n}\n\nfunction makeCheckHook(checkAsync, checkImport) {\n\tif (!checkAsync && !checkImport) return null;\n\treturn (hook, args) => {\n\t\tif (hook === 'function' || hook === 'generator_function' || hook === 'eval' || hook === 'run' ||\n\t\t\t(!checkAsync && (hook === 'async_function' || hook === 'async_generator_function'))) {\n\t\t\tif (hook === 'eval') {\n\t\t\t\tconst script = args[0];\n\t\t\t\targs = [script];\n\t\t\t\tif (typeof(script) !== 'string') return args;\n\t\t\t} else {\n\t\t\t\t// Next line throws on Symbol, this is the same behavior as function constructor calls\n\t\t\t\targs = args.map(arg => `${arg}`);\n\t\t\t}\n\t\t\tconst hasAsync = checkAsync && args.findIndex(arg => /\\basync\\b/.test(arg)) !== -1;\n\t\t\tconst hasImport = checkImport && args.findIndex(arg => /\\bimport\\b/.test(arg)) !== -1;\n\t\t\tif (!hasAsync && !hasImport) return args;\n\t\t\tconst mapped = args.map(arg => {\n\t\t\t\tif (hasAsync) arg = arg.replace(/async/g, 'a\\\\u0073ync');\n\t\t\t\tif (hasImport) arg = arg.replace(/import/g, 'i\\\\u006dport');\n\t\t\t\treturn arg;\n\t\t\t});\n\t\t\ttry {\n\t\t\t\ttryCompile(mapped);\n\t\t\t} catch (u) {\n\t\t\t\t// Some random syntax error or error because of async or import.\n\n\t\t\t\t// First report real syntax errors\n\t\t\t\ttryCompile(args);\n\n\t\t\t\tif (hasAsync && hasImport) {\n\t\t\t\t\tconst mapped2 = args.map(arg => arg.replace(/async/g, 'a\\\\u0073ync'));\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttryCompile(mapped2);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tthrow new VMError('Async not available');\n\t\t\t\t\t}\n\t\t\t\t\tthrow new VMError('Dynamic Import not supported');\n\t\t\t\t}\n\t\t\t\tif (hasAsync) {\n\t\t\t\t\t// Then async error\n\t\t\t\t\tthrow new VMError('Async not available');\n\t\t\t\t}\n\t\t\t\tthrow new VMError('Dynamic Import not supported');\n\t\t\t}\n\t\t\treturn args;\n\t\t}\n\t\tif (checkAsync) throw new VMError('Async not available');\n\t\treturn args;\n\t};\n}\n\n/**\n * Class VM.\n *\n * @public\n */\nclass VM extends EventEmitter {\n\n\t/**\n\t * The timeout for {@link VM#run} calls.\n\t *\n\t * @public\n\t * @since v3.9.0\n\t * @member {number} timeout\n\t * @memberOf VM#\n\t */\n\n\t/**\n\t * Get the global sandbox object.\n\t *\n\t * @public\n\t * @readonly\n\t * @since v3.9.0\n\t * @member {Object} sandbox\n\t * @memberOf VM#\n\t */\n\n\t/**\n\t * The compiler to use to get the JavaScript code.\n\t * \n\t * @public\n\t * @readonly\n\t * @since v3.9.0\n\t * @member {(string|compileCallback)} compiler\n\t * @memberOf VM#\n\t */\n\n\t/**\n\t * The context for this sandbox.\n\t * \n\t * @private\n\t * @readonly\n\t * @member {Object} _context\n\t * @memberOf VM#\n\t */\n\n\t/**\n\t * The internal methods for this sandbox.\n\t * \n\t * @private\n\t * @readonly\n\t * @member {{Contextify: Object, Decontextify: Object, Buffer: Object, sandbox:Object}} _internal\n\t * @memberOf VM#\n\t */\n\n\t/**\n\t * The resolved compiler to use to get the JavaScript code.\n\t * \n\t * @private\n\t * @readonly\n\t * @member {compileCallback} _compiler\n\t * @memberOf VM#\n\t */\n\n\t/**\n\t * The hook called when some events occurs.\n\t * \n\t * @private\n\t * @readonly\n\t * @since v3.9.2\n\t * @member {Function} _hook\n\t * @memberOf VM#\n\t */\n\n\t/**\n\t * Create a new VM instance.\n\t *\n\t * @public\n\t * @param {Object} [options] - VM options.\n\t * @param {number} [options.timeout] - The amount of time until a call to {@link VM#run} will timeout.\n\t * @param {Object} [options.sandbox] - Objects that will be copied into the global object of the sandbox.\n\t * @param {(string|compileCallback)} [options.compiler=\"javascript\"] - The compiler to use.\n\t * @param {boolean} [options.eval=true] - Allow the dynamic evaluation of code via eval(code) or Function(code)().<br>\n\t * Only available for node v10+.\n\t * @param {boolean} [options.wasm=true] - Allow to run wasm code.<br>\n\t * Only available for node v10+.\n\t * @param {boolean} [options.fixAsync=false] - Filters for async functions.\n\t * @throws {VMError} If the compiler is unknown.\n\t */\n\tconstructor(options = {}) {\n\t\tsuper();\n\n\t\t// Read all options\n\t\tconst {\n\t\t\ttimeout,\n\t\t\tsandbox,\n\t\t\tcompiler = 'javascript'\n\t\t} = options;\n\t\tconst allowEval = options.eval !== false;\n\t\tconst allowWasm = options.wasm !== false;\n\t\tconst fixAsync = !!options.fixAsync;\n\n\t\t// Early error if sandbox is not an object.\n\t\tif (sandbox && 'object' !== typeof sandbox) {\n\t\t\tthrow new VMError('Sandbox must be object.');\n\t\t}\n\n\t\t// Early error if compiler can't be found.\n\t\tconst resolvedCompiler = lookupCompiler(compiler);\n\n\t\t// Create a new context for this vm.\n\t\tconst _context = vm.createContext(undefined, {\n\t\t\tcodeGeneration: {\n\t\t\t\tstrings: allowEval,\n\t\t\t\twasm: allowWasm\n\t\t\t}\n\t\t});\n\n\t\t// Create the bridge between the host and the sandbox.\n\t\tconst _internal = CACHE.contextifyScript.runInContext(_context, DEFAULT_RUN_OPTIONS).call(_context, require, HOST);\n\n\t\tconst hook = makeCheckHook(fixAsync, true);\n\n\t\t// Define the properties of this object.\n\t\t// Use Object.defineProperties here to be able to\n\t\t// hide and set properties write only.\n\t\tObject.defineProperties(this, {\n\t\t\ttimeout: {\n\t\t\t\tvalue: timeout,\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tcompiler: {\n\t\t\t\tvalue: compiler,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tsandbox: {\n\t\t\t\tvalue: _internal.sandbox,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t_context: {value: _context},\n\t\t\t_internal: {value: _internal},\n\t\t\t_compiler: {value: resolvedCompiler},\n\t\t\t_hook: {value: hook}\n\t\t});\n\n\t\tif (hook) {\n\t\t\tif (!CACHE.hookScript) {\n\t\t\t\tCACHE.hookScript = loadAndCompileScript(`${__dirname}/fixasync.js`, '(function() { ', '\\n})');\n\t\t\t\tCACHE.getGlobalScript = new vm.Script('this', {\n\t\t\t\t\tfilename: 'get_global.js',\n\t\t\t\t\tdisplayErrors: false,\n\t\t\t\t\timportModuleDynamically\n\t\t\t\t});\n\t\t\t\ttry {\n\t\t\t\t\tCACHE.getGeneratorFunctionScript = new vm.Script('(function*(){}).constructor', {\n\t\t\t\t\t\tfilename: 'get_generator_function.js',\n\t\t\t\t\t\tdisplayErrors: false,\n\t\t\t\t\t\timportModuleDynamically\n\t\t\t\t\t});\n\t\t\t\t} catch (ex) {}\n\t\t\t\ttry {\n\t\t\t\t\tCACHE.getAsyncFunctionScript = new vm.Script('(async function(){}).constructor', {\n\t\t\t\t\t\tfilename: 'get_async_function.js',\n\t\t\t\t\t\tdisplayErrors: false,\n\t\t\t\t\t\timportModuleDynamically\n\t\t\t\t\t});\n\t\t\t\t} catch (ex) {}\n\t\t\t\ttry {\n\t\t\t\t\tCACHE.getAsyncGeneratorFunctionScript = new vm.Script('(async function*(){}).constructor', {\n\t\t\t\t\t\tfilename: 'get_async_generator_function.js',\n\t\t\t\t\t\tdisplayErrors: false,\n\t\t\t\t\t\timportModuleDynamically\n\t\t\t\t\t});\n\t\t\t\t} catch (ex) {}\n\t\t\t}\n\t\t\tconst internal = {\n\t\t\t\t__proto__: null,\n\t\t\t\tglobal: CACHE.getGlobalScript.runInContext(_context, DEFAULT_RUN_OPTIONS),\n\t\t\t\tinternal: _internal,\n\t\t\t\thost: HOST,\n\t\t\t\thook\n\t\t\t};\n\t\t\tif (CACHE.getGeneratorFunctionScript) {\n\t\t\t\ttry {\n\t\t\t\t\tinternal.GeneratorFunction = CACHE.getGeneratorFunctionScript.runInContext(_context, DEFAULT_RUN_OPTIONS);\n\t\t\t\t} catch (ex) {}\n\t\t\t}\n\t\t\tif (CACHE.getAsyncFunctionScript) {\n\t\t\t\ttry {\n\t\t\t\t\tinternal.AsyncFunction = CACHE.getAsyncFunctionScript.runInContext(_context, DEFAULT_RUN_OPTIONS);\n\t\t\t\t} catch (ex) {}\n\t\t\t}\n\t\t\tif (CACHE.getAsyncGeneratorFunctionScript) {\n\t\t\t\ttry {\n\t\t\t\t\tinternal.AsyncGeneratorFunction = CACHE.getAsyncGeneratorFunctionScript.runInContext(_context, DEFAULT_RUN_OPTIONS);\n\t\t\t\t} catch (ex) {}\n\t\t\t}\n\t\t\tCACHE.hookScript.runInContext(_context, DEFAULT_RUN_OPTIONS).call(internal);\n\t\t}\n\n\t\t// prepare global sandbox\n\t\tif (sandbox) {\n\t\t\tthis.setGlobals(sandbox);\n\t\t}\n\t}\n\n\t/**\n\t * Adds all the values to the globals.\n\t * \n\t * @public\n\t * @since v3.9.0\n\t * @param {Object} values - All values that will be added to the globals.\n\t * @return {this} This for chaining.\n\t * @throws {*} If the setter of a global throws an exception it is propagated. And the remaining globals will not be written.\n\t */\n\tsetGlobals(values) {\n\t\tfor (const name in values) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(values, name)) {\n\t\t\t\tthis._internal.Contextify.setGlobal(name, values[name]);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set a global value.\n\t * \n\t * @public\n\t * @since v3.9.0\n\t * @param {string} name - The name of the global.\n\t * @param {*} value - The value of the global.\n\t * @return {this} This for chaining.\n\t * @throws {*} If the setter of the global throws an exception it is propagated.\n\t */\n\tsetGlobal(name, value) {\n\t\tthis._internal.Contextify.setGlobal(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get a global value.\n\t * \n\t * @public\n\t * @since v3.9.0\n\t * @param {string} name - The name of the global.\n\t * @return {*} The value of the global.\n\t * @throws {*} If the getter of the global throws an exception it is propagated.\n\t */\n\tgetGlobal(name) {\n\t\treturn this._internal.Contextify.getGlobal(name);\n\t}\n\n\t/**\n\t * Freezes the object inside VM making it read-only. Not available for primitive values.\n\t *\n\t * @public\n\t * @param {*} value - Object to freeze.\n\t * @param {string} [globalName] - Whether to add the object to global.\n\t * @return {*} Object to freeze.\n\t * @throws {*} If the setter of the global throws an exception it is propagated.\n\t */\n\tfreeze(value, globalName) {\n\t\tthis._internal.Contextify.readonly(value);\n\t\tif (globalName) this._internal.Contextify.setGlobal(globalName, value);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Protects the object inside VM making impossible to set functions as it's properties. Not available for primitive values.\n\t *\n\t * @public\n\t * @param {*} value - Object to protect.\n\t * @param {string} [globalName] - Whether to add the object to global.\n\t * @return {*} Object to protect.\n\t * @throws {*} If the setter of the global throws an exception it is propagated.\n\t */\n\tprotect(value, globalName) {\n\t\tthis._internal.Contextify.protected(value);\n\t\tif (globalName) this._internal.Contextify.setGlobal(globalName, value);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Run the code in VM.\n\t *\n\t * @public\n\t * @param {(string|VMScript)} code - Code to run.\n\t * @param {string} [filename=\"vm.js\"] - Filename that shows up in any stack traces produced from this script.<br>\n\t * This is only used if code is a String.\n\t * @return {*} Result of executed code.\n\t * @throws {SyntaxError} If there is a syntax error in the script.\n\t * @throws {Error} An error is thrown when the script took to long and there is a timeout.\n\t * @throws {*} If the script execution terminated with an exception it is propagated.\n\t */\n\trun(code, filename) {\n\t\tlet script;\n\t\tif (code instanceof VMScript) {\n\t\t\tif (this._hook) {\n\t\t\t\tconst scriptCode = code.getCompiledCode();\n\t\t\t\tconst changed = this._hook('run', [scriptCode])[0];\n\t\t\t\tif (changed === scriptCode) {\n\t\t\t\t\tscript = code._compileVM();\n\t\t\t\t} else {\n\t\t\t\t\tscript = new vm.Script(changed, {\n\t\t\t\t\t\tfilename: code.filename,\n\t\t\t\t\t\tdisplayErrors: false,\n\t\t\t\t\t\timportModuleDynamically\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tscript = code._compileVM();\n\t\t\t}\n\t\t} else {\n\t\t\tconst useFileName = filename || 'vm.js';\n\t\t\tlet scriptCode = this._compiler(code, useFileName);\n\t\t\tif (this._hook) {\n\t\t\t\tscriptCode = this._hook('run', [scriptCode])[0];\n\t\t\t}\n\t\t\t// Compile the script here so that we don't need to create a instance of VMScript.\n\t\t\tscript = new vm.Script(scriptCode, {\n\t\t\t\tfilename: useFileName,\n\t\t\t\tdisplayErrors: false,\n\t\t\t\timportModuleDynamically\n\t\t\t});\n\t\t}\n\n\t\tif (!this.timeout) {\n\t\t\t// If no timeout is given, directly run the script.\n\t\t\ttry {\n\t\t\t\treturn this._internal.Decontextify.value(script.runInContext(this._context, DEFAULT_RUN_OPTIONS));\n\t\t\t} catch (e) {\n\t\t\t\tthrow this._internal.Decontextify.value(e);\n\t\t\t}\n\t\t}\n\n\t\treturn doWithTimeout(()=>{\n\t\t\ttry {\n\t\t\t\treturn this._internal.Decontextify.value(script.runInContext(this._context, DEFAULT_RUN_OPTIONS));\n\t\t\t} catch (e) {\n\t\t\t\tthrow this._internal.Decontextify.value(e);\n\t\t\t}\n\t\t}, this.timeout);\n\t}\n\n\t/**\n\t * Run the code in VM.\n\t *\n\t * @public\n\t * @since v3.9.0\n\t * @param {string} filename - Filename of file to load and execute in a NodeVM.\n\t * @return {*} Result of executed code.\n\t * @throws {Error} If filename is not a valid filename.\n\t * @throws {SyntaxError} If there is a syntax error in the script.\n\t * @throws {Error} An error is thrown when the script took to long and there is a timeout.\n\t * @throws {*} If the script execution terminated with an exception it is propagated.\n\t */\n\trunFile(filename) {\n\t\tconst resolvedFilename = pa.resolve(filename);\n\n\t\tif (!fs.existsSync(resolvedFilename)) {\n\t\t\tthrow new VMError(`Script '${filename}' not found.`);\n\t\t}\n\n\t\tif (fs.statSync(resolvedFilename).isDirectory()) {\n\t\t\tthrow new VMError('Script must be file, got directory.');\n\t\t}\n\n\t\treturn this.run(fs.readFileSync(resolvedFilename, 'utf8'), resolvedFilename);\n\t}\n\n}\n\n/**\n * Event caused by a <code>console.debug</code> call if <code>options.console=\"redirect\"</code> is specified.\n *\n * @public\n * @event NodeVM.\"console.debug\"\n * @type {...*}\n */\n\n/**\n * Event caused by a <code>console.log</code> call if <code>options.console=\"redirect\"</code> is specified.\n *\n * @public\n * @event NodeVM.\"console.log\"\n * @type {...*}\n */\n\n/**\n * Event caused by a <code>console.info</code> call if <code>options.console=\"redirect\"</code> is specified.\n *\n * @public\n * @event NodeVM.\"console.info\"\n * @type {...*}\n */\n\n/**\n * Event caused by a <code>console.warn</code> call if <code>options.console=\"redirect\"</code> is specified.\n *\n * @public\n * @event NodeVM.\"console.warn\"\n * @type {...*}\n */\n\n/**\n * Event caused by a <code>console.error</code> call if <code>options.console=\"redirect\"</code> is specified.\n *\n * @public\n * @event NodeVM.\"console.error\"\n * @type {...*}\n */\n\n/**\n * Event caused by a <code>console.dir</code> call if <code>options.console=\"redirect\"</code> is specified.\n *\n * @public\n * @event NodeVM.\"console.dir\"\n * @type {...*}\n */\n\n/**\n * Event caused by a <code>console.trace</code> call if <code>options.console=\"redirect\"</code> is specified.\n *\n * @public\n * @event NodeVM.\"console.trace\"\n * @type {...*}\n */\n\n/**\n * Class NodeVM.\n *\n * @public\n * @extends {VM}\n * @extends {EventEmitter}\n */\nclass NodeVM extends VM {\n\n\t/**\n\t * Create a new NodeVM instance.<br>\n\t *\n\t * Unlike VM, NodeVM lets you use require same way like in regular node.<br>\n\t * \n\t * However, it does not use the timeout.\n\t *\n\t * @public\n\t * @param {Object} [options] - VM options.\n\t * @param {Object} [options.sandbox] - Objects that will be copied into the global object of the sandbox.\n\t * @param {(string|compileCallback)} [options.compiler=\"javascript\"] - The compiler to use.\n\t * @param {boolean} [options.eval=true] - Allow the dynamic evaluation of code via eval(code) or Function(code)().<br>\n\t * Only available for node v10+.\n\t * @param {boolean} [options.wasm=true] - Allow to run wasm code.<br>\n\t * Only available for node v10+.\n\t * @param {(\"inherit\"|\"redirect\"|\"off\")} [options.console=\"inherit\"] - Sets the behavior of the console in the sandbox.\n\t * <code>inherit</code> to enable console, <code>redirect</code> to redirect to events, <code>off</code> to disable console.\n\t * @param {Object|boolean} [options.require=false] - Allow require inside the sandbox.\n\t * @param {(boolean|string[]|Object)} [options.require.external=false] - true, an array of allowed external modules or an object.\n\t * @param {(string[])} [options.require.external.modules] - Array of allowed external modules. Also supports wildcards, so specifying ['@scope/*-ver-??], \n\t * for instance, will allow using all modules having a name of the form @scope/something-ver-aa, @scope/other-ver-11, etc.\n\t * @param {boolean} [options.require.external.transitive=false] - Boolean which indicates if transitive dependencies of external modules are allowed.\n\t * @param {string[]} [options.require.builtin=[]] - Array of allowed builtin modules, accepts [\"*\"] for all.\n\t * @param {(string|string[])} [options.require.root] - Restricted path(s) where local modules can be required. If omitted every path is allowed.\n\t * @param {Object} [options.require.mock] - Collection of mock modules (both external or builtin).\n\t * @param {(\"host\"|\"sandbox\")} [options.require.context=\"host\"] - <code>host</code> to require modules in host and proxy them to sandbox.\n\t * <code>sandbox</code> to load, compile and require modules in sandbox.\n\t * Builtin modules except <code>events</code> always required in host and proxied to sandbox.\n\t * @param {string[]} [options.require.import] - Array of modules to be loaded into NodeVM on start.\n\t * @param {resolveCallback} [options.require.resolve] - An additional lookup function in case a module wasn't\n\t * found in one of the traditional node lookup paths.\n\t * @param {boolean} [options.nesting=false] - Allow nesting of VMs.\n\t * @param {(\"commonjs\"|\"none\")} [options.wrapper=\"commonjs\"] - <code>commonjs</code> to wrap script into CommonJS wrapper, \n\t * <code>none</code> to retrieve value returned by the script.\n\t * @param {string[]} [options.sourceExtensions=[\"js\"]] - Array of file extensions to treat as source code.\n\t * @param {string[]} [options.argv=[]] - Array of arguments passed to <code>process.argv</code>. \n\t * This object will not be copied and the script can change this object.\n\t * @param {Object} [options.env={}] - Environment map passed to <code>process.env</code>. \n\t * This object will not be copied and the script can change this object.\n\t * @param {boolean} [options.strict=false] - If modules should be loaded in strict mode.\n\t * @throws {VMError} If the compiler is unknown.\n\t */\n\tconstructor(options = {}) {\n\t\tconst sandbox = options.sandbox;\n\n\t\t// Throw this early\n\t\tif (sandbox && 'object' !== typeof sandbox) {\n\t\t\tthrow new VMError('Sandbox must be object.');\n\t\t}\n\n\t\tsuper({compiler: options.compiler, eval: options.eval, wasm: options.wasm});\n\n\t\t// defaults\n\t\tObject.defineProperty(this, 'options', {value: {\n\t\t\tconsole: options.console || 'inherit',\n\t\t\trequire: options.require || false,\n\t\t\tnesting: options.nesting || false,\n\t\t\twrapper: options.wrapper || 'commonjs',\n\t\t\tsourceExtensions: options.sourceExtensions || ['js'],\n\t\t\tstrict: options.strict || false\n\t\t}});\n\n\t\tlet sandboxScript = CACHE.sandboxScript;\n\t\tif (!sandboxScript) {\n\t\t\tCACHE.sandboxScript = sandboxScript = loadAndCompileScript(`${__dirname}/sandbox.js`,\n\t\t\t\t'(function (vm, host, Contextify, Decontextify, Buffer, options) { ', '\\n})');\n\t\t}\n\n\t\tconst closure = sandboxScript.runInContext(this._context, DEFAULT_RUN_OPTIONS);\n\n\t\tObject.defineProperty(this, '_prepareRequire', {\n\t\t\tvalue: closure.call(this._context, this, HOST, this._internal.Contextify, this._internal.Decontextify, this._internal.Buffer, options)\n\t\t});\n\n\t\t// prepare global sandbox\n\t\tif (sandbox) {\n\t\t\tthis.setGlobals(sandbox);\n\t\t}\n\n\t\tif (this.options.require && this.options.require.import) {\n\t\t\tif (Array.isArray(this.options.require.import)) {\n\t\t\t\tfor (let i = 0, l = this.options.require.import.length; i < l; i++) {\n\t\t\t\t\tthis.require(this.options.require.import[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.require(this.options.require.import);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t * @deprecated Just call the method yourself like <code>method(args);</code>\n\t * @param {function} method - Function to invoke.\n\t * @param {...*} args - Arguments to pass to the function.\n\t * @return {*} Return value of the function.\n\t * @todo Can we remove this function? It even had a bug that would use args as this parameter.\n\t * @throws {*} Rethrows anything the method throws.\n\t * @throws {VMError} If method is not a function.\n\t * @throws {Error} If method is a class.\n\t */\n\tcall(method, ...args) {\n\t\tif ('function' === typeof method) {\n\t\t\treturn method(...args);\n\t\t} else {\n\t\t\tthrow new VMError('Unrecognized method type.');\n\t\t}\n\t}\n\n\t/**\n\t * Require a module in VM and return it's exports.\n\t *\n\t * @public\n\t * @param {string} module - Module name.\n\t * @return {*} Exported module.\n\t * @throws {*} If the module couldn't be found or loading it threw an error.\n\t */\n\trequire(module) {\n\t\treturn this.run(`module.exports = require('${module}');`, 'vm.js');\n\t}\n\n\t/**\n\t * Run the code in NodeVM.\n\t *\n\t * First time you run this method, code is executed same way like in node's regular `require` - it's executed with\n\t * `module`, `require`, `exports`, `__dirname`, `__filename` variables and expect result in `module.exports'.\n\t *\n\t * @param {(string|VMScript)} code - Code to run.\n\t * @param {string} [filename] - Filename that shows up in any stack traces produced from this script.<br>\n\t * This is only used if code is a String.\n\t * @return {*} Result of executed code.\n\t * @throws {SyntaxError} If there is a syntax error in the script.\n\t * @throws {*} If the script execution terminated with an exception it is propagated.\n\t * @fires NodeVM.\"console.debug\"\n\t * @fires NodeVM.\"console.log\"\n\t * @fires NodeVM.\"console.info\"\n\t * @fires NodeVM.\"console.warn\"\n\t * @fires NodeVM.\"console.error\"\n\t * @fires NodeVM.\"console.dir\"\n\t * @fires NodeVM.\"console.trace\"\n\t */\n\trun(code, filename) {\n\t\tlet dirname;\n\t\tlet resolvedFilename;\n\t\tlet script;\n\n\t\tif (code instanceof VMScript) {\n\t\t\tif (this._hook) {\n\t\t\t\tconst prefix = this.options.strict ? STRICT_MODULE_PREFIX : MODULE_PREFIX;\n\t\t\t\tconst scriptCode = prefix + code.getCompiledCode() + MODULE_SUFFIX;\n\t\t\t\tconst changed = this._hook('run', [scriptCode])[0];\n\t\t\t\tif (changed === scriptCode) {\n\t\t\t\t\tscript = this.options.strict ? code._compileNodeVMStrict() : code._compileNodeVM();\n\t\t\t\t} else {\n\t\t\t\t\tscript = new vm.Script(changed, {\n\t\t\t\t\t\tfilename: code.filename,\n\t\t\t\t\t\tdisplayErrors: false,\n\t\t\t\t\t\timportModuleDynamically\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tscript = this.options.strict ? code._compileNodeVMStrict() : code._compileNodeVM();\n\t\t\t}\n\t\t\tresolvedFilename = pa.resolve(code.filename);\n\t\t\tdirname = pa.dirname(resolvedFilename);\n\t\t} else {\n\t\t\tconst unresolvedFilename = filename || 'vm.js';\n\t\t\tif (filename) {\n\t\t\t\tresolvedFilename = pa.resolve(filename);\n\t\t\t\tdirname = pa.dirname(resolvedFilename);\n\t\t\t} else {\n\t\t\t\tresolvedFilename = null;\n\t\t\t\tdirname = null;\n\t\t\t}\n\t\t\tconst prefix = this.options.strict ? STRICT_MODULE_PREFIX : MODULE_PREFIX;\n\t\t\tlet scriptCode = prefix + this._compiler(code, unresolvedFilename) + MODULE_SUFFIX;\n\t\t\tif (this._hook) {\n\t\t\t\tscriptCode = this._hook('run', [scriptCode])[0];\n\t\t\t}\n\t\t\tscript = new vm.Script(scriptCode, {\n\t\t\t\tfilename: unresolvedFilename,\n\t\t\t\tdisplayErrors: false,\n\t\t\t\timportModuleDynamically\n\t\t\t});\n\t\t}\n\n\t\tconst wrapper = this.options.wrapper;\n\t\tconst module = this._internal.Contextify.makeModule();\n\n\t\ttry {\n\t\t\tconst closure = script.runInContext(this._context, DEFAULT_RUN_OPTIONS);\n\n\t\t\tconst returned = closure.call(this._context, module.exports, this._prepareRequire(dirname), module, resolvedFilename, dirname);\n\n\t\t\treturn this._internal.Decontextify.value(wrapper === 'commonjs' ? module.exports : returned);\n\t\t} catch (e) {\n\t\t\tthrow this._internal.Decontextify.value(e);\n\t\t}\n\n\t}\n\n\t/**\n\t * Create NodeVM and run code inside it.\n\t *\n\t * @public\n\t * @static\n\t * @param {string} script - Code to execute.\n\t * @param {string} [filename] - File name (used in stack traces only).\n\t * @param {Object} [options] - VM options.\n\t * @param {string} [options.filename] - File name (used in stack traces only). Used if <code>filename</code> is omitted.\n\t * @return {*} Result of executed code.\n\t * @see {@link NodeVM} for the options.\n\t * @throws {SyntaxError} If there is a syntax error in the script.\n\t * @throws {*} If the script execution terminated with an exception it is propagated.\n\t */\n\tstatic code(script, filename, options) {\n\t\tlet unresolvedFilename;\n\t\tif (filename != null) {\n\t\t\tif ('object' === typeof filename) {\n\t\t\t\toptions = filename;\n\t\t\t\tunresolvedFilename = options.filename;\n\t\t\t} else if ('string' === typeof filename) {\n\t\t\t\tunresolvedFilename = filename;\n\t\t\t} else {\n\t\t\t\tthrow new VMError('Invalid arguments.');\n\t\t\t}\n\t\t} else if ('object' === typeof options) {\n\t\t\tunresolvedFilename = options.filename;\n\t\t}\n\n\t\tif (arguments.length > 3) {\n\t\t\tthrow new VMError('Invalid number of arguments.');\n\t\t}\n\n\t\tconst resolvedFilename = typeof unresolvedFilename === 'string' ? pa.resolve(unresolvedFilename) : undefined;\n\n\t\treturn new NodeVM(options).run(script, resolvedFilename);\n\t}\n\n\t/**\n\t * Create NodeVM and run script from file inside it.\n\t *\n\t * @public\n\t * @static\n\t * @param {string} filename - Filename of file to load and execute in a NodeVM.\n\t * @param {Object} [options] - NodeVM options.\n\t * @return {*} Result of executed code.\n\t * @see {@link NodeVM} for the options.\n\t * @throws {Error} If filename is not a valid filename.\n\t * @throws {SyntaxError} If there is a syntax error in the script.\n\t * @throws {*} If the script execution terminated with an exception it is propagated.\n\t */\n\tstatic file(filename, options) {\n\t\tconst resolvedFilename = pa.resolve(filename);\n\n\t\tif (!fs.existsSync(resolvedFilename)) {\n\t\t\tthrow new VMError(`Script '${filename}' not found.`);\n\t\t}\n\n\t\tif (fs.statSync(resolvedFilename).isDirectory()) {\n\t\t\tthrow new VMError('Script must be file, got directory.');\n\t\t}\n\n\t\treturn new NodeVM(options).run(fs.readFileSync(resolvedFilename, 'utf8'), resolvedFilename);\n\t}\n}\n\n/**\n * VMError.\n *\n * @public\n * @extends {Error}\n */\nclass VMError extends Error {\n\n\t/**\n\t * Create VMError instance.\n\t *\n\t * @public\n\t * @param {string} message - Error message.\n\t */\n\tconstructor(message) {\n\t\tsuper(message);\n\n\t\tthis.name = 'VMError';\n\n\t\tError.captureStackTrace(this, this.constructor);\n\t}\n}\n\n/**\n * Host objects\n * \n * @private\n */\nconst HOST = {\n\tversion: parseInt(process.versions.node.split('.')[0]),\n\trequire,\n\tprocess,\n\tconsole,\n\tsetTimeout,\n\tsetInterval,\n\tsetImmediate,\n\tclearTimeout,\n\tclearInterval,\n\tclearImmediate,\n\tString,\n\tNumber,\n\tBuffer,\n\tBoolean,\n\tArray,\n\tDate,\n\tError,\n\tEvalError,\n\tRangeError,\n\tReferenceError,\n\tSyntaxError,\n\tTypeError,\n\tURIError,\n\tRegExp,\n\tFunction,\n\tObject,\n\tVMError,\n\tProxy,\n\tReflect,\n\tMap,\n\tWeakMap,\n\tSet,\n\tWeakSet,\n\tPromise,\n\tSymbol,\n\tINSPECT_MAX_BYTES,\n\tVM,\n\tNodeVM,\n\thelpers,\n\tMODULE_PREFIX,\n\tSTRICT_MODULE_PREFIX,\n\tMODULE_SUFFIX\n};\n\nexports.VMError = VMError;\nexports.NodeVM = NodeVM;\nexports.VM = VM;\nexports.VMScript = VMScript;\n"]},"metadata":{},"sourceType":"script"}