{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.lookupMissingTriggerRegions = void 0;\n\nconst backend = require(\"./backend\");\n\nconst storage = require(\"../../gcp/storage\");\n\nconst error_1 = require(\"../../error\");\n\nconst logger_1 = require(\"../../logger\");\n\nconst noop = () => Promise.resolve();\n\nconst LOOKUP_BY_EVENT_TYPE = {\n  \"google.cloud.pubsub.topic.v1.messagePublished\": noop,\n  \"google.cloud.storage.object.v1.finalized\": lookupBucketRegion,\n  \"google.cloud.storage.object.v1.archived\": lookupBucketRegion,\n  \"google.cloud.storage.object.v1.deleted\": lookupBucketRegion,\n  \"google.cloud.storage.object.v1.metadataUpdated\": lookupBucketRegion\n};\n\nasync function lookupMissingTriggerRegions(want) {\n  const regionLookups = [];\n\n  for (const ep of backend.allEndpoints(want)) {\n    if (ep.platform === \"gcfv1\" || !backend.isEventTriggered(ep) || ep.eventTrigger.region) {\n      continue;\n    }\n\n    const lookup = LOOKUP_BY_EVENT_TYPE[ep.eventTrigger.eventType];\n\n    if (!lookup) {\n      logger_1.logger.debug(\"Don't know how to look up trigger region for event type\", ep.eventTrigger.eventType, \". Deploy will fail unless this event type is global\");\n      continue;\n    }\n\n    regionLookups.push(lookup(ep));\n  }\n\n  await Promise.all(regionLookups);\n}\n\nexports.lookupMissingTriggerRegions = lookupMissingTriggerRegions;\n\nasync function lookupBucketRegion(endpoint) {\n  try {\n    const bucket = await storage.getBucket(endpoint.eventTrigger.eventFilters.bucket);\n    endpoint.eventTrigger.region = bucket.location.toLowerCase();\n  } catch (err) {\n    throw new error_1.FirebaseError(\"Can't find the storage bucket region\", {\n      original: err\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/deploy/functions/triggerRegionHelper.js"],"names":["Object","defineProperty","exports","value","lookupMissingTriggerRegions","backend","require","storage","error_1","logger_1","noop","Promise","resolve","LOOKUP_BY_EVENT_TYPE","lookupBucketRegion","want","regionLookups","ep","allEndpoints","platform","isEventTriggered","eventTrigger","region","lookup","eventType","logger","debug","push","all","endpoint","bucket","getBucket","eventFilters","location","toLowerCase","err","FirebaseError","original"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,2BAAR,GAAsC,KAAK,CAA3C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,cAAD,CAAxB;;AACA,MAAMI,IAAI,GAAG,MAAMC,OAAO,CAACC,OAAR,EAAnB;;AACA,MAAMC,oBAAoB,GAAG;AACzB,mDAAiDH,IADxB;AAEzB,8CAA4CI,kBAFnB;AAGzB,6CAA2CA,kBAHlB;AAIzB,4CAA0CA,kBAJjB;AAKzB,oDAAkDA;AALzB,CAA7B;;AAOA,eAAeV,2BAAf,CAA2CW,IAA3C,EAAiD;AAC7C,QAAMC,aAAa,GAAG,EAAtB;;AACA,OAAK,MAAMC,EAAX,IAAiBZ,OAAO,CAACa,YAAR,CAAqBH,IAArB,CAAjB,EAA6C;AACzC,QAAIE,EAAE,CAACE,QAAH,KAAgB,OAAhB,IAA2B,CAACd,OAAO,CAACe,gBAAR,CAAyBH,EAAzB,CAA5B,IAA4DA,EAAE,CAACI,YAAH,CAAgBC,MAAhF,EAAwF;AACpF;AACH;;AACD,UAAMC,MAAM,GAAGV,oBAAoB,CAACI,EAAE,CAACI,YAAH,CAAgBG,SAAjB,CAAnC;;AACA,QAAI,CAACD,MAAL,EAAa;AACTd,MAAAA,QAAQ,CAACgB,MAAT,CAAgBC,KAAhB,CAAsB,yDAAtB,EAAiFT,EAAE,CAACI,YAAH,CAAgBG,SAAjG,EAA4G,qDAA5G;AACA;AACH;;AACDR,IAAAA,aAAa,CAACW,IAAd,CAAmBJ,MAAM,CAACN,EAAD,CAAzB;AACH;;AACD,QAAMN,OAAO,CAACiB,GAAR,CAAYZ,aAAZ,CAAN;AACH;;AACDd,OAAO,CAACE,2BAAR,GAAsCA,2BAAtC;;AACA,eAAeU,kBAAf,CAAkCe,QAAlC,EAA4C;AACxC,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMvB,OAAO,CAACwB,SAAR,CAAkBF,QAAQ,CAACR,YAAT,CAAsBW,YAAtB,CAAmCF,MAArD,CAArB;AACAD,IAAAA,QAAQ,CAACR,YAAT,CAAsBC,MAAtB,GAA+BQ,MAAM,CAACG,QAAP,CAAgBC,WAAhB,EAA/B;AACH,GAHD,CAIA,OAAOC,GAAP,EAAY;AACR,UAAM,IAAI3B,OAAO,CAAC4B,aAAZ,CAA0B,sCAA1B,EAAkE;AAAEC,MAAAA,QAAQ,EAAEF;AAAZ,KAAlE,CAAN;AACH;AACJ","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.lookupMissingTriggerRegions = void 0;\nconst backend = require(\"./backend\");\nconst storage = require(\"../../gcp/storage\");\nconst error_1 = require(\"../../error\");\nconst logger_1 = require(\"../../logger\");\nconst noop = () => Promise.resolve();\nconst LOOKUP_BY_EVENT_TYPE = {\n    \"google.cloud.pubsub.topic.v1.messagePublished\": noop,\n    \"google.cloud.storage.object.v1.finalized\": lookupBucketRegion,\n    \"google.cloud.storage.object.v1.archived\": lookupBucketRegion,\n    \"google.cloud.storage.object.v1.deleted\": lookupBucketRegion,\n    \"google.cloud.storage.object.v1.metadataUpdated\": lookupBucketRegion,\n};\nasync function lookupMissingTriggerRegions(want) {\n    const regionLookups = [];\n    for (const ep of backend.allEndpoints(want)) {\n        if (ep.platform === \"gcfv1\" || !backend.isEventTriggered(ep) || ep.eventTrigger.region) {\n            continue;\n        }\n        const lookup = LOOKUP_BY_EVENT_TYPE[ep.eventTrigger.eventType];\n        if (!lookup) {\n            logger_1.logger.debug(\"Don't know how to look up trigger region for event type\", ep.eventTrigger.eventType, \". Deploy will fail unless this event type is global\");\n            continue;\n        }\n        regionLookups.push(lookup(ep));\n    }\n    await Promise.all(regionLookups);\n}\nexports.lookupMissingTriggerRegions = lookupMissingTriggerRegions;\nasync function lookupBucketRegion(endpoint) {\n    try {\n        const bucket = await storage.getBucket(endpoint.eventTrigger.eventFilters.bucket);\n        endpoint.eventTrigger.region = bucket.location.toLowerCase();\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(\"Can't find the storage bucket region\", { original: err });\n    }\n}\n"]},"metadata":{},"sourceType":"script"}