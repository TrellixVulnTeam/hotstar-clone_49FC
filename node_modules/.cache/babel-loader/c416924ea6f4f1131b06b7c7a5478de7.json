{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path = require(\"path\");\n\nconst clc = require(\"cli-color\");\n\nconst requireInteractive_1 = require(\"../requireInteractive\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst iam_1 = require(\"../gcp/iam\");\n\nconst logger_1 = require(\"../logger\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst utils_1 = require(\"../utils\");\n\nconst functional_1 = require(\"../functional\");\n\nconst configExport = require(\"../functions/runtimeConfigExport\");\n\nconst requireConfig = require(\"../requireConfig\");\n\nconst REQUIRED_PERMISSIONS = [\"runtimeconfig.configs.list\", \"runtimeconfig.configs.get\", \"runtimeconfig.variables.list\", \"runtimeconfig.variables.get\"];\nconst RESERVED_PROJECT_ALIAS = [\"local\"];\nconst MAX_ATTEMPTS = 3;\n\nfunction checkReservedAliases(pInfos) {\n  for (const pInfo of pInfos) {\n    if (pInfo.alias && RESERVED_PROJECT_ALIAS.includes(pInfo.alias)) {\n      utils_1.logWarning(`Project alias (${clc.bold(pInfo.alias)}) is reserved for internal use. ` + `Saving exported config in .env.${pInfo.projectId} instead.`);\n      delete pInfo.alias;\n    }\n  }\n}\n\nasync function checkRequiredPermission(pInfos) {\n  pInfos = pInfos.filter(pInfo => !pInfo.config);\n  const testPermissions = pInfos.map(pInfo => iam_1.testIamPermissions(pInfo.projectId, REQUIRED_PERMISSIONS));\n  const results = await Promise.all(testPermissions);\n\n  for (const [pInfo, result] of functional_1.zip(pInfos, results)) {\n    if (result.passed) {\n      throw new error_1.FirebaseError(`Unexpectedly failed to fetch runtime config for project ${pInfo.projectId}`);\n    }\n\n    utils_1.logWarning(\"You are missing the following permissions to read functions config on project \" + `${clc.bold(pInfo.projectId)}:\\n\\t${result.missing.join(\"\\n\\t\")}`);\n    const confirm = await prompt_1.promptOnce({\n      type: \"confirm\",\n      name: \"skip\",\n      default: true,\n      message: `Continue without importing configs from project ${pInfo.projectId}?`\n    });\n\n    if (!confirm) {\n      throw new error_1.FirebaseError(\"Command aborted!\");\n    }\n  }\n}\n\nasync function promptForPrefix(errMsg) {\n  utils_1.logWarning(\"The following configs keys could not be exported as environment variables:\\n\");\n  utils_1.logWarning(errMsg);\n  return await prompt_1.promptOnce({\n    type: \"input\",\n    name: \"prefix\",\n    default: \"CONFIG_\",\n    message: \"Enter a PREFIX to rename invalid environment variable keys:\"\n  }, {});\n}\n\nfunction fromEntries(itr) {\n  const obj = {};\n\n  for (const [k, v] of itr) {\n    obj[k] = v;\n  }\n\n  return obj;\n}\n\nexports.default = new command_1.Command(\"functions:config:export\").description(\"Export environment config as environment variables in dotenv format\").before(requirePermissions_1.requirePermissions, [\"runtimeconfig.configs.list\", \"runtimeconfig.configs.get\", \"runtimeconfig.variables.list\", \"runtimeconfig.variables.get\"]).before(requireConfig).before(requireInteractive_1.default).action(async options => {\n  let pInfos = configExport.getProjectInfos(options);\n  checkReservedAliases(pInfos);\n  utils_1.logBullet(\"Importing functions configs from projects [\" + pInfos.map(({\n    projectId\n  }) => `${clc.bold(projectId)}`).join(\", \") + \"]\");\n  await configExport.hydrateConfigs(pInfos);\n  await checkRequiredPermission(pInfos);\n  pInfos = pInfos.filter(pInfo => pInfo.config);\n  logger_1.logger.debug(`Loaded function configs: ${JSON.stringify(pInfos)}`);\n  utils_1.logBullet(`Importing configs from projects: [${pInfos.map(p => p.projectId).join(\", \")}]`);\n  let attempts = 0;\n  let prefix = \"\";\n\n  while (true) {\n    if (attempts >= MAX_ATTEMPTS) {\n      throw new error_1.FirebaseError(\"Exceeded max attempts to fix invalid config keys.\");\n    }\n\n    const errMsg = configExport.hydrateEnvs(pInfos, prefix);\n\n    if (errMsg.length == 0) {\n      break;\n    }\n\n    prefix = await promptForPrefix(errMsg);\n    attempts += 1;\n  }\n\n  const header = `# Exported firebase functions:config:export command on ${new Date().toLocaleDateString()}`;\n  const dotEnvs = pInfos.map(pInfo => configExport.toDotenvFormat(pInfo.envs, header));\n  const filenames = pInfos.map(configExport.generateDotenvFilename);\n  const filesToWrite = fromEntries(functional_1.zip(filenames, dotEnvs));\n  filesToWrite[\".env.local\"] = `${header}\\n# .env.local file contains environment variables for the Functions Emulator.\\n`;\n  filesToWrite[\".env\"] = `${header}# .env file contains environment variables that applies to all projects.\\n`;\n  const functionsDir = options.config.get(\"functions.source\", \".\");\n\n  for (const [filename, content] of Object.entries(filesToWrite)) {\n    await options.config.askWriteProjectFile(path.join(functionsDir, filename), content);\n  }\n});","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/commands/functions-config-export.js"],"names":["Object","defineProperty","exports","value","path","require","clc","requireInteractive_1","command_1","error_1","iam_1","logger_1","prompt_1","requirePermissions_1","utils_1","functional_1","configExport","requireConfig","REQUIRED_PERMISSIONS","RESERVED_PROJECT_ALIAS","MAX_ATTEMPTS","checkReservedAliases","pInfos","pInfo","alias","includes","logWarning","bold","projectId","checkRequiredPermission","filter","config","testPermissions","map","testIamPermissions","results","Promise","all","result","zip","passed","FirebaseError","missing","join","confirm","promptOnce","type","name","default","message","promptForPrefix","errMsg","fromEntries","itr","obj","k","v","Command","description","before","requirePermissions","action","options","getProjectInfos","logBullet","hydrateConfigs","logger","debug","JSON","stringify","p","attempts","prefix","hydrateEnvs","length","header","Date","toLocaleDateString","dotEnvs","toDotenvFormat","envs","filenames","generateDotenvFilename","filesToWrite","functionsDir","get","filename","content","entries","askWriteProjectFile"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nconst clc = require(\"cli-color\");\nconst requireInteractive_1 = require(\"../requireInteractive\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst iam_1 = require(\"../gcp/iam\");\nconst logger_1 = require(\"../logger\");\nconst prompt_1 = require(\"../prompt\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst utils_1 = require(\"../utils\");\nconst functional_1 = require(\"../functional\");\nconst configExport = require(\"../functions/runtimeConfigExport\");\nconst requireConfig = require(\"../requireConfig\");\nconst REQUIRED_PERMISSIONS = [\n    \"runtimeconfig.configs.list\",\n    \"runtimeconfig.configs.get\",\n    \"runtimeconfig.variables.list\",\n    \"runtimeconfig.variables.get\",\n];\nconst RESERVED_PROJECT_ALIAS = [\"local\"];\nconst MAX_ATTEMPTS = 3;\nfunction checkReservedAliases(pInfos) {\n    for (const pInfo of pInfos) {\n        if (pInfo.alias && RESERVED_PROJECT_ALIAS.includes(pInfo.alias)) {\n            utils_1.logWarning(`Project alias (${clc.bold(pInfo.alias)}) is reserved for internal use. ` +\n                `Saving exported config in .env.${pInfo.projectId} instead.`);\n            delete pInfo.alias;\n        }\n    }\n}\nasync function checkRequiredPermission(pInfos) {\n    pInfos = pInfos.filter((pInfo) => !pInfo.config);\n    const testPermissions = pInfos.map((pInfo) => iam_1.testIamPermissions(pInfo.projectId, REQUIRED_PERMISSIONS));\n    const results = await Promise.all(testPermissions);\n    for (const [pInfo, result] of functional_1.zip(pInfos, results)) {\n        if (result.passed) {\n            throw new error_1.FirebaseError(`Unexpectedly failed to fetch runtime config for project ${pInfo.projectId}`);\n        }\n        utils_1.logWarning(\"You are missing the following permissions to read functions config on project \" +\n            `${clc.bold(pInfo.projectId)}:\\n\\t${result.missing.join(\"\\n\\t\")}`);\n        const confirm = await prompt_1.promptOnce({\n            type: \"confirm\",\n            name: \"skip\",\n            default: true,\n            message: `Continue without importing configs from project ${pInfo.projectId}?`,\n        });\n        if (!confirm) {\n            throw new error_1.FirebaseError(\"Command aborted!\");\n        }\n    }\n}\nasync function promptForPrefix(errMsg) {\n    utils_1.logWarning(\"The following configs keys could not be exported as environment variables:\\n\");\n    utils_1.logWarning(errMsg);\n    return await prompt_1.promptOnce({\n        type: \"input\",\n        name: \"prefix\",\n        default: \"CONFIG_\",\n        message: \"Enter a PREFIX to rename invalid environment variable keys:\",\n    }, {});\n}\nfunction fromEntries(itr) {\n    const obj = {};\n    for (const [k, v] of itr) {\n        obj[k] = v;\n    }\n    return obj;\n}\nexports.default = new command_1.Command(\"functions:config:export\")\n    .description(\"Export environment config as environment variables in dotenv format\")\n    .before(requirePermissions_1.requirePermissions, [\n    \"runtimeconfig.configs.list\",\n    \"runtimeconfig.configs.get\",\n    \"runtimeconfig.variables.list\",\n    \"runtimeconfig.variables.get\",\n])\n    .before(requireConfig)\n    .before(requireInteractive_1.default)\n    .action(async (options) => {\n    let pInfos = configExport.getProjectInfos(options);\n    checkReservedAliases(pInfos);\n    utils_1.logBullet(\"Importing functions configs from projects [\" +\n        pInfos.map(({ projectId }) => `${clc.bold(projectId)}`).join(\", \") +\n        \"]\");\n    await configExport.hydrateConfigs(pInfos);\n    await checkRequiredPermission(pInfos);\n    pInfos = pInfos.filter((pInfo) => pInfo.config);\n    logger_1.logger.debug(`Loaded function configs: ${JSON.stringify(pInfos)}`);\n    utils_1.logBullet(`Importing configs from projects: [${pInfos.map((p) => p.projectId).join(\", \")}]`);\n    let attempts = 0;\n    let prefix = \"\";\n    while (true) {\n        if (attempts >= MAX_ATTEMPTS) {\n            throw new error_1.FirebaseError(\"Exceeded max attempts to fix invalid config keys.\");\n        }\n        const errMsg = configExport.hydrateEnvs(pInfos, prefix);\n        if (errMsg.length == 0) {\n            break;\n        }\n        prefix = await promptForPrefix(errMsg);\n        attempts += 1;\n    }\n    const header = `# Exported firebase functions:config:export command on ${new Date().toLocaleDateString()}`;\n    const dotEnvs = pInfos.map((pInfo) => configExport.toDotenvFormat(pInfo.envs, header));\n    const filenames = pInfos.map(configExport.generateDotenvFilename);\n    const filesToWrite = fromEntries(functional_1.zip(filenames, dotEnvs));\n    filesToWrite[\".env.local\"] = `${header}\\n# .env.local file contains environment variables for the Functions Emulator.\\n`;\n    filesToWrite[\".env\"] = `${header}# .env file contains environment variables that applies to all projects.\\n`;\n    const functionsDir = options.config.get(\"functions.source\", \".\");\n    for (const [filename, content] of Object.entries(filesToWrite)) {\n        await options.config.askWriteProjectFile(path.join(functionsDir, filename), content);\n    }\n});\n"]},"metadata":{},"sourceType":"script"}