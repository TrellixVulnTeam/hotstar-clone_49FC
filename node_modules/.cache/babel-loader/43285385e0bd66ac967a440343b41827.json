{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAppName = exports.getProjectName = exports.ensureFileExists = exports.getEmails = exports.getTestersOrGroups = void 0;\n\nconst fs = require(\"fs-extra\");\n\nconst error_1 = require(\"../error\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nfunction getTestersOrGroups(value, file) {\n  if (!value && file) {\n    ensureFileExists(file);\n    value = fs.readFileSync(file, \"utf8\");\n  }\n\n  if (value) {\n    return splitter(value);\n  }\n\n  return [];\n}\n\nexports.getTestersOrGroups = getTestersOrGroups;\n\nfunction getEmails(emails, file) {\n  if (emails.length == 0) {\n    ensureFileExists(file);\n    const readFile = fs.readFileSync(file, \"utf8\");\n    return splitter(readFile);\n  }\n\n  return emails;\n}\n\nexports.getEmails = getEmails;\n\nfunction ensureFileExists(file, message = \"\") {\n  if (!fs.existsSync(file)) {\n    throw new error_1.FirebaseError(`File ${file} does not exist: ${message}`);\n  }\n}\n\nexports.ensureFileExists = ensureFileExists;\n\nfunction splitter(value) {\n  return value.split(/[,\\n]/).map(entry => entry.trim()).filter(entry => !!entry);\n}\n\nasync function getProjectName(options) {\n  const projectNumber = await projectUtils_1.needProjectNumber(options);\n  return `projects/${projectNumber}`;\n}\n\nexports.getProjectName = getProjectName;\n\nfunction getAppName(options) {\n  if (!options.app) {\n    throw new error_1.FirebaseError(\"set the --app option to a valid Firebase app id and try again\");\n  }\n\n  const appId = options.app;\n  return `projects/${appId.split(\":\")[1]}/apps/${appId}`;\n}\n\nexports.getAppName = getAppName;","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/appdistribution/options-parser-util.js"],"names":["Object","defineProperty","exports","value","getAppName","getProjectName","ensureFileExists","getEmails","getTestersOrGroups","fs","require","error_1","projectUtils_1","file","readFileSync","splitter","emails","length","readFile","message","existsSync","FirebaseError","split","map","entry","trim","filter","options","projectNumber","needProjectNumber","app","appId"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqBF,OAAO,CAACG,cAAR,GAAyBH,OAAO,CAACI,gBAAR,GAA2BJ,OAAO,CAACK,SAAR,GAAoBL,OAAO,CAACM,kBAAR,GAA6B,KAAK,CAA/H;;AACA,MAAMC,EAAE,GAAGC,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,iBAAD,CAA9B;;AACA,SAASF,kBAAT,CAA4BL,KAA5B,EAAmCU,IAAnC,EAAyC;AACrC,MAAI,CAACV,KAAD,IAAUU,IAAd,EAAoB;AAChBP,IAAAA,gBAAgB,CAACO,IAAD,CAAhB;AACAV,IAAAA,KAAK,GAAGM,EAAE,CAACK,YAAH,CAAgBD,IAAhB,EAAsB,MAAtB,CAAR;AACH;;AACD,MAAIV,KAAJ,EAAW;AACP,WAAOY,QAAQ,CAACZ,KAAD,CAAf;AACH;;AACD,SAAO,EAAP;AACH;;AACDD,OAAO,CAACM,kBAAR,GAA6BA,kBAA7B;;AACA,SAASD,SAAT,CAAmBS,MAAnB,EAA2BH,IAA3B,EAAiC;AAC7B,MAAIG,MAAM,CAACC,MAAP,IAAiB,CAArB,EAAwB;AACpBX,IAAAA,gBAAgB,CAACO,IAAD,CAAhB;AACA,UAAMK,QAAQ,GAAGT,EAAE,CAACK,YAAH,CAAgBD,IAAhB,EAAsB,MAAtB,CAAjB;AACA,WAAOE,QAAQ,CAACG,QAAD,CAAf;AACH;;AACD,SAAOF,MAAP;AACH;;AACDd,OAAO,CAACK,SAAR,GAAoBA,SAApB;;AACA,SAASD,gBAAT,CAA0BO,IAA1B,EAAgCM,OAAO,GAAG,EAA1C,EAA8C;AAC1C,MAAI,CAACV,EAAE,CAACW,UAAH,CAAcP,IAAd,CAAL,EAA0B;AACtB,UAAM,IAAIF,OAAO,CAACU,aAAZ,CAA2B,QAAOR,IAAK,oBAAmBM,OAAQ,EAAlE,CAAN;AACH;AACJ;;AACDjB,OAAO,CAACI,gBAAR,GAA2BA,gBAA3B;;AACA,SAASS,QAAT,CAAkBZ,KAAlB,EAAyB;AACrB,SAAOA,KAAK,CACPmB,KADE,CACI,OADJ,EAEFC,GAFE,CAEGC,KAAD,IAAWA,KAAK,CAACC,IAAN,EAFb,EAGFC,MAHE,CAGMF,KAAD,IAAW,CAAC,CAACA,KAHlB,CAAP;AAIH;;AACD,eAAenB,cAAf,CAA8BsB,OAA9B,EAAuC;AACnC,QAAMC,aAAa,GAAG,MAAMhB,cAAc,CAACiB,iBAAf,CAAiCF,OAAjC,CAA5B;AACA,SAAQ,YAAWC,aAAc,EAAjC;AACH;;AACD1B,OAAO,CAACG,cAAR,GAAyBA,cAAzB;;AACA,SAASD,UAAT,CAAoBuB,OAApB,EAA6B;AACzB,MAAI,CAACA,OAAO,CAACG,GAAb,EAAkB;AACd,UAAM,IAAInB,OAAO,CAACU,aAAZ,CAA0B,+DAA1B,CAAN;AACH;;AACD,QAAMU,KAAK,GAAGJ,OAAO,CAACG,GAAtB;AACA,SAAQ,YAAWC,KAAK,CAACT,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAoB,SAAQS,KAAM,EAArD;AACH;;AACD7B,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAppName = exports.getProjectName = exports.ensureFileExists = exports.getEmails = exports.getTestersOrGroups = void 0;\nconst fs = require(\"fs-extra\");\nconst error_1 = require(\"../error\");\nconst projectUtils_1 = require(\"../projectUtils\");\nfunction getTestersOrGroups(value, file) {\n    if (!value && file) {\n        ensureFileExists(file);\n        value = fs.readFileSync(file, \"utf8\");\n    }\n    if (value) {\n        return splitter(value);\n    }\n    return [];\n}\nexports.getTestersOrGroups = getTestersOrGroups;\nfunction getEmails(emails, file) {\n    if (emails.length == 0) {\n        ensureFileExists(file);\n        const readFile = fs.readFileSync(file, \"utf8\");\n        return splitter(readFile);\n    }\n    return emails;\n}\nexports.getEmails = getEmails;\nfunction ensureFileExists(file, message = \"\") {\n    if (!fs.existsSync(file)) {\n        throw new error_1.FirebaseError(`File ${file} does not exist: ${message}`);\n    }\n}\nexports.ensureFileExists = ensureFileExists;\nfunction splitter(value) {\n    return value\n        .split(/[,\\n]/)\n        .map((entry) => entry.trim())\n        .filter((entry) => !!entry);\n}\nasync function getProjectName(options) {\n    const projectNumber = await projectUtils_1.needProjectNumber(options);\n    return `projects/${projectNumber}`;\n}\nexports.getProjectName = getProjectName;\nfunction getAppName(options) {\n    if (!options.app) {\n        throw new error_1.FirebaseError(\"set the --app option to a valid Firebase app id and try again\");\n    }\n    const appId = options.app;\n    return `projects/${appId.split(\":\")[1]}/apps/${appId}`;\n}\nexports.getAppName = getAppName;\n"]},"metadata":{},"sourceType":"script"}