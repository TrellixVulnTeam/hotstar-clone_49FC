{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst extensionsApi_1 = require(\"../extensions/extensionsApi\");\n\nconst utils = require(\"../utils\");\n\nconst refs = require(\"../extensions/refs\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst clc = require(\"cli-color\");\n\nconst requireAuth_1 = require(\"../requireAuth\");\n\nconst error_1 = require(\"../error\");\n\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\n\nmodule.exports = new command_1.Command(\"ext:dev:unpublish <extensionRef>\").description(\"unpublish an extension\").withForce().help(\"use this command to unpublish an extension, and make it unavailable for developers to install or reconfigure. \" + \"Specify the extension you want to unpublish using the format '<publisherId>/<extensionId>.\").before(requireAuth_1.requireAuth).before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extDevMinVersion\").action(async (extensionRef, options) => {\n  const {\n    publisherId,\n    extensionId,\n    version\n  } = refs.parse(extensionRef);\n  utils.logLabeledWarning(extensionsHelper_1.logPrefix, \"If you unpublish this extension, developers won't be able to install it. For developers who currently have this extension installed, it will continue to run and will appear as unpublished when listed in the Firebase console or Firebase CLI.\");\n  utils.logLabeledWarning(\"This is a permanent action\", `Once unpublished, you may never use the extension name '${clc.bold(extensionId)}' again.`);\n\n  if (version) {\n    throw new error_1.FirebaseError(`Unpublishing a single version is not currently supported. You can only unpublish ${clc.bold(\"ALL versions\")} of an extension. To unpublish all versions, please remove the version from the reference.`);\n  }\n\n  await extensionsApi_1.getExtension(extensionRef);\n  const consent = await comfirmUnpublish(publisherId, extensionId, options);\n\n  if (!consent) {\n    throw new error_1.FirebaseError(\"unpublishing cancelled.\");\n  }\n\n  await extensionsApi_1.unpublishExtension(extensionRef);\n  utils.logLabeledSuccess(extensionsHelper_1.logPrefix, \"successfully unpublished all versions of this extension.\");\n});\n\nasync function comfirmUnpublish(publisherId, extensionId, options) {\n  if (options.nonInteractive && !options.force) {\n    throw new error_1.FirebaseError(\"Pass the --force flag to use this command in non-interactive mode\");\n  }\n\n  if (options.nonInteractive && options.force) {\n    return true;\n  }\n\n  const message = `You are about to unpublish ALL versions of ${clc.green(`${publisherId}/${extensionId}`)}.\\nDo you wish to continue? `;\n  return prompt_1.promptOnce({\n    type: \"confirm\",\n    message,\n    default: false\n  });\n}","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/commands/ext-dev-unpublish.js"],"names":["Object","defineProperty","exports","value","command_1","require","extensionsHelper_1","extensionsApi_1","utils","refs","prompt_1","clc","requireAuth_1","error_1","checkMinRequiredVersion_1","module","Command","description","withForce","help","before","requireAuth","checkMinRequiredVersion","action","extensionRef","options","publisherId","extensionId","version","parse","logLabeledWarning","logPrefix","bold","FirebaseError","getExtension","consent","comfirmUnpublish","unpublishExtension","logLabeledSuccess","nonInteractive","force","message","green","promptOnce","type","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst extensionsApi_1 = require(\"../extensions/extensionsApi\");\nconst utils = require(\"../utils\");\nconst refs = require(\"../extensions/refs\");\nconst prompt_1 = require(\"../prompt\");\nconst clc = require(\"cli-color\");\nconst requireAuth_1 = require(\"../requireAuth\");\nconst error_1 = require(\"../error\");\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\nmodule.exports = new command_1.Command(\"ext:dev:unpublish <extensionRef>\")\n    .description(\"unpublish an extension\")\n    .withForce()\n    .help(\"use this command to unpublish an extension, and make it unavailable for developers to install or reconfigure. \" +\n    \"Specify the extension you want to unpublish using the format '<publisherId>/<extensionId>.\")\n    .before(requireAuth_1.requireAuth)\n    .before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extDevMinVersion\")\n    .action(async (extensionRef, options) => {\n    const { publisherId, extensionId, version } = refs.parse(extensionRef);\n    utils.logLabeledWarning(extensionsHelper_1.logPrefix, \"If you unpublish this extension, developers won't be able to install it. For developers who currently have this extension installed, it will continue to run and will appear as unpublished when listed in the Firebase console or Firebase CLI.\");\n    utils.logLabeledWarning(\"This is a permanent action\", `Once unpublished, you may never use the extension name '${clc.bold(extensionId)}' again.`);\n    if (version) {\n        throw new error_1.FirebaseError(`Unpublishing a single version is not currently supported. You can only unpublish ${clc.bold(\"ALL versions\")} of an extension. To unpublish all versions, please remove the version from the reference.`);\n    }\n    await extensionsApi_1.getExtension(extensionRef);\n    const consent = await comfirmUnpublish(publisherId, extensionId, options);\n    if (!consent) {\n        throw new error_1.FirebaseError(\"unpublishing cancelled.\");\n    }\n    await extensionsApi_1.unpublishExtension(extensionRef);\n    utils.logLabeledSuccess(extensionsHelper_1.logPrefix, \"successfully unpublished all versions of this extension.\");\n});\nasync function comfirmUnpublish(publisherId, extensionId, options) {\n    if (options.nonInteractive && !options.force) {\n        throw new error_1.FirebaseError(\"Pass the --force flag to use this command in non-interactive mode\");\n    }\n    if (options.nonInteractive && options.force) {\n        return true;\n    }\n    const message = `You are about to unpublish ALL versions of ${clc.green(`${publisherId}/${extensionId}`)}.\\nDo you wish to continue? `;\n    return prompt_1.promptOnce({\n        type: \"confirm\",\n        message,\n        default: false,\n    });\n}\n"]},"metadata":{},"sourceType":"script"}