{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UsageMode = exports.TenantProjectState = exports.AgentProjectState = exports.ProjectState = exports.SIGNIN_METHOD_EMAIL_LINK = exports.PROVIDER_GAME_CENTER = exports.PROVIDER_CUSTOM = exports.PROVIDER_ANONYMOUS = exports.PROVIDER_PHONE = exports.PROVIDER_PASSWORD = void 0;\n\nconst utils_1 = require(\"./utils\");\n\nconst cloudFunctions_1 = require(\"./cloudFunctions\");\n\nconst errors_1 = require(\"./errors\");\n\nexports.PROVIDER_PASSWORD = \"password\";\nexports.PROVIDER_PHONE = \"phone\";\nexports.PROVIDER_ANONYMOUS = \"anonymous\";\nexports.PROVIDER_CUSTOM = \"custom\";\nexports.PROVIDER_GAME_CENTER = \"gc.apple.com\";\nexports.SIGNIN_METHOD_EMAIL_LINK = \"emailLink\";\n\nclass ProjectState {\n  constructor(projectId) {\n    this.projectId = projectId;\n    this.users = new Map();\n    this.localIdForEmail = new Map();\n    this.localIdForInitialEmail = new Map();\n    this.localIdForPhoneNumber = new Map();\n    this.localIdsForProviderEmail = new Map();\n    this.userIdForProviderRawId = new Map();\n    this.refreshTokens = new Map();\n    this.refreshTokensForLocalId = new Map();\n    this.oobs = new Map();\n    this.verificationCodes = new Map();\n    this.temporaryProofs = new Map();\n  }\n\n  get projectNumber() {\n    return \"12345\";\n  }\n\n  createUser(props) {\n    for (let i = 0; i < 10; i++) {\n      const localId = utils_1.randomId(28);\n      const user = this.createUserWithLocalId(localId, props);\n\n      if (user) {\n        return user;\n      }\n    }\n\n    throw new Error(\"Cannot generate a random unique localId after 10 tries.\");\n  }\n\n  createUserWithLocalId(localId, props) {\n    if (this.users.has(localId)) {\n      return undefined;\n    }\n\n    const timestamp = new Date();\n    this.users.set(localId, {\n      localId,\n      createdAt: props.createdAt || timestamp.getTime().toString(),\n      lastLoginAt: timestamp.getTime().toString()\n    });\n    const user = this.updateUserByLocalId(localId, props, {\n      upsertProviders: props.providerUserInfo\n    });\n    this.authCloudFunction.dispatch(\"create\", user);\n    return user;\n  }\n\n  overwriteUserWithLocalId(localId, props) {\n    const userInfoBefore = this.users.get(localId);\n\n    if (userInfoBefore) {\n      this.removeUserFromIndex(userInfoBefore);\n    }\n\n    const timestamp = new Date();\n    this.users.set(localId, {\n      localId,\n      createdAt: props.createdAt || timestamp.getTime().toString(),\n      lastLoginAt: timestamp.getTime().toString()\n    });\n    const user = this.updateUserByLocalId(localId, props, {\n      upsertProviders: props.providerUserInfo\n    });\n    return user;\n  }\n\n  deleteUser(user) {\n    this.users.delete(user.localId);\n    this.removeUserFromIndex(user);\n    const refreshTokens = this.refreshTokensForLocalId.get(user.localId);\n\n    if (refreshTokens) {\n      this.refreshTokensForLocalId.delete(user.localId);\n\n      for (const refreshToken of refreshTokens) {\n        this.refreshTokens.delete(refreshToken);\n      }\n    }\n\n    this.authCloudFunction.dispatch(\"delete\", user);\n  }\n\n  updateUserByLocalId(localId, fields, options = {}) {\n    var _a, _b;\n\n    const upsertProviders = (_a = options.upsertProviders) !== null && _a !== void 0 ? _a : [];\n    const deleteProviders = (_b = options.deleteProviders) !== null && _b !== void 0 ? _b : [];\n    const user = this.users.get(localId);\n\n    if (!user) {\n      throw new Error(`Internal assertion error: trying to update nonexistent user: ${localId}`);\n    }\n\n    const oldEmail = user.email;\n    const oldPhoneNumber = user.phoneNumber;\n\n    for (const field of Object.keys(fields)) {\n      utils_1.mirrorFieldTo(user, field, fields);\n    }\n\n    if (oldEmail && oldEmail !== user.email) {\n      this.localIdForEmail.delete(oldEmail);\n    }\n\n    if (user.email) {\n      this.localIdForEmail.set(user.email, user.localId);\n    }\n\n    if (user.email && (user.passwordHash || user.emailLinkSignin)) {\n      upsertProviders.push({\n        providerId: exports.PROVIDER_PASSWORD,\n        email: user.email,\n        federatedId: user.email,\n        rawId: user.email,\n        displayName: user.displayName,\n        photoUrl: user.photoUrl\n      });\n    } else {\n      deleteProviders.push(exports.PROVIDER_PASSWORD);\n    }\n\n    if (user.initialEmail) {\n      this.localIdForInitialEmail.set(user.initialEmail, user.localId);\n    }\n\n    if (oldPhoneNumber && oldPhoneNumber !== user.phoneNumber) {\n      this.localIdForPhoneNumber.delete(oldPhoneNumber);\n    }\n\n    if (user.phoneNumber) {\n      this.localIdForPhoneNumber.set(user.phoneNumber, user.localId);\n      upsertProviders.push({\n        providerId: exports.PROVIDER_PHONE,\n        phoneNumber: user.phoneNumber,\n        rawId: user.phoneNumber\n      });\n    } else {\n      deleteProviders.push(exports.PROVIDER_PHONE);\n    }\n\n    if (user.mfaInfo) {\n      this.validateMfaEnrollments(user.mfaInfo);\n    }\n\n    return this.updateUserProviderInfo(user, upsertProviders, deleteProviders);\n  }\n\n  validateMfaEnrollments(enrollments) {\n    const phoneNumbers = new Set();\n    const enrollmentIds = new Set();\n\n    for (const enrollment of enrollments) {\n      errors_1.assert(enrollment.phoneInfo && utils_1.isValidPhoneNumber(enrollment.phoneInfo), \"INVALID_MFA_PHONE_NUMBER : Invalid format.\");\n      errors_1.assert(enrollment.mfaEnrollmentId, \"INVALID_MFA_ENROLLMENT_ID : mfaEnrollmentId must be defined.\");\n      errors_1.assert(!enrollmentIds.has(enrollment.mfaEnrollmentId), \"DUPLICATE_MFA_ENROLLMENT_ID\");\n      errors_1.assert(!phoneNumbers.has(enrollment.phoneInfo), \"INTERNAL_ERROR : MFA Enrollment Phone Numbers must be unique.\");\n      phoneNumbers.add(enrollment.phoneInfo);\n      enrollmentIds.add(enrollment.mfaEnrollmentId);\n    }\n\n    return enrollments;\n  }\n\n  updateUserProviderInfo(user, upsertProviders, deleteProviders) {\n    var _a, _b;\n\n    const oldProviderEmails = getProviderEmailsForUser(user);\n\n    if (user.providerUserInfo) {\n      const updatedProviderUserInfo = [];\n\n      for (const info of user.providerUserInfo) {\n        if (deleteProviders.includes(info.providerId)) {\n          (_a = this.userIdForProviderRawId.get(info.providerId)) === null || _a === void 0 ? void 0 : _a.delete(info.rawId);\n        } else {\n          updatedProviderUserInfo.push(info);\n        }\n      }\n\n      user.providerUserInfo = updatedProviderUserInfo;\n    }\n\n    if (upsertProviders.length) {\n      user.providerUserInfo = (_b = user.providerUserInfo) !== null && _b !== void 0 ? _b : [];\n\n      for (const upsert of upsertProviders) {\n        const providerId = upsert.providerId;\n        let users = this.userIdForProviderRawId.get(providerId);\n\n        if (!users) {\n          users = new Map();\n          this.userIdForProviderRawId.set(providerId, users);\n        }\n\n        users.set(upsert.rawId, user.localId);\n        const index = user.providerUserInfo.findIndex(info => info.providerId === upsert.providerId);\n\n        if (index < 0) {\n          user.providerUserInfo.push(upsert);\n        } else {\n          user.providerUserInfo[index] = upsert;\n        }\n      }\n    }\n\n    for (const email of getProviderEmailsForUser(user)) {\n      oldProviderEmails.delete(email);\n      let localIds = this.localIdsForProviderEmail.get(email);\n\n      if (!localIds) {\n        localIds = new Set();\n        this.localIdsForProviderEmail.set(email, localIds);\n      }\n\n      localIds.add(user.localId);\n    }\n\n    for (const oldEmail of oldProviderEmails) {\n      this.removeProviderEmailForUser(oldEmail, user.localId);\n    }\n\n    return user;\n  }\n\n  getUserByEmail(email) {\n    const localId = this.localIdForEmail.get(email);\n\n    if (!localId) {\n      return undefined;\n    }\n\n    return this.getUserByLocalIdAssertingExists(localId);\n  }\n\n  getUserByInitialEmail(initialEmail) {\n    const localId = this.localIdForInitialEmail.get(initialEmail);\n\n    if (!localId) {\n      return undefined;\n    }\n\n    return this.getUserByLocalIdAssertingExists(localId);\n  }\n\n  getUserByLocalIdAssertingExists(localId) {\n    const userInfo = this.getUserByLocalId(localId);\n\n    if (!userInfo) {\n      throw new Error(`Internal state invariant broken: no user with ID: ${localId}`);\n    }\n\n    return userInfo;\n  }\n\n  getUsersByEmailOrProviderEmail(email) {\n    var _a;\n\n    const users = [];\n    const seenLocalIds = new Set();\n    const localId = this.localIdForEmail.get(email);\n\n    if (localId) {\n      users.push(this.getUserByLocalIdAssertingExists(localId));\n      seenLocalIds.add(localId);\n    }\n\n    for (const localId of (_a = this.localIdsForProviderEmail.get(email)) !== null && _a !== void 0 ? _a : []) {\n      if (!seenLocalIds.has(localId)) {\n        users.push(this.getUserByLocalIdAssertingExists(localId));\n        seenLocalIds.add(localId);\n      }\n    }\n\n    return users;\n  }\n\n  getUserByPhoneNumber(phoneNumber) {\n    const localId = this.localIdForPhoneNumber.get(phoneNumber);\n\n    if (!localId) {\n      return undefined;\n    }\n\n    return this.getUserByLocalIdAssertingExists(localId);\n  }\n\n  removeProviderEmailForUser(email, localId) {\n    const localIds = this.localIdsForProviderEmail.get(email);\n\n    if (!localIds) {\n      return;\n    }\n\n    localIds.delete(localId);\n\n    if (localIds.size === 0) {\n      this.localIdsForProviderEmail.delete(email);\n    }\n  }\n\n  getUserByProviderRawId(provider, rawId) {\n    var _a;\n\n    const localId = (_a = this.userIdForProviderRawId.get(provider)) === null || _a === void 0 ? void 0 : _a.get(rawId);\n\n    if (!localId) {\n      return undefined;\n    }\n\n    return this.getUserByLocalIdAssertingExists(localId);\n  }\n\n  listProviderInfosByProviderId(provider) {\n    var _a;\n\n    const users = this.userIdForProviderRawId.get(provider);\n\n    if (!users) {\n      return [];\n    }\n\n    const infos = [];\n\n    for (const localId of users.values()) {\n      const user = this.getUserByLocalIdAssertingExists(localId);\n      const info = (_a = user.providerUserInfo) === null || _a === void 0 ? void 0 : _a.find(info => info.providerId === provider);\n\n      if (!info) {\n        throw new Error(`Internal assertion error: User ${localId} does not have providerInfo ${provider}.`);\n      }\n\n      infos.push(info);\n    }\n\n    return infos;\n  }\n\n  getUserByLocalId(localId) {\n    return this.users.get(localId);\n  }\n\n  createRefreshTokenFor(userInfo, provider, {\n    extraClaims = {},\n    secondFactor\n  } = {}) {\n    const localId = userInfo.localId;\n    const refreshToken = utils_1.randomBase64UrlStr(204);\n    this.refreshTokens.set(refreshToken, {\n      localId,\n      provider,\n      extraClaims,\n      secondFactor,\n      tenantId: userInfo.tenantId\n    });\n    let refreshTokens = this.refreshTokensForLocalId.get(localId);\n\n    if (!refreshTokens) {\n      refreshTokens = new Set();\n      this.refreshTokensForLocalId.set(localId, refreshTokens);\n    }\n\n    refreshTokens.add(refreshToken);\n    return refreshToken;\n  }\n\n  validateRefreshToken(refreshToken) {\n    const record = this.refreshTokens.get(refreshToken);\n\n    if (!record) {\n      return undefined;\n    }\n\n    return {\n      user: this.getUserByLocalIdAssertingExists(record.localId),\n      provider: record.provider,\n      extraClaims: record.extraClaims,\n      secondFactor: record.secondFactor\n    };\n  }\n\n  createOob(email, requestType, generateLink) {\n    const oobCode = utils_1.randomBase64UrlStr(54);\n    const oobLink = generateLink(oobCode);\n    const oob = {\n      email,\n      requestType,\n      oobCode,\n      oobLink\n    };\n    this.oobs.set(oobCode, oob);\n    return oob;\n  }\n\n  validateOobCode(oobCode) {\n    return this.oobs.get(oobCode);\n  }\n\n  deleteOobCode(oobCode) {\n    return this.oobs.delete(oobCode);\n  }\n\n  listOobCodes() {\n    return this.oobs.values();\n  }\n\n  createVerificationCode(phoneNumber) {\n    const sessionInfo = utils_1.randomBase64UrlStr(226);\n    const verification = {\n      code: utils_1.randomDigits(6),\n      phoneNumber,\n      sessionInfo\n    };\n    this.verificationCodes.set(sessionInfo, verification);\n    return verification;\n  }\n\n  getVerificationCodeBySessionInfo(sessionInfo) {\n    return this.verificationCodes.get(sessionInfo);\n  }\n\n  deleteVerificationCodeBySessionInfo(sessionInfo) {\n    return this.verificationCodes.delete(sessionInfo);\n  }\n\n  listVerificationCodes() {\n    return this.verificationCodes.values();\n  }\n\n  deleteAllAccounts() {\n    this.users.clear();\n    this.localIdForEmail.clear();\n    this.localIdForPhoneNumber.clear();\n    this.localIdsForProviderEmail.clear();\n    this.userIdForProviderRawId.clear();\n    this.refreshTokens.clear();\n    this.refreshTokensForLocalId.clear();\n  }\n\n  getUserCount() {\n    return this.users.size;\n  }\n\n  queryUsers(filter, options) {\n    const users = [];\n\n    for (const user of this.users.values()) {\n      if (!options.startToken || user.localId > options.startToken) {\n        filter;\n        users.push(user);\n      }\n    }\n\n    users.sort((a, b) => {\n      if (options.sortByField === \"localId\") {\n        if (a.localId < b.localId) {\n          return -1;\n        } else if (a.localId > b.localId) {\n          return 1;\n        }\n      }\n\n      return 0;\n    });\n    return options.order === \"DESC\" ? users.reverse() : users;\n  }\n\n  createTemporaryProof(phoneNumber) {\n    const record = {\n      phoneNumber,\n      temporaryProof: utils_1.randomBase64UrlStr(119),\n      temporaryProofExpiresIn: \"3600\"\n    };\n    this.temporaryProofs.set(record.temporaryProof, record);\n    return record;\n  }\n\n  validateTemporaryProof(temporaryProof, phoneNumber) {\n    const record = this.temporaryProofs.get(temporaryProof);\n\n    if (!record || record.phoneNumber !== phoneNumber) {\n      return undefined;\n    }\n\n    return record;\n  }\n\n  removeUserFromIndex(user) {\n    var _a, _b;\n\n    if (user.email) {\n      this.localIdForEmail.delete(user.email);\n    }\n\n    if (user.initialEmail) {\n      this.localIdForInitialEmail.delete(user.initialEmail);\n    }\n\n    if (user.phoneNumber) {\n      this.localIdForPhoneNumber.delete(user.phoneNumber);\n    }\n\n    for (const info of (_a = user.providerUserInfo) !== null && _a !== void 0 ? _a : []) {\n      (_b = this.userIdForProviderRawId.get(info.providerId)) === null || _b === void 0 ? void 0 : _b.delete(info.rawId);\n\n      if (info.email) {\n        this.removeProviderEmailForUser(info.email, user.localId);\n      }\n    }\n  }\n\n}\n\nexports.ProjectState = ProjectState;\n\nclass AgentProjectState extends ProjectState {\n  constructor(projectId) {\n    super(projectId);\n    this._oneAccountPerEmail = true;\n    this._usageMode = UsageMode.DEFAULT;\n    this.tenantProjectForTenantId = new Map();\n    this._authCloudFunction = new cloudFunctions_1.AuthCloudFunction(this.projectId);\n  }\n\n  get authCloudFunction() {\n    return this._authCloudFunction;\n  }\n\n  get oneAccountPerEmail() {\n    return this._oneAccountPerEmail;\n  }\n\n  set oneAccountPerEmail(oneAccountPerEmail) {\n    this._oneAccountPerEmail = oneAccountPerEmail;\n  }\n\n  get usageMode() {\n    return this._usageMode;\n  }\n\n  set usageMode(usageMode) {\n    this._usageMode = usageMode;\n  }\n\n  get allowPasswordSignup() {\n    return true;\n  }\n\n  get disableAuth() {\n    return false;\n  }\n\n  get mfaConfig() {\n    return {\n      state: \"ENABLED\",\n      enabledProviders: [\"PHONE_SMS\"]\n    };\n  }\n\n  get enableAnonymousUser() {\n    return true;\n  }\n\n  get enableEmailLinkSignin() {\n    return true;\n  }\n\n  getTenantProject(tenantId) {\n    if (!this.tenantProjectForTenantId.has(tenantId)) {\n      this.createTenantWithTenantId(tenantId, {\n        tenantId,\n        allowPasswordSignup: true,\n        disableAuth: false,\n        mfaConfig: {\n          state: \"ENABLED\",\n          enabledProviders: [\"PHONE_SMS\"]\n        },\n        enableAnonymousUser: true,\n        enableEmailLinkSignin: true\n      });\n    }\n\n    return this.tenantProjectForTenantId.get(tenantId);\n  }\n\n  listTenants(startToken) {\n    const tenantProjects = [];\n\n    for (const tenantProject of this.tenantProjectForTenantId.values()) {\n      if (!startToken || tenantProject.tenantId > startToken) {\n        tenantProjects.push(tenantProject);\n      }\n    }\n\n    tenantProjects.sort((a, b) => {\n      if (a.tenantId < b.tenantId) {\n        return -1;\n      } else if (a.tenantId > b.tenantId) {\n        return 1;\n      }\n\n      return 0;\n    });\n    return tenantProjects.map(tenantProject => tenantProject.tenantConfig);\n  }\n\n  createTenant(tenant) {\n    for (let i = 0; i < 10; i++) {\n      const tenantId = utils_1.randomId(28);\n      const createdTenant = this.createTenantWithTenantId(tenantId, tenant);\n\n      if (createdTenant) {\n        return createdTenant;\n      }\n    }\n\n    throw new Error(\"Could not generate a random unique tenantId after 10 tries\");\n  }\n\n  createTenantWithTenantId(tenantId, tenant) {\n    if (this.tenantProjectForTenantId.has(tenantId)) {\n      return undefined;\n    }\n\n    tenant.name = `projects/${this.projectId}/tenants/${tenantId}`;\n    tenant.tenantId = tenantId;\n    this.tenantProjectForTenantId.set(tenantId, new TenantProjectState(this.projectId, tenantId, tenant, this));\n    return tenant;\n  }\n\n  deleteTenant(tenantId) {\n    this.tenantProjectForTenantId.delete(tenantId);\n  }\n\n}\n\nexports.AgentProjectState = AgentProjectState;\n\nclass TenantProjectState extends ProjectState {\n  constructor(projectId, tenantId, _tenantConfig, parentProject) {\n    super(projectId);\n    this.tenantId = tenantId;\n    this._tenantConfig = _tenantConfig;\n    this.parentProject = parentProject;\n  }\n\n  get oneAccountPerEmail() {\n    return this.parentProject.oneAccountPerEmail;\n  }\n\n  get authCloudFunction() {\n    return this.parentProject.authCloudFunction;\n  }\n\n  get usageMode() {\n    return this.parentProject.usageMode;\n  }\n\n  get tenantConfig() {\n    return this._tenantConfig;\n  }\n\n  get allowPasswordSignup() {\n    return this._tenantConfig.allowPasswordSignup;\n  }\n\n  get disableAuth() {\n    return this._tenantConfig.disableAuth;\n  }\n\n  get mfaConfig() {\n    return this._tenantConfig.mfaConfig;\n  }\n\n  get enableAnonymousUser() {\n    return this._tenantConfig.enableAnonymousUser;\n  }\n\n  get enableEmailLinkSignin() {\n    return this._tenantConfig.enableEmailLinkSignin;\n  }\n\n  delete() {\n    this.parentProject.deleteTenant(this.tenantId);\n  }\n\n  updateTenant(update, updateMask) {\n    var _a, _b, _c, _d, _e;\n\n    if (!updateMask) {\n      const mfaConfig = (_a = update.mfaConfig) !== null && _a !== void 0 ? _a : {};\n\n      if (!(\"state\" in mfaConfig)) {\n        mfaConfig.state = \"DISABLED\";\n      }\n\n      if (!(\"enabledProviders\" in mfaConfig)) {\n        mfaConfig.enabledProviders = [];\n      }\n\n      this._tenantConfig = {\n        tenantId: this.tenantId,\n        name: this.tenantConfig.name,\n        allowPasswordSignup: (_b = update.allowPasswordSignup) !== null && _b !== void 0 ? _b : false,\n        disableAuth: (_c = update.disableAuth) !== null && _c !== void 0 ? _c : false,\n        mfaConfig: mfaConfig,\n        enableAnonymousUser: (_d = update.enableAnonymousUser) !== null && _d !== void 0 ? _d : false,\n        enableEmailLinkSignin: (_e = update.enableEmailLinkSignin) !== null && _e !== void 0 ? _e : false,\n        displayName: update.displayName\n      };\n      return this.tenantConfig;\n    }\n\n    const paths = updateMask.split(\",\");\n\n    for (const path of paths) {\n      const fields = path.split(\".\");\n      let updateField = update;\n      let existingField = this._tenantConfig;\n      let field;\n\n      for (let i = 0; i < fields.length - 1; i++) {\n        field = fields[i];\n\n        if (updateField[field] == null) {\n          console.warn(`Unable to find field '${field}' in update '${updateField}`);\n          break;\n        }\n\n        if (Array.isArray(updateField[field]) || Object(updateField[field]) !== updateField[field]) {\n          console.warn(`Field '${field}' is singular and cannot have sub-fields`);\n          break;\n        }\n\n        if (!existingField[field]) {\n          existingField[field] = {};\n        }\n\n        updateField = updateField[field];\n        existingField = existingField[field];\n      }\n\n      field = fields[fields.length - 1];\n\n      if (updateField[field] == null) {\n        console.warn(`Unable to find field '${field}' in update '${JSON.stringify(updateField)}`);\n        continue;\n      }\n\n      existingField[field] = updateField[field];\n    }\n\n    return this.tenantConfig;\n  }\n\n}\n\nexports.TenantProjectState = TenantProjectState;\n\nfunction getProviderEmailsForUser(user) {\n  var _a;\n\n  const emails = new Set();\n  (_a = user.providerUserInfo) === null || _a === void 0 ? void 0 : _a.forEach(({\n    email\n  }) => {\n    if (email) {\n      emails.add(email);\n    }\n  });\n  return emails;\n}\n\nvar UsageMode;\n\n(function (UsageMode) {\n  UsageMode[\"DEFAULT\"] = \"DEFAULT\";\n  UsageMode[\"PASSTHROUGH\"] = \"PASSTHROUGH\";\n})(UsageMode = exports.UsageMode || (exports.UsageMode = {}));","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/emulator/auth/state.js"],"names":["Object","defineProperty","exports","value","UsageMode","TenantProjectState","AgentProjectState","ProjectState","SIGNIN_METHOD_EMAIL_LINK","PROVIDER_GAME_CENTER","PROVIDER_CUSTOM","PROVIDER_ANONYMOUS","PROVIDER_PHONE","PROVIDER_PASSWORD","utils_1","require","cloudFunctions_1","errors_1","constructor","projectId","users","Map","localIdForEmail","localIdForInitialEmail","localIdForPhoneNumber","localIdsForProviderEmail","userIdForProviderRawId","refreshTokens","refreshTokensForLocalId","oobs","verificationCodes","temporaryProofs","projectNumber","createUser","props","i","localId","randomId","user","createUserWithLocalId","Error","has","undefined","timestamp","Date","set","createdAt","getTime","toString","lastLoginAt","updateUserByLocalId","upsertProviders","providerUserInfo","authCloudFunction","dispatch","overwriteUserWithLocalId","userInfoBefore","get","removeUserFromIndex","deleteUser","delete","refreshToken","fields","options","_a","_b","deleteProviders","oldEmail","email","oldPhoneNumber","phoneNumber","field","keys","mirrorFieldTo","passwordHash","emailLinkSignin","push","providerId","federatedId","rawId","displayName","photoUrl","initialEmail","mfaInfo","validateMfaEnrollments","updateUserProviderInfo","enrollments","phoneNumbers","Set","enrollmentIds","enrollment","assert","phoneInfo","isValidPhoneNumber","mfaEnrollmentId","add","oldProviderEmails","getProviderEmailsForUser","updatedProviderUserInfo","info","includes","length","upsert","index","findIndex","localIds","removeProviderEmailForUser","getUserByEmail","getUserByLocalIdAssertingExists","getUserByInitialEmail","userInfo","getUserByLocalId","getUsersByEmailOrProviderEmail","seenLocalIds","getUserByPhoneNumber","size","getUserByProviderRawId","provider","listProviderInfosByProviderId","infos","values","find","createRefreshTokenFor","extraClaims","secondFactor","randomBase64UrlStr","tenantId","validateRefreshToken","record","createOob","requestType","generateLink","oobCode","oobLink","oob","validateOobCode","deleteOobCode","listOobCodes","createVerificationCode","sessionInfo","verification","code","randomDigits","getVerificationCodeBySessionInfo","deleteVerificationCodeBySessionInfo","listVerificationCodes","deleteAllAccounts","clear","getUserCount","queryUsers","filter","startToken","sort","a","b","sortByField","order","reverse","createTemporaryProof","temporaryProof","temporaryProofExpiresIn","validateTemporaryProof","_oneAccountPerEmail","_usageMode","DEFAULT","tenantProjectForTenantId","_authCloudFunction","AuthCloudFunction","oneAccountPerEmail","usageMode","allowPasswordSignup","disableAuth","mfaConfig","state","enabledProviders","enableAnonymousUser","enableEmailLinkSignin","getTenantProject","createTenantWithTenantId","listTenants","tenantProjects","tenantProject","map","tenantConfig","createTenant","tenant","createdTenant","name","deleteTenant","_tenantConfig","parentProject","updateTenant","update","updateMask","_c","_d","_e","paths","split","path","updateField","existingField","console","warn","Array","isArray","JSON","stringify","emails","forEach"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UsageMode = exports.TenantProjectState = exports.AgentProjectState = exports.ProjectState = exports.SIGNIN_METHOD_EMAIL_LINK = exports.PROVIDER_GAME_CENTER = exports.PROVIDER_CUSTOM = exports.PROVIDER_ANONYMOUS = exports.PROVIDER_PHONE = exports.PROVIDER_PASSWORD = void 0;\nconst utils_1 = require(\"./utils\");\nconst cloudFunctions_1 = require(\"./cloudFunctions\");\nconst errors_1 = require(\"./errors\");\nexports.PROVIDER_PASSWORD = \"password\";\nexports.PROVIDER_PHONE = \"phone\";\nexports.PROVIDER_ANONYMOUS = \"anonymous\";\nexports.PROVIDER_CUSTOM = \"custom\";\nexports.PROVIDER_GAME_CENTER = \"gc.apple.com\";\nexports.SIGNIN_METHOD_EMAIL_LINK = \"emailLink\";\nclass ProjectState {\n    constructor(projectId) {\n        this.projectId = projectId;\n        this.users = new Map();\n        this.localIdForEmail = new Map();\n        this.localIdForInitialEmail = new Map();\n        this.localIdForPhoneNumber = new Map();\n        this.localIdsForProviderEmail = new Map();\n        this.userIdForProviderRawId = new Map();\n        this.refreshTokens = new Map();\n        this.refreshTokensForLocalId = new Map();\n        this.oobs = new Map();\n        this.verificationCodes = new Map();\n        this.temporaryProofs = new Map();\n    }\n    get projectNumber() {\n        return \"12345\";\n    }\n    createUser(props) {\n        for (let i = 0; i < 10; i++) {\n            const localId = utils_1.randomId(28);\n            const user = this.createUserWithLocalId(localId, props);\n            if (user) {\n                return user;\n            }\n        }\n        throw new Error(\"Cannot generate a random unique localId after 10 tries.\");\n    }\n    createUserWithLocalId(localId, props) {\n        if (this.users.has(localId)) {\n            return undefined;\n        }\n        const timestamp = new Date();\n        this.users.set(localId, {\n            localId,\n            createdAt: props.createdAt || timestamp.getTime().toString(),\n            lastLoginAt: timestamp.getTime().toString(),\n        });\n        const user = this.updateUserByLocalId(localId, props, {\n            upsertProviders: props.providerUserInfo,\n        });\n        this.authCloudFunction.dispatch(\"create\", user);\n        return user;\n    }\n    overwriteUserWithLocalId(localId, props) {\n        const userInfoBefore = this.users.get(localId);\n        if (userInfoBefore) {\n            this.removeUserFromIndex(userInfoBefore);\n        }\n        const timestamp = new Date();\n        this.users.set(localId, {\n            localId,\n            createdAt: props.createdAt || timestamp.getTime().toString(),\n            lastLoginAt: timestamp.getTime().toString(),\n        });\n        const user = this.updateUserByLocalId(localId, props, {\n            upsertProviders: props.providerUserInfo,\n        });\n        return user;\n    }\n    deleteUser(user) {\n        this.users.delete(user.localId);\n        this.removeUserFromIndex(user);\n        const refreshTokens = this.refreshTokensForLocalId.get(user.localId);\n        if (refreshTokens) {\n            this.refreshTokensForLocalId.delete(user.localId);\n            for (const refreshToken of refreshTokens) {\n                this.refreshTokens.delete(refreshToken);\n            }\n        }\n        this.authCloudFunction.dispatch(\"delete\", user);\n    }\n    updateUserByLocalId(localId, fields, options = {}) {\n        var _a, _b;\n        const upsertProviders = (_a = options.upsertProviders) !== null && _a !== void 0 ? _a : [];\n        const deleteProviders = (_b = options.deleteProviders) !== null && _b !== void 0 ? _b : [];\n        const user = this.users.get(localId);\n        if (!user) {\n            throw new Error(`Internal assertion error: trying to update nonexistent user: ${localId}`);\n        }\n        const oldEmail = user.email;\n        const oldPhoneNumber = user.phoneNumber;\n        for (const field of Object.keys(fields)) {\n            utils_1.mirrorFieldTo(user, field, fields);\n        }\n        if (oldEmail && oldEmail !== user.email) {\n            this.localIdForEmail.delete(oldEmail);\n        }\n        if (user.email) {\n            this.localIdForEmail.set(user.email, user.localId);\n        }\n        if (user.email && (user.passwordHash || user.emailLinkSignin)) {\n            upsertProviders.push({\n                providerId: exports.PROVIDER_PASSWORD,\n                email: user.email,\n                federatedId: user.email,\n                rawId: user.email,\n                displayName: user.displayName,\n                photoUrl: user.photoUrl,\n            });\n        }\n        else {\n            deleteProviders.push(exports.PROVIDER_PASSWORD);\n        }\n        if (user.initialEmail) {\n            this.localIdForInitialEmail.set(user.initialEmail, user.localId);\n        }\n        if (oldPhoneNumber && oldPhoneNumber !== user.phoneNumber) {\n            this.localIdForPhoneNumber.delete(oldPhoneNumber);\n        }\n        if (user.phoneNumber) {\n            this.localIdForPhoneNumber.set(user.phoneNumber, user.localId);\n            upsertProviders.push({\n                providerId: exports.PROVIDER_PHONE,\n                phoneNumber: user.phoneNumber,\n                rawId: user.phoneNumber,\n            });\n        }\n        else {\n            deleteProviders.push(exports.PROVIDER_PHONE);\n        }\n        if (user.mfaInfo) {\n            this.validateMfaEnrollments(user.mfaInfo);\n        }\n        return this.updateUserProviderInfo(user, upsertProviders, deleteProviders);\n    }\n    validateMfaEnrollments(enrollments) {\n        const phoneNumbers = new Set();\n        const enrollmentIds = new Set();\n        for (const enrollment of enrollments) {\n            errors_1.assert(enrollment.phoneInfo && utils_1.isValidPhoneNumber(enrollment.phoneInfo), \"INVALID_MFA_PHONE_NUMBER : Invalid format.\");\n            errors_1.assert(enrollment.mfaEnrollmentId, \"INVALID_MFA_ENROLLMENT_ID : mfaEnrollmentId must be defined.\");\n            errors_1.assert(!enrollmentIds.has(enrollment.mfaEnrollmentId), \"DUPLICATE_MFA_ENROLLMENT_ID\");\n            errors_1.assert(!phoneNumbers.has(enrollment.phoneInfo), \"INTERNAL_ERROR : MFA Enrollment Phone Numbers must be unique.\");\n            phoneNumbers.add(enrollment.phoneInfo);\n            enrollmentIds.add(enrollment.mfaEnrollmentId);\n        }\n        return enrollments;\n    }\n    updateUserProviderInfo(user, upsertProviders, deleteProviders) {\n        var _a, _b;\n        const oldProviderEmails = getProviderEmailsForUser(user);\n        if (user.providerUserInfo) {\n            const updatedProviderUserInfo = [];\n            for (const info of user.providerUserInfo) {\n                if (deleteProviders.includes(info.providerId)) {\n                    (_a = this.userIdForProviderRawId.get(info.providerId)) === null || _a === void 0 ? void 0 : _a.delete(info.rawId);\n                }\n                else {\n                    updatedProviderUserInfo.push(info);\n                }\n            }\n            user.providerUserInfo = updatedProviderUserInfo;\n        }\n        if (upsertProviders.length) {\n            user.providerUserInfo = (_b = user.providerUserInfo) !== null && _b !== void 0 ? _b : [];\n            for (const upsert of upsertProviders) {\n                const providerId = upsert.providerId;\n                let users = this.userIdForProviderRawId.get(providerId);\n                if (!users) {\n                    users = new Map();\n                    this.userIdForProviderRawId.set(providerId, users);\n                }\n                users.set(upsert.rawId, user.localId);\n                const index = user.providerUserInfo.findIndex((info) => info.providerId === upsert.providerId);\n                if (index < 0) {\n                    user.providerUserInfo.push(upsert);\n                }\n                else {\n                    user.providerUserInfo[index] = upsert;\n                }\n            }\n        }\n        for (const email of getProviderEmailsForUser(user)) {\n            oldProviderEmails.delete(email);\n            let localIds = this.localIdsForProviderEmail.get(email);\n            if (!localIds) {\n                localIds = new Set();\n                this.localIdsForProviderEmail.set(email, localIds);\n            }\n            localIds.add(user.localId);\n        }\n        for (const oldEmail of oldProviderEmails) {\n            this.removeProviderEmailForUser(oldEmail, user.localId);\n        }\n        return user;\n    }\n    getUserByEmail(email) {\n        const localId = this.localIdForEmail.get(email);\n        if (!localId) {\n            return undefined;\n        }\n        return this.getUserByLocalIdAssertingExists(localId);\n    }\n    getUserByInitialEmail(initialEmail) {\n        const localId = this.localIdForInitialEmail.get(initialEmail);\n        if (!localId) {\n            return undefined;\n        }\n        return this.getUserByLocalIdAssertingExists(localId);\n    }\n    getUserByLocalIdAssertingExists(localId) {\n        const userInfo = this.getUserByLocalId(localId);\n        if (!userInfo) {\n            throw new Error(`Internal state invariant broken: no user with ID: ${localId}`);\n        }\n        return userInfo;\n    }\n    getUsersByEmailOrProviderEmail(email) {\n        var _a;\n        const users = [];\n        const seenLocalIds = new Set();\n        const localId = this.localIdForEmail.get(email);\n        if (localId) {\n            users.push(this.getUserByLocalIdAssertingExists(localId));\n            seenLocalIds.add(localId);\n        }\n        for (const localId of (_a = this.localIdsForProviderEmail.get(email)) !== null && _a !== void 0 ? _a : []) {\n            if (!seenLocalIds.has(localId)) {\n                users.push(this.getUserByLocalIdAssertingExists(localId));\n                seenLocalIds.add(localId);\n            }\n        }\n        return users;\n    }\n    getUserByPhoneNumber(phoneNumber) {\n        const localId = this.localIdForPhoneNumber.get(phoneNumber);\n        if (!localId) {\n            return undefined;\n        }\n        return this.getUserByLocalIdAssertingExists(localId);\n    }\n    removeProviderEmailForUser(email, localId) {\n        const localIds = this.localIdsForProviderEmail.get(email);\n        if (!localIds) {\n            return;\n        }\n        localIds.delete(localId);\n        if (localIds.size === 0) {\n            this.localIdsForProviderEmail.delete(email);\n        }\n    }\n    getUserByProviderRawId(provider, rawId) {\n        var _a;\n        const localId = (_a = this.userIdForProviderRawId.get(provider)) === null || _a === void 0 ? void 0 : _a.get(rawId);\n        if (!localId) {\n            return undefined;\n        }\n        return this.getUserByLocalIdAssertingExists(localId);\n    }\n    listProviderInfosByProviderId(provider) {\n        var _a;\n        const users = this.userIdForProviderRawId.get(provider);\n        if (!users) {\n            return [];\n        }\n        const infos = [];\n        for (const localId of users.values()) {\n            const user = this.getUserByLocalIdAssertingExists(localId);\n            const info = (_a = user.providerUserInfo) === null || _a === void 0 ? void 0 : _a.find((info) => info.providerId === provider);\n            if (!info) {\n                throw new Error(`Internal assertion error: User ${localId} does not have providerInfo ${provider}.`);\n            }\n            infos.push(info);\n        }\n        return infos;\n    }\n    getUserByLocalId(localId) {\n        return this.users.get(localId);\n    }\n    createRefreshTokenFor(userInfo, provider, { extraClaims = {}, secondFactor, } = {}) {\n        const localId = userInfo.localId;\n        const refreshToken = utils_1.randomBase64UrlStr(204);\n        this.refreshTokens.set(refreshToken, {\n            localId,\n            provider,\n            extraClaims,\n            secondFactor,\n            tenantId: userInfo.tenantId,\n        });\n        let refreshTokens = this.refreshTokensForLocalId.get(localId);\n        if (!refreshTokens) {\n            refreshTokens = new Set();\n            this.refreshTokensForLocalId.set(localId, refreshTokens);\n        }\n        refreshTokens.add(refreshToken);\n        return refreshToken;\n    }\n    validateRefreshToken(refreshToken) {\n        const record = this.refreshTokens.get(refreshToken);\n        if (!record) {\n            return undefined;\n        }\n        return {\n            user: this.getUserByLocalIdAssertingExists(record.localId),\n            provider: record.provider,\n            extraClaims: record.extraClaims,\n            secondFactor: record.secondFactor,\n        };\n    }\n    createOob(email, requestType, generateLink) {\n        const oobCode = utils_1.randomBase64UrlStr(54);\n        const oobLink = generateLink(oobCode);\n        const oob = {\n            email,\n            requestType,\n            oobCode,\n            oobLink,\n        };\n        this.oobs.set(oobCode, oob);\n        return oob;\n    }\n    validateOobCode(oobCode) {\n        return this.oobs.get(oobCode);\n    }\n    deleteOobCode(oobCode) {\n        return this.oobs.delete(oobCode);\n    }\n    listOobCodes() {\n        return this.oobs.values();\n    }\n    createVerificationCode(phoneNumber) {\n        const sessionInfo = utils_1.randomBase64UrlStr(226);\n        const verification = {\n            code: utils_1.randomDigits(6),\n            phoneNumber,\n            sessionInfo,\n        };\n        this.verificationCodes.set(sessionInfo, verification);\n        return verification;\n    }\n    getVerificationCodeBySessionInfo(sessionInfo) {\n        return this.verificationCodes.get(sessionInfo);\n    }\n    deleteVerificationCodeBySessionInfo(sessionInfo) {\n        return this.verificationCodes.delete(sessionInfo);\n    }\n    listVerificationCodes() {\n        return this.verificationCodes.values();\n    }\n    deleteAllAccounts() {\n        this.users.clear();\n        this.localIdForEmail.clear();\n        this.localIdForPhoneNumber.clear();\n        this.localIdsForProviderEmail.clear();\n        this.userIdForProviderRawId.clear();\n        this.refreshTokens.clear();\n        this.refreshTokensForLocalId.clear();\n    }\n    getUserCount() {\n        return this.users.size;\n    }\n    queryUsers(filter, options) {\n        const users = [];\n        for (const user of this.users.values()) {\n            if (!options.startToken || user.localId > options.startToken) {\n                filter;\n                users.push(user);\n            }\n        }\n        users.sort((a, b) => {\n            if (options.sortByField === \"localId\") {\n                if (a.localId < b.localId) {\n                    return -1;\n                }\n                else if (a.localId > b.localId) {\n                    return 1;\n                }\n            }\n            return 0;\n        });\n        return options.order === \"DESC\" ? users.reverse() : users;\n    }\n    createTemporaryProof(phoneNumber) {\n        const record = {\n            phoneNumber,\n            temporaryProof: utils_1.randomBase64UrlStr(119),\n            temporaryProofExpiresIn: \"3600\",\n        };\n        this.temporaryProofs.set(record.temporaryProof, record);\n        return record;\n    }\n    validateTemporaryProof(temporaryProof, phoneNumber) {\n        const record = this.temporaryProofs.get(temporaryProof);\n        if (!record || record.phoneNumber !== phoneNumber) {\n            return undefined;\n        }\n        return record;\n    }\n    removeUserFromIndex(user) {\n        var _a, _b;\n        if (user.email) {\n            this.localIdForEmail.delete(user.email);\n        }\n        if (user.initialEmail) {\n            this.localIdForInitialEmail.delete(user.initialEmail);\n        }\n        if (user.phoneNumber) {\n            this.localIdForPhoneNumber.delete(user.phoneNumber);\n        }\n        for (const info of (_a = user.providerUserInfo) !== null && _a !== void 0 ? _a : []) {\n            (_b = this.userIdForProviderRawId.get(info.providerId)) === null || _b === void 0 ? void 0 : _b.delete(info.rawId);\n            if (info.email) {\n                this.removeProviderEmailForUser(info.email, user.localId);\n            }\n        }\n    }\n}\nexports.ProjectState = ProjectState;\nclass AgentProjectState extends ProjectState {\n    constructor(projectId) {\n        super(projectId);\n        this._oneAccountPerEmail = true;\n        this._usageMode = UsageMode.DEFAULT;\n        this.tenantProjectForTenantId = new Map();\n        this._authCloudFunction = new cloudFunctions_1.AuthCloudFunction(this.projectId);\n    }\n    get authCloudFunction() {\n        return this._authCloudFunction;\n    }\n    get oneAccountPerEmail() {\n        return this._oneAccountPerEmail;\n    }\n    set oneAccountPerEmail(oneAccountPerEmail) {\n        this._oneAccountPerEmail = oneAccountPerEmail;\n    }\n    get usageMode() {\n        return this._usageMode;\n    }\n    set usageMode(usageMode) {\n        this._usageMode = usageMode;\n    }\n    get allowPasswordSignup() {\n        return true;\n    }\n    get disableAuth() {\n        return false;\n    }\n    get mfaConfig() {\n        return { state: \"ENABLED\", enabledProviders: [\"PHONE_SMS\"] };\n    }\n    get enableAnonymousUser() {\n        return true;\n    }\n    get enableEmailLinkSignin() {\n        return true;\n    }\n    getTenantProject(tenantId) {\n        if (!this.tenantProjectForTenantId.has(tenantId)) {\n            this.createTenantWithTenantId(tenantId, {\n                tenantId,\n                allowPasswordSignup: true,\n                disableAuth: false,\n                mfaConfig: {\n                    state: \"ENABLED\",\n                    enabledProviders: [\"PHONE_SMS\"],\n                },\n                enableAnonymousUser: true,\n                enableEmailLinkSignin: true,\n            });\n        }\n        return this.tenantProjectForTenantId.get(tenantId);\n    }\n    listTenants(startToken) {\n        const tenantProjects = [];\n        for (const tenantProject of this.tenantProjectForTenantId.values()) {\n            if (!startToken || tenantProject.tenantId > startToken) {\n                tenantProjects.push(tenantProject);\n            }\n        }\n        tenantProjects.sort((a, b) => {\n            if (a.tenantId < b.tenantId) {\n                return -1;\n            }\n            else if (a.tenantId > b.tenantId) {\n                return 1;\n            }\n            return 0;\n        });\n        return tenantProjects.map((tenantProject) => tenantProject.tenantConfig);\n    }\n    createTenant(tenant) {\n        for (let i = 0; i < 10; i++) {\n            const tenantId = utils_1.randomId(28);\n            const createdTenant = this.createTenantWithTenantId(tenantId, tenant);\n            if (createdTenant) {\n                return createdTenant;\n            }\n        }\n        throw new Error(\"Could not generate a random unique tenantId after 10 tries\");\n    }\n    createTenantWithTenantId(tenantId, tenant) {\n        if (this.tenantProjectForTenantId.has(tenantId)) {\n            return undefined;\n        }\n        tenant.name = `projects/${this.projectId}/tenants/${tenantId}`;\n        tenant.tenantId = tenantId;\n        this.tenantProjectForTenantId.set(tenantId, new TenantProjectState(this.projectId, tenantId, tenant, this));\n        return tenant;\n    }\n    deleteTenant(tenantId) {\n        this.tenantProjectForTenantId.delete(tenantId);\n    }\n}\nexports.AgentProjectState = AgentProjectState;\nclass TenantProjectState extends ProjectState {\n    constructor(projectId, tenantId, _tenantConfig, parentProject) {\n        super(projectId);\n        this.tenantId = tenantId;\n        this._tenantConfig = _tenantConfig;\n        this.parentProject = parentProject;\n    }\n    get oneAccountPerEmail() {\n        return this.parentProject.oneAccountPerEmail;\n    }\n    get authCloudFunction() {\n        return this.parentProject.authCloudFunction;\n    }\n    get usageMode() {\n        return this.parentProject.usageMode;\n    }\n    get tenantConfig() {\n        return this._tenantConfig;\n    }\n    get allowPasswordSignup() {\n        return this._tenantConfig.allowPasswordSignup;\n    }\n    get disableAuth() {\n        return this._tenantConfig.disableAuth;\n    }\n    get mfaConfig() {\n        return this._tenantConfig.mfaConfig;\n    }\n    get enableAnonymousUser() {\n        return this._tenantConfig.enableAnonymousUser;\n    }\n    get enableEmailLinkSignin() {\n        return this._tenantConfig.enableEmailLinkSignin;\n    }\n    delete() {\n        this.parentProject.deleteTenant(this.tenantId);\n    }\n    updateTenant(update, updateMask) {\n        var _a, _b, _c, _d, _e;\n        if (!updateMask) {\n            const mfaConfig = (_a = update.mfaConfig) !== null && _a !== void 0 ? _a : {};\n            if (!(\"state\" in mfaConfig)) {\n                mfaConfig.state = \"DISABLED\";\n            }\n            if (!(\"enabledProviders\" in mfaConfig)) {\n                mfaConfig.enabledProviders = [];\n            }\n            this._tenantConfig = {\n                tenantId: this.tenantId,\n                name: this.tenantConfig.name,\n                allowPasswordSignup: (_b = update.allowPasswordSignup) !== null && _b !== void 0 ? _b : false,\n                disableAuth: (_c = update.disableAuth) !== null && _c !== void 0 ? _c : false,\n                mfaConfig: mfaConfig,\n                enableAnonymousUser: (_d = update.enableAnonymousUser) !== null && _d !== void 0 ? _d : false,\n                enableEmailLinkSignin: (_e = update.enableEmailLinkSignin) !== null && _e !== void 0 ? _e : false,\n                displayName: update.displayName,\n            };\n            return this.tenantConfig;\n        }\n        const paths = updateMask.split(\",\");\n        for (const path of paths) {\n            const fields = path.split(\".\");\n            let updateField = update;\n            let existingField = this._tenantConfig;\n            let field;\n            for (let i = 0; i < fields.length - 1; i++) {\n                field = fields[i];\n                if (updateField[field] == null) {\n                    console.warn(`Unable to find field '${field}' in update '${updateField}`);\n                    break;\n                }\n                if (Array.isArray(updateField[field]) ||\n                    Object(updateField[field]) !== updateField[field]) {\n                    console.warn(`Field '${field}' is singular and cannot have sub-fields`);\n                    break;\n                }\n                if (!existingField[field]) {\n                    existingField[field] = {};\n                }\n                updateField = updateField[field];\n                existingField = existingField[field];\n            }\n            field = fields[fields.length - 1];\n            if (updateField[field] == null) {\n                console.warn(`Unable to find field '${field}' in update '${JSON.stringify(updateField)}`);\n                continue;\n            }\n            existingField[field] = updateField[field];\n        }\n        return this.tenantConfig;\n    }\n}\nexports.TenantProjectState = TenantProjectState;\nfunction getProviderEmailsForUser(user) {\n    var _a;\n    const emails = new Set();\n    (_a = user.providerUserInfo) === null || _a === void 0 ? void 0 : _a.forEach(({ email }) => {\n        if (email) {\n            emails.add(email);\n        }\n    });\n    return emails;\n}\nvar UsageMode;\n(function (UsageMode) {\n    UsageMode[\"DEFAULT\"] = \"DEFAULT\";\n    UsageMode[\"PASSTHROUGH\"] = \"PASSTHROUGH\";\n})(UsageMode = exports.UsageMode || (exports.UsageMode = {}));\n"]},"metadata":{},"sourceType":"script"}