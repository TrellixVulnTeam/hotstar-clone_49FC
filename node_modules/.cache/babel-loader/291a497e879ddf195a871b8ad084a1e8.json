{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createApp = void 0;\n\nconst cors = require(\"cors\");\n\nconst express = require(\"express\");\n\nconst exegesisExpress = require(\"exegesis-express\");\n\nconst errors_1 = require(\"exegesis/lib/errors\");\n\nconst _ = require(\"lodash\");\n\nconst emulatorLogger_1 = require(\"../emulatorLogger\");\n\nconst types_1 = require(\"../types\");\n\nconst operations_1 = require(\"./operations\");\n\nconst state_1 = require(\"./state\");\n\nconst apiSpec_1 = require(\"./apiSpec\");\n\nconst errors_2 = require(\"./errors\");\n\nconst utils_1 = require(\"./utils\");\n\nconst lodash_1 = require(\"lodash\");\n\nconst handlers_1 = require(\"./handlers\");\n\nconst bodyParser = require(\"body-parser\");\n\nconst url_1 = require(\"url\");\n\nconst jsonwebtoken_1 = require(\"jsonwebtoken\");\n\nconst apiSpec = apiSpec_1.default;\nconst API_SPEC_PATH = \"/emulator/openapi.json\";\nconst AUTH_HEADER_PREFIX = \"bearer \";\nconst SERVICE_ACCOUNT_TOKEN_PREFIX = \"ya29.\";\n\nfunction specForRouter() {\n  const paths = {};\n  Object.entries(apiSpec.paths).forEach(([path, pathObj]) => {\n    var _a;\n\n    const servers = (_a = pathObj.servers) !== null && _a !== void 0 ? _a : apiSpec.servers;\n\n    if (!servers || !servers.length) {\n      throw new Error(\"No servers defined in API spec.\");\n    }\n\n    const pathWithNamespace = servers[0].url.replace(\"https://\", \"/\") + path;\n    paths[pathWithNamespace] = pathObj;\n  });\n  return Object.assign(Object.assign({}, apiSpec), {\n    paths,\n    servers: undefined,\n    \"x-exegesis-controller\": \"auth\"\n  });\n}\n\nfunction specWithEmulatorServer(protocol, host) {\n  const paths = {};\n  Object.entries(apiSpec.paths).forEach(([path, pathObj]) => {\n    const servers = pathObj.servers;\n\n    if (servers) {\n      pathObj = Object.assign(Object.assign({}, pathObj), {\n        servers: serversWithEmulators(servers)\n      });\n    }\n\n    paths[path] = pathObj;\n  });\n\n  if (!apiSpec.servers) {\n    throw new Error(\"No servers defined in API spec.\");\n  }\n\n  return Object.assign(Object.assign({}, apiSpec), {\n    servers: serversWithEmulators(apiSpec.servers),\n    paths\n  });\n\n  function serversWithEmulators(servers) {\n    const result = [];\n\n    for (const server of servers) {\n      result.push({\n        url: server.url ? server.url.replace(\"https://\", \"{EMULATOR}/\") : \"{EMULATOR}\",\n        variables: {\n          EMULATOR: {\n            default: host ? `${protocol}://${host}` : \"\",\n            description: \"The protocol, hostname, and port of Firebase Auth Emulator.\"\n          }\n        }\n      });\n\n      if (server.url) {\n        result.push(server);\n      }\n    }\n\n    return result;\n  }\n}\n\nasync function createApp(defaultProjectId, projectStateForId = new Map()) {\n  const app = express();\n  app.set(\"json spaces\", 2);\n  app.use(cors({\n    origin: true\n  }));\n  app.delete(\"*\", (req, _, next) => {\n    delete req.headers[\"content-type\"];\n    next();\n  });\n  app.get(\"/\", (req, res) => {\n    return res.json({\n      authEmulator: {\n        ready: true,\n        docs: \"https://firebase.google.com/docs/emulator-suite\",\n        apiSpec: API_SPEC_PATH\n      }\n    });\n  });\n  app.get(API_SPEC_PATH, (req, res) => {\n    res.json(specWithEmulatorServer(req.protocol, req.headers.host));\n  });\n  registerLegacyRoutes(app);\n  handlers_1.registerHandlers(app, (apiKey, tenantId) => getProjectStateById(getProjectIdByApiKey(apiKey), tenantId));\n\n  const apiKeyAuthenticator = (ctx, info) => {\n    if (info.in !== \"query\") {\n      throw new Error('apiKey must be defined as in: \"query\" in API spec.');\n    }\n\n    if (!info.name) {\n      throw new Error(\"apiKey param name is undefined in API spec.\");\n    }\n\n    const key = ctx.req.query[info.name];\n\n    if (typeof key === \"string\" && key.length > 0) {\n      return {\n        type: \"success\",\n        user: getProjectIdByApiKey(key)\n      };\n    } else {\n      return undefined;\n    }\n  };\n\n  const oauth2Authenticator = ctx => {\n    const authorization = ctx.req.headers[\"authorization\"];\n\n    if (!authorization || !authorization.toLowerCase().startsWith(AUTH_HEADER_PREFIX)) {\n      return undefined;\n    }\n\n    const scopes = Object.keys(ctx.api.openApiDoc.components.securitySchemes.Oauth2.flows.authorizationCode.scopes);\n    const token = authorization.substr(AUTH_HEADER_PREFIX.length);\n\n    if (token.toLowerCase() === \"owner\") {\n      return {\n        type: \"success\",\n        user: defaultProjectId,\n        scopes\n      };\n    } else if (token.startsWith(SERVICE_ACCOUNT_TOKEN_PREFIX)) {\n      emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.AUTH).log(\"WARN\", `Received service account token ${token}. Assuming that it owns project \"${defaultProjectId}\".`);\n      return {\n        type: \"success\",\n        user: defaultProjectId,\n        scopes\n      };\n    }\n\n    throw new errors_2.UnauthenticatedError(\"Request had invalid authentication credentials. Expected OAuth 2 access token, login cookie or other valid authentication credential. See https://developers.google.com/identity/sign-in/web/devconsole-project.\", [{\n      message: \"Invalid Credentials\",\n      domain: \"global\",\n      reason: \"authError\",\n      location: \"Authorization\",\n      locationType: \"header\"\n    }]);\n  };\n\n  const apis = await exegesisExpress.middleware(specForRouter(), {\n    controllers: {\n      auth: toExegesisController(operations_1.authOperations, getProjectStateById)\n    },\n    authenticators: {\n      apiKey: apiKeyAuthenticator,\n      Oauth2: oauth2Authenticator\n    },\n\n    autoHandleHttpErrors(err) {\n      if (err.type === \"entity.parse.failed\") {\n        const message = `Invalid JSON payload received. ${err.message}`;\n        err = new errors_2.InvalidArgumentError(message, [{\n          message,\n          domain: \"global\",\n          reason: \"parseError\"\n        }]);\n      }\n\n      if (err instanceof errors_1.ValidationError) {\n        const firstError = err.errors[0];\n        let details;\n\n        if (firstError.location) {\n          details = `${firstError.location.path} ${firstError.message}`;\n        } else {\n          details = firstError.message;\n        }\n\n        err = new errors_2.InvalidArgumentError(`Invalid JSON payload received. ${details}`);\n      }\n\n      if (err.name === \"HttpBadRequestError\") {\n        err = new errors_2.BadRequestError(err.message, \"unknown\");\n      }\n\n      throw err;\n    },\n\n    defaultMaxBodySize: 1024 * 1024 * 1024,\n    validateDefaultResponses: true,\n\n    onResponseValidationError({\n      errors\n    }) {\n      utils_1.logError(new Error(`An internal error occured when generating response. Details:\\n${JSON.stringify(errors)}`));\n      throw new errors_2.InternalError(\"An internal error occured when generating response.\", \"emulator-response-validation\");\n    },\n\n    customFormats: {\n      \"google-datetime\"() {\n        return true;\n      },\n\n      \"google-fieldmask\"() {\n        return true;\n      },\n\n      \"google-duration\"() {\n        return true;\n      },\n\n      uint64() {\n        return true;\n      },\n\n      uint32() {\n        return true;\n      }\n\n    },\n    plugins: [{\n      info: {\n        name: \"test\"\n      },\n\n      makeExegesisPlugin() {\n        return {\n          postSecurity(pluginContext) {\n            wrapValidateBody(pluginContext);\n            return Promise.resolve();\n          },\n\n          postController(ctx) {\n            if (ctx.res.statusCode === 401) {\n              const requirements = ctx.api.operationObject.security;\n\n              if (requirements === null || requirements === void 0 ? void 0 : requirements.some(req => req.apiKey)) {\n                throw new errors_2.PermissionDeniedError(\"The request is missing a valid API key.\");\n              } else {\n                throw new errors_2.UnauthenticatedError(\"Request is missing required authentication credential. Expected OAuth 2 access token, login cookie or other valid authentication credential. See https://developers.google.com/identity/sign-in/web/devconsole-project.\", [{\n                  message: \"Login Required.\",\n                  domain: \"global\",\n                  reason: \"required\",\n                  location: \"Authorization\",\n                  locationType: \"header\"\n                }]);\n              }\n            }\n          }\n\n        };\n      }\n\n    }]\n  });\n  app.use(apis);\n  app.use(() => {\n    throw new errors_2.NotFoundError();\n  });\n  app.use((err, req, res, next) => {\n    let apiError;\n\n    if (err instanceof errors_2.ApiError) {\n      apiError = err;\n    } else if (!err.status || err.status === 500) {\n      apiError = new errors_2.UnknownError(err.message || \"Unknown error\", err.name || \"unknown\");\n    } else {\n      return res.status(err.status).json(err);\n    }\n\n    if (apiError.code === 500) {\n      utils_1.logError(err);\n    }\n\n    return res.status(apiError.code).json({\n      error: apiError\n    });\n  });\n  return app;\n\n  function getProjectIdByApiKey(apiKey) {\n    apiKey;\n    return defaultProjectId;\n  }\n\n  function getProjectStateById(projectId, tenantId) {\n    let agentState = projectStateForId.get(projectId);\n\n    if (!agentState) {\n      agentState = new state_1.AgentProjectState(projectId);\n      projectStateForId.set(projectId, agentState);\n    }\n\n    if (!tenantId) {\n      return agentState;\n    }\n\n    return agentState.getTenantProject(tenantId);\n  }\n}\n\nexports.createApp = createApp;\n\nfunction registerLegacyRoutes(app) {\n  const relyingPartyPrefix = \"/www.googleapis.com/identitytoolkit/v3/relyingparty/\";\n  const v1Prefix = \"/identitytoolkit.googleapis.com/v1/\";\n\n  for (const [oldPath, newPath] of [[\"createAuthUri\", \"accounts:createAuthUri\"], [\"deleteAccount\", \"accounts:delete\"], [\"emailLinkSignin\", \"accounts:signInWithEmailLink\"], [\"getAccountInfo\", \"accounts:lookup\"], [\"getOobConfirmationCode\", \"accounts:sendOobCode\"], [\"getProjectConfig\", \"projects\"], [\"getRecaptchaParam\", \"recaptchaParams\"], [\"publicKeys\", \"publicKeys\"], [\"resetPassword\", \"accounts:resetPassword\"], [\"sendVerificationCode\", \"accounts:sendVerificationCode\"], [\"setAccountInfo\", \"accounts:update\"], [\"setProjectConfig\", \"setProjectConfig\"], [\"signupNewUser\", \"accounts:signUp\"], [\"verifyAssertion\", \"accounts:signInWithIdp\"], [\"verifyCustomToken\", \"accounts:signInWithCustomToken\"], [\"verifyPassword\", \"accounts:signInWithPassword\"], [\"verifyPhoneNumber\", \"accounts:signInWithPhoneNumber\"]]) {\n    app.all(`${relyingPartyPrefix}${oldPath}`, (req, _, next) => {\n      req.url = `${v1Prefix}${newPath}`;\n      next();\n    });\n  }\n\n  app.post(`${relyingPartyPrefix}signOutUser`, () => {\n    throw new errors_2.NotImplementedError(`signOutUser is not implemented in the Auth Emulator.`);\n  });\n\n  for (const [oldPath, newMethod, newPath] of [[\"downloadAccount\", \"GET\", \"accounts:batchGet\"], [\"uploadAccount\", \"POST\", \"accounts:batchCreate\"]]) {\n    app.post(`${relyingPartyPrefix}${oldPath}`, bodyParser.json(), (req, res, next) => {\n      req.body = convertKeysToCamelCase(req.body || {});\n      const targetProjectId = req.body.targetProjectId;\n\n      if (!targetProjectId) {\n        return next(new errors_2.BadRequestError(\"INSUFFICIENT_PERMISSION\"));\n      }\n\n      delete req.body.targetProjectId;\n      req.method = newMethod;\n      let qs = req.url.split(\"?\", 2)[1] || \"\";\n\n      if (newMethod === \"GET\") {\n        Object.assign(req.query, req.body);\n        const bodyAsQuery = new url_1.URLSearchParams(req.body).toString();\n        qs = qs ? `${qs}&${bodyAsQuery}` : bodyAsQuery;\n        delete req.body;\n        delete req.headers[\"content-type\"];\n      }\n\n      req.url = `${v1Prefix}projects/${encodeURIComponent(targetProjectId)}/${newPath}?${qs}`;\n      next();\n    });\n  }\n}\n\nfunction toExegesisController(ops, getProjectStateById) {\n  const result = {};\n  processNested(ops, \"\");\n  return new Proxy(result, {\n    get: (obj, prop) => {\n      if (typeof prop !== \"string\" || prop in obj) {\n        return obj[prop];\n      }\n\n      const stub = () => {\n        throw new errors_2.NotImplementedError(`${prop} is not implemented in the Auth Emulator.`);\n      };\n\n      return stub;\n    }\n  });\n\n  function processNested(nested, prefix) {\n    Object.entries(nested).forEach(([key, value]) => {\n      if (typeof value === \"function\") {\n        result[`${prefix}${key}`] = toExegesisOperation(value);\n      } else {\n        processNested(value, `${prefix}${key}.`);\n\n        if (typeof value._ === \"function\") {\n          result[`${prefix}${key}`] = toExegesisOperation(value._);\n        }\n      }\n    });\n  }\n\n  function toExegesisOperation(operation) {\n    return ctx => {\n      var _a, _b, _c, _d, _e, _f, _g;\n\n      let targetProjectId = ctx.params.path.targetProjectId || ((_a = ctx.requestBody) === null || _a === void 0 ? void 0 : _a.targetProjectId);\n\n      if (targetProjectId) {\n        if ((_b = ctx.api.operationObject.security) === null || _b === void 0 ? void 0 : _b.some(sec => sec.Oauth2)) {\n          errors_2.assert((_c = ctx.security) === null || _c === void 0 ? void 0 : _c.Oauth2, \"INSUFFICIENT_PERMISSION : Only authenticated requests can specify target_project_id.\");\n        }\n      } else {\n        targetProjectId = ctx.user;\n      }\n\n      let targetTenantId = undefined;\n\n      if (ctx.params.path.tenantId && ((_d = ctx.requestBody) === null || _d === void 0 ? void 0 : _d.tenantId)) {\n        errors_2.assert(ctx.params.path.tenantId === ctx.requestBody.tenantId, \"TENANT_ID_MISMATCH\");\n      }\n\n      targetTenantId = ctx.params.path.tenantId || ((_e = ctx.requestBody) === null || _e === void 0 ? void 0 : _e.tenantId);\n\n      if ((_f = ctx.requestBody) === null || _f === void 0 ? void 0 : _f.idToken) {\n        const idToken = (_g = ctx.requestBody) === null || _g === void 0 ? void 0 : _g.idToken;\n        const decoded = jsonwebtoken_1.decode(idToken, {\n          complete: true\n        });\n\n        if ((decoded === null || decoded === void 0 ? void 0 : decoded.payload.firebase.tenant) && targetTenantId) {\n          errors_2.assert((decoded === null || decoded === void 0 ? void 0 : decoded.payload.firebase.tenant) === targetTenantId, \"TENANT_ID_MISMATCH\");\n        }\n\n        targetTenantId = targetTenantId || (decoded === null || decoded === void 0 ? void 0 : decoded.payload.firebase.tenant);\n      }\n\n      return operation(getProjectStateById(targetProjectId, targetTenantId), ctx.requestBody, ctx);\n    };\n  }\n}\n\nfunction wrapValidateBody(pluginContext) {\n  const op = pluginContext._operation;\n\n  if (op.validateBody && !op._authEmulatorValidateBodyWrapped) {\n    const validateBody = op.validateBody.bind(op);\n\n    op.validateBody = body => {\n      return validateAndFixRestMappingRequestBody(validateBody, body, pluginContext.api);\n    };\n\n    op._authEmulatorValidateBodyWrapped = true;\n  }\n}\n\nfunction validateAndFixRestMappingRequestBody(validate, body, api) {\n  var _a;\n\n  body = convertKeysToCamelCase(body);\n  let result;\n  let keepFixing = false;\n  const fixedPaths = new Set();\n\n  do {\n    result = validate(body);\n    if (!result.errors) return result;\n    keepFixing = false;\n\n    for (const error of result.errors) {\n      const path = (_a = error.location) === null || _a === void 0 ? void 0 : _a.path;\n      const ajvError = error.ajvError;\n\n      if (!path || fixedPaths.has(path) || !ajvError) {\n        continue;\n      }\n\n      const dataPath = jsonPointerToPath(path);\n\n      const value = _.get(body, dataPath);\n\n      if (ajvError.keyword === \"type\" && ajvError.params.type === \"string\") {\n        if (typeof value === \"number\") {\n          _.set(body, dataPath, value.toString());\n\n          keepFixing = true;\n        }\n      } else if (ajvError.keyword === \"enum\") {\n        const params = ajvError.params;\n        const enumValue = params.allowedValues[value];\n\n        if (enumValue) {\n          _.set(body, dataPath, enumValue);\n\n          keepFixing = true;\n        }\n      }\n    }\n  } while (keepFixing);\n\n  return result;\n}\n\nfunction convertKeysToCamelCase(body) {\n  if (body == null || typeof body !== \"object\") return body;\n\n  if (Array.isArray(body)) {\n    return body.map(convertKeysToCamelCase);\n  }\n\n  const result = Object.create(null);\n\n  for (const key of Object.keys(body)) {\n    result[lodash_1.camelCase(key)] = convertKeysToCamelCase(body[key]);\n  }\n\n  return result;\n}\n\nfunction jsonPointerToPath(pointer) {\n  const path = pointer.split(\"/\").map(segment => segment.replace(/~1/g, \"/\").replace(/~0/g, \"~\"));\n\n  if (path[0] === \"#\" || path[0] === \"\") {\n    path.shift();\n  }\n\n  return path;\n}","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/emulator/auth/server.js"],"names":["Object","defineProperty","exports","value","createApp","cors","require","express","exegesisExpress","errors_1","_","emulatorLogger_1","types_1","operations_1","state_1","apiSpec_1","errors_2","utils_1","lodash_1","handlers_1","bodyParser","url_1","jsonwebtoken_1","apiSpec","default","API_SPEC_PATH","AUTH_HEADER_PREFIX","SERVICE_ACCOUNT_TOKEN_PREFIX","specForRouter","paths","entries","forEach","path","pathObj","_a","servers","length","Error","pathWithNamespace","url","replace","assign","undefined","specWithEmulatorServer","protocol","host","serversWithEmulators","result","server","push","variables","EMULATOR","description","defaultProjectId","projectStateForId","Map","app","set","use","origin","delete","req","next","headers","get","res","json","authEmulator","ready","docs","registerLegacyRoutes","registerHandlers","apiKey","tenantId","getProjectStateById","getProjectIdByApiKey","apiKeyAuthenticator","ctx","info","in","name","key","query","type","user","oauth2Authenticator","authorization","toLowerCase","startsWith","scopes","keys","api","openApiDoc","components","securitySchemes","Oauth2","flows","authorizationCode","token","substr","EmulatorLogger","forEmulator","Emulators","AUTH","log","UnauthenticatedError","message","domain","reason","location","locationType","apis","middleware","controllers","auth","toExegesisController","authOperations","authenticators","autoHandleHttpErrors","err","InvalidArgumentError","ValidationError","firstError","errors","details","BadRequestError","defaultMaxBodySize","validateDefaultResponses","onResponseValidationError","logError","JSON","stringify","InternalError","customFormats","uint64","uint32","plugins","makeExegesisPlugin","postSecurity","pluginContext","wrapValidateBody","Promise","resolve","postController","statusCode","requirements","operationObject","security","some","PermissionDeniedError","NotFoundError","apiError","ApiError","status","UnknownError","code","error","projectId","agentState","AgentProjectState","getTenantProject","relyingPartyPrefix","v1Prefix","oldPath","newPath","all","post","NotImplementedError","newMethod","body","convertKeysToCamelCase","targetProjectId","method","qs","split","bodyAsQuery","URLSearchParams","toString","encodeURIComponent","ops","processNested","Proxy","obj","prop","stub","nested","prefix","toExegesisOperation","operation","_b","_c","_d","_e","_f","_g","params","requestBody","sec","assert","targetTenantId","idToken","decoded","decode","complete","payload","firebase","tenant","op","_operation","validateBody","_authEmulatorValidateBodyWrapped","bind","validateAndFixRestMappingRequestBody","validate","keepFixing","fixedPaths","Set","ajvError","has","dataPath","jsonPointerToPath","keyword","enumValue","allowedValues","Array","isArray","map","create","camelCase","pointer","segment","shift"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createApp = void 0;\nconst cors = require(\"cors\");\nconst express = require(\"express\");\nconst exegesisExpress = require(\"exegesis-express\");\nconst errors_1 = require(\"exegesis/lib/errors\");\nconst _ = require(\"lodash\");\nconst emulatorLogger_1 = require(\"../emulatorLogger\");\nconst types_1 = require(\"../types\");\nconst operations_1 = require(\"./operations\");\nconst state_1 = require(\"./state\");\nconst apiSpec_1 = require(\"./apiSpec\");\nconst errors_2 = require(\"./errors\");\nconst utils_1 = require(\"./utils\");\nconst lodash_1 = require(\"lodash\");\nconst handlers_1 = require(\"./handlers\");\nconst bodyParser = require(\"body-parser\");\nconst url_1 = require(\"url\");\nconst jsonwebtoken_1 = require(\"jsonwebtoken\");\nconst apiSpec = apiSpec_1.default;\nconst API_SPEC_PATH = \"/emulator/openapi.json\";\nconst AUTH_HEADER_PREFIX = \"bearer \";\nconst SERVICE_ACCOUNT_TOKEN_PREFIX = \"ya29.\";\nfunction specForRouter() {\n    const paths = {};\n    Object.entries(apiSpec.paths).forEach(([path, pathObj]) => {\n        var _a;\n        const servers = (_a = pathObj.servers) !== null && _a !== void 0 ? _a : apiSpec.servers;\n        if (!servers || !servers.length) {\n            throw new Error(\"No servers defined in API spec.\");\n        }\n        const pathWithNamespace = servers[0].url.replace(\"https://\", \"/\") + path;\n        paths[pathWithNamespace] = pathObj;\n    });\n    return Object.assign(Object.assign({}, apiSpec), { paths, servers: undefined, \"x-exegesis-controller\": \"auth\" });\n}\nfunction specWithEmulatorServer(protocol, host) {\n    const paths = {};\n    Object.entries(apiSpec.paths).forEach(([path, pathObj]) => {\n        const servers = pathObj.servers;\n        if (servers) {\n            pathObj = Object.assign(Object.assign({}, pathObj), { servers: serversWithEmulators(servers) });\n        }\n        paths[path] = pathObj;\n    });\n    if (!apiSpec.servers) {\n        throw new Error(\"No servers defined in API spec.\");\n    }\n    return Object.assign(Object.assign({}, apiSpec), { servers: serversWithEmulators(apiSpec.servers), paths });\n    function serversWithEmulators(servers) {\n        const result = [];\n        for (const server of servers) {\n            result.push({\n                url: server.url ? server.url.replace(\"https://\", \"{EMULATOR}/\") : \"{EMULATOR}\",\n                variables: {\n                    EMULATOR: {\n                        default: host ? `${protocol}://${host}` : \"\",\n                        description: \"The protocol, hostname, and port of Firebase Auth Emulator.\",\n                    },\n                },\n            });\n            if (server.url) {\n                result.push(server);\n            }\n        }\n        return result;\n    }\n}\nasync function createApp(defaultProjectId, projectStateForId = new Map()) {\n    const app = express();\n    app.set(\"json spaces\", 2);\n    app.use(cors({ origin: true }));\n    app.delete(\"*\", (req, _, next) => {\n        delete req.headers[\"content-type\"];\n        next();\n    });\n    app.get(\"/\", (req, res) => {\n        return res.json({\n            authEmulator: {\n                ready: true,\n                docs: \"https://firebase.google.com/docs/emulator-suite\",\n                apiSpec: API_SPEC_PATH,\n            },\n        });\n    });\n    app.get(API_SPEC_PATH, (req, res) => {\n        res.json(specWithEmulatorServer(req.protocol, req.headers.host));\n    });\n    registerLegacyRoutes(app);\n    handlers_1.registerHandlers(app, (apiKey, tenantId) => getProjectStateById(getProjectIdByApiKey(apiKey), tenantId));\n    const apiKeyAuthenticator = (ctx, info) => {\n        if (info.in !== \"query\") {\n            throw new Error('apiKey must be defined as in: \"query\" in API spec.');\n        }\n        if (!info.name) {\n            throw new Error(\"apiKey param name is undefined in API spec.\");\n        }\n        const key = ctx.req.query[info.name];\n        if (typeof key === \"string\" && key.length > 0) {\n            return { type: \"success\", user: getProjectIdByApiKey(key) };\n        }\n        else {\n            return undefined;\n        }\n    };\n    const oauth2Authenticator = (ctx) => {\n        const authorization = ctx.req.headers[\"authorization\"];\n        if (!authorization || !authorization.toLowerCase().startsWith(AUTH_HEADER_PREFIX)) {\n            return undefined;\n        }\n        const scopes = Object.keys(ctx.api.openApiDoc.components.securitySchemes.Oauth2.flows.authorizationCode.scopes);\n        const token = authorization.substr(AUTH_HEADER_PREFIX.length);\n        if (token.toLowerCase() === \"owner\") {\n            return { type: \"success\", user: defaultProjectId, scopes };\n        }\n        else if (token.startsWith(SERVICE_ACCOUNT_TOKEN_PREFIX)) {\n            emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.AUTH).log(\"WARN\", `Received service account token ${token}. Assuming that it owns project \"${defaultProjectId}\".`);\n            return { type: \"success\", user: defaultProjectId, scopes };\n        }\n        throw new errors_2.UnauthenticatedError(\"Request had invalid authentication credentials. Expected OAuth 2 access token, login cookie or other valid authentication credential. See https://developers.google.com/identity/sign-in/web/devconsole-project.\", [\n            {\n                message: \"Invalid Credentials\",\n                domain: \"global\",\n                reason: \"authError\",\n                location: \"Authorization\",\n                locationType: \"header\",\n            },\n        ]);\n    };\n    const apis = await exegesisExpress.middleware(specForRouter(), {\n        controllers: { auth: toExegesisController(operations_1.authOperations, getProjectStateById) },\n        authenticators: {\n            apiKey: apiKeyAuthenticator,\n            Oauth2: oauth2Authenticator,\n        },\n        autoHandleHttpErrors(err) {\n            if (err.type === \"entity.parse.failed\") {\n                const message = `Invalid JSON payload received. ${err.message}`;\n                err = new errors_2.InvalidArgumentError(message, [\n                    {\n                        message,\n                        domain: \"global\",\n                        reason: \"parseError\",\n                    },\n                ]);\n            }\n            if (err instanceof errors_1.ValidationError) {\n                const firstError = err.errors[0];\n                let details;\n                if (firstError.location) {\n                    details = `${firstError.location.path} ${firstError.message}`;\n                }\n                else {\n                    details = firstError.message;\n                }\n                err = new errors_2.InvalidArgumentError(`Invalid JSON payload received. ${details}`);\n            }\n            if (err.name === \"HttpBadRequestError\") {\n                err = new errors_2.BadRequestError(err.message, \"unknown\");\n            }\n            throw err;\n        },\n        defaultMaxBodySize: 1024 * 1024 * 1024,\n        validateDefaultResponses: true,\n        onResponseValidationError({ errors }) {\n            utils_1.logError(new Error(`An internal error occured when generating response. Details:\\n${JSON.stringify(errors)}`));\n            throw new errors_2.InternalError(\"An internal error occured when generating response.\", \"emulator-response-validation\");\n        },\n        customFormats: {\n            \"google-datetime\"() {\n                return true;\n            },\n            \"google-fieldmask\"() {\n                return true;\n            },\n            \"google-duration\"() {\n                return true;\n            },\n            uint64() {\n                return true;\n            },\n            uint32() {\n                return true;\n            },\n        },\n        plugins: [\n            {\n                info: { name: \"test\" },\n                makeExegesisPlugin() {\n                    return {\n                        postSecurity(pluginContext) {\n                            wrapValidateBody(pluginContext);\n                            return Promise.resolve();\n                        },\n                        postController(ctx) {\n                            if (ctx.res.statusCode === 401) {\n                                const requirements = ctx.api.operationObject.security;\n                                if (requirements === null || requirements === void 0 ? void 0 : requirements.some((req) => req.apiKey)) {\n                                    throw new errors_2.PermissionDeniedError(\"The request is missing a valid API key.\");\n                                }\n                                else {\n                                    throw new errors_2.UnauthenticatedError(\"Request is missing required authentication credential. Expected OAuth 2 access token, login cookie or other valid authentication credential. See https://developers.google.com/identity/sign-in/web/devconsole-project.\", [\n                                        {\n                                            message: \"Login Required.\",\n                                            domain: \"global\",\n                                            reason: \"required\",\n                                            location: \"Authorization\",\n                                            locationType: \"header\",\n                                        },\n                                    ]);\n                                }\n                            }\n                        },\n                    };\n                },\n            },\n        ],\n    });\n    app.use(apis);\n    app.use(() => {\n        throw new errors_2.NotFoundError();\n    });\n    app.use(((err, req, res, next) => {\n        let apiError;\n        if (err instanceof errors_2.ApiError) {\n            apiError = err;\n        }\n        else if (!err.status || err.status === 500) {\n            apiError = new errors_2.UnknownError(err.message || \"Unknown error\", err.name || \"unknown\");\n        }\n        else {\n            return res.status(err.status).json(err);\n        }\n        if (apiError.code === 500) {\n            utils_1.logError(err);\n        }\n        return res.status(apiError.code).json({ error: apiError });\n    }));\n    return app;\n    function getProjectIdByApiKey(apiKey) {\n        apiKey;\n        return defaultProjectId;\n    }\n    function getProjectStateById(projectId, tenantId) {\n        let agentState = projectStateForId.get(projectId);\n        if (!agentState) {\n            agentState = new state_1.AgentProjectState(projectId);\n            projectStateForId.set(projectId, agentState);\n        }\n        if (!tenantId) {\n            return agentState;\n        }\n        return agentState.getTenantProject(tenantId);\n    }\n}\nexports.createApp = createApp;\nfunction registerLegacyRoutes(app) {\n    const relyingPartyPrefix = \"/www.googleapis.com/identitytoolkit/v3/relyingparty/\";\n    const v1Prefix = \"/identitytoolkit.googleapis.com/v1/\";\n    for (const [oldPath, newPath] of [\n        [\"createAuthUri\", \"accounts:createAuthUri\"],\n        [\"deleteAccount\", \"accounts:delete\"],\n        [\"emailLinkSignin\", \"accounts:signInWithEmailLink\"],\n        [\"getAccountInfo\", \"accounts:lookup\"],\n        [\"getOobConfirmationCode\", \"accounts:sendOobCode\"],\n        [\"getProjectConfig\", \"projects\"],\n        [\"getRecaptchaParam\", \"recaptchaParams\"],\n        [\"publicKeys\", \"publicKeys\"],\n        [\"resetPassword\", \"accounts:resetPassword\"],\n        [\"sendVerificationCode\", \"accounts:sendVerificationCode\"],\n        [\"setAccountInfo\", \"accounts:update\"],\n        [\"setProjectConfig\", \"setProjectConfig\"],\n        [\"signupNewUser\", \"accounts:signUp\"],\n        [\"verifyAssertion\", \"accounts:signInWithIdp\"],\n        [\"verifyCustomToken\", \"accounts:signInWithCustomToken\"],\n        [\"verifyPassword\", \"accounts:signInWithPassword\"],\n        [\"verifyPhoneNumber\", \"accounts:signInWithPhoneNumber\"],\n    ]) {\n        app.all(`${relyingPartyPrefix}${oldPath}`, (req, _, next) => {\n            req.url = `${v1Prefix}${newPath}`;\n            next();\n        });\n    }\n    app.post(`${relyingPartyPrefix}signOutUser`, () => {\n        throw new errors_2.NotImplementedError(`signOutUser is not implemented in the Auth Emulator.`);\n    });\n    for (const [oldPath, newMethod, newPath] of [\n        [\"downloadAccount\", \"GET\", \"accounts:batchGet\"],\n        [\"uploadAccount\", \"POST\", \"accounts:batchCreate\"],\n    ]) {\n        app.post(`${relyingPartyPrefix}${oldPath}`, bodyParser.json(), (req, res, next) => {\n            req.body = convertKeysToCamelCase(req.body || {});\n            const targetProjectId = req.body.targetProjectId;\n            if (!targetProjectId) {\n                return next(new errors_2.BadRequestError(\"INSUFFICIENT_PERMISSION\"));\n            }\n            delete req.body.targetProjectId;\n            req.method = newMethod;\n            let qs = req.url.split(\"?\", 2)[1] || \"\";\n            if (newMethod === \"GET\") {\n                Object.assign(req.query, req.body);\n                const bodyAsQuery = new url_1.URLSearchParams(req.body).toString();\n                qs = qs ? `${qs}&${bodyAsQuery}` : bodyAsQuery;\n                delete req.body;\n                delete req.headers[\"content-type\"];\n            }\n            req.url = `${v1Prefix}projects/${encodeURIComponent(targetProjectId)}/${newPath}?${qs}`;\n            next();\n        });\n    }\n}\nfunction toExegesisController(ops, getProjectStateById) {\n    const result = {};\n    processNested(ops, \"\");\n    return new Proxy(result, {\n        get: (obj, prop) => {\n            if (typeof prop !== \"string\" || prop in obj) {\n                return obj[prop];\n            }\n            const stub = () => {\n                throw new errors_2.NotImplementedError(`${prop} is not implemented in the Auth Emulator.`);\n            };\n            return stub;\n        },\n    });\n    function processNested(nested, prefix) {\n        Object.entries(nested).forEach(([key, value]) => {\n            if (typeof value === \"function\") {\n                result[`${prefix}${key}`] = toExegesisOperation(value);\n            }\n            else {\n                processNested(value, `${prefix}${key}.`);\n                if (typeof value._ === \"function\") {\n                    result[`${prefix}${key}`] = toExegesisOperation(value._);\n                }\n            }\n        });\n    }\n    function toExegesisOperation(operation) {\n        return (ctx) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            let targetProjectId = ctx.params.path.targetProjectId || ((_a = ctx.requestBody) === null || _a === void 0 ? void 0 : _a.targetProjectId);\n            if (targetProjectId) {\n                if ((_b = ctx.api.operationObject.security) === null || _b === void 0 ? void 0 : _b.some((sec) => sec.Oauth2)) {\n                    errors_2.assert((_c = ctx.security) === null || _c === void 0 ? void 0 : _c.Oauth2, \"INSUFFICIENT_PERMISSION : Only authenticated requests can specify target_project_id.\");\n                }\n            }\n            else {\n                targetProjectId = ctx.user;\n            }\n            let targetTenantId = undefined;\n            if (ctx.params.path.tenantId && ((_d = ctx.requestBody) === null || _d === void 0 ? void 0 : _d.tenantId)) {\n                errors_2.assert(ctx.params.path.tenantId === ctx.requestBody.tenantId, \"TENANT_ID_MISMATCH\");\n            }\n            targetTenantId = ctx.params.path.tenantId || ((_e = ctx.requestBody) === null || _e === void 0 ? void 0 : _e.tenantId);\n            if ((_f = ctx.requestBody) === null || _f === void 0 ? void 0 : _f.idToken) {\n                const idToken = (_g = ctx.requestBody) === null || _g === void 0 ? void 0 : _g.idToken;\n                const decoded = jsonwebtoken_1.decode(idToken, { complete: true });\n                if ((decoded === null || decoded === void 0 ? void 0 : decoded.payload.firebase.tenant) && targetTenantId) {\n                    errors_2.assert((decoded === null || decoded === void 0 ? void 0 : decoded.payload.firebase.tenant) === targetTenantId, \"TENANT_ID_MISMATCH\");\n                }\n                targetTenantId = targetTenantId || (decoded === null || decoded === void 0 ? void 0 : decoded.payload.firebase.tenant);\n            }\n            return operation(getProjectStateById(targetProjectId, targetTenantId), ctx.requestBody, ctx);\n        };\n    }\n}\nfunction wrapValidateBody(pluginContext) {\n    const op = pluginContext._operation;\n    if (op.validateBody && !op._authEmulatorValidateBodyWrapped) {\n        const validateBody = op.validateBody.bind(op);\n        op.validateBody = (body) => {\n            return validateAndFixRestMappingRequestBody(validateBody, body, pluginContext.api);\n        };\n        op._authEmulatorValidateBodyWrapped = true;\n    }\n}\nfunction validateAndFixRestMappingRequestBody(validate, body, api) {\n    var _a;\n    body = convertKeysToCamelCase(body);\n    let result;\n    let keepFixing = false;\n    const fixedPaths = new Set();\n    do {\n        result = validate(body);\n        if (!result.errors)\n            return result;\n        keepFixing = false;\n        for (const error of result.errors) {\n            const path = (_a = error.location) === null || _a === void 0 ? void 0 : _a.path;\n            const ajvError = error.ajvError;\n            if (!path || fixedPaths.has(path) || !ajvError) {\n                continue;\n            }\n            const dataPath = jsonPointerToPath(path);\n            const value = _.get(body, dataPath);\n            if (ajvError.keyword === \"type\" && ajvError.params.type === \"string\") {\n                if (typeof value === \"number\") {\n                    _.set(body, dataPath, value.toString());\n                    keepFixing = true;\n                }\n            }\n            else if (ajvError.keyword === \"enum\") {\n                const params = ajvError.params;\n                const enumValue = params.allowedValues[value];\n                if (enumValue) {\n                    _.set(body, dataPath, enumValue);\n                    keepFixing = true;\n                }\n            }\n        }\n    } while (keepFixing);\n    return result;\n}\nfunction convertKeysToCamelCase(body) {\n    if (body == null || typeof body !== \"object\")\n        return body;\n    if (Array.isArray(body)) {\n        return body.map(convertKeysToCamelCase);\n    }\n    const result = Object.create(null);\n    for (const key of Object.keys(body)) {\n        result[lodash_1.camelCase(key)] = convertKeysToCamelCase(body[key]);\n    }\n    return result;\n}\nfunction jsonPointerToPath(pointer) {\n    const path = pointer.split(\"/\").map((segment) => segment.replace(/~1/g, \"/\").replace(/~0/g, \"~\"));\n    if (path[0] === \"#\" || path[0] === \"\") {\n        path.shift();\n    }\n    return path;\n}\n"]},"metadata":{},"sourceType":"script"}