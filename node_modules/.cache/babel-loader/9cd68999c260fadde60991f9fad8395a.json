{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst functionsConfig = require(\"../functionsConfig\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst functional_1 = require(\"../functional\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst helper = require(\"../deploy/functions/functionsDeployHelper\");\n\nconst utils = require(\"../utils\");\n\nconst backend = require(\"../deploy/functions/backend\");\n\nconst planner = require(\"../deploy/functions/release/planner\");\n\nconst fabricator = require(\"../deploy/functions/release/fabricator\");\n\nconst executor = require(\"../deploy/functions/release/executor\");\n\nconst reporter = require(\"../deploy/functions/release/reporter\");\n\nexports.default = new command_1.Command(\"functions:delete [filters...]\").description(\"delete one or more Cloud Functions by name or group name.\").option(\"--region <region>\", \"Specify region of the function to be deleted. \" + \"If omitted, functions from all regions whose names match the filters will be deleted. \").withForce().before(requirePermissions_1.requirePermissions, [\"cloudfunctions.functions.list\", \"cloudfunctions.functions.delete\"]).action(async (filters, options) => {\n  if (!filters.length) {\n    return utils.reject(\"Must supply at least function or group name.\");\n  }\n\n  const context = {\n    projectId: projectUtils_1.needProjectId(options),\n    filters: filters.map(f => f.split(\".\"))\n  };\n  const [config, existingBackend] = await Promise.all([functionsConfig.getFirebaseConfig(options), backend.existingBackend(context)]);\n  await backend.checkAvailability(context, backend.empty());\n  const appEngineLocation = functionsConfig.getAppEngineLocation(config);\n\n  if (options.region) {\n    existingBackend.endpoints = {\n      [options.region]: existingBackend.endpoints[options.region]\n    };\n  }\n\n  const plan = planner.createDeploymentPlan(backend.empty(), existingBackend, {\n    filters: context.filters,\n    deleteAll: true\n  });\n  const allEpToDelete = Object.values(plan).map(changes => changes.endpointsToDelete).reduce(functional_1.reduceFlat, []).sort(backend.compareFunctions);\n\n  if (allEpToDelete.length === 0) {\n    throw new error_1.FirebaseError(`The specified filters do not match any existing functions in project ${clc.bold(context.projectId)}.`);\n  }\n\n  const deleteList = allEpToDelete.map(func => `\\t${helper.getFunctionLabel(func)}`).join(\"\\n\");\n  const confirmDeletion = await prompt_1.promptOnce({\n    type: \"confirm\",\n    name: \"force\",\n    default: false,\n    message: \"You are about to delete the following Cloud Functions:\\n\" + deleteList + \"\\n  Are you sure?\"\n  }, options);\n\n  if (!confirmDeletion) {\n    throw new error_1.FirebaseError(\"Command aborted.\");\n  }\n\n  const functionExecutor = new executor.QueueExecutor({\n    retries: 30,\n    backoff: 20000,\n    concurrency: 40,\n    maxBackoff: 40000\n  });\n\n  try {\n    const fab = new fabricator.Fabricator({\n      functionExecutor,\n      executor: new executor.QueueExecutor({}),\n      appEngineLocation\n    });\n    const summary = await fab.applyPlan(plan);\n    await reporter.logAndTrackDeployStats(summary);\n    reporter.printErrors(summary);\n  } catch (err) {\n    throw new error_1.FirebaseError(\"Failed to delete functions\", {\n      original: err,\n      exit: 1\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/commands/functions-delete.js"],"names":["Object","defineProperty","exports","value","clc","require","functionsConfig","command_1","error_1","projectUtils_1","prompt_1","functional_1","requirePermissions_1","helper","utils","backend","planner","fabricator","executor","reporter","default","Command","description","option","withForce","before","requirePermissions","action","filters","options","length","reject","context","projectId","needProjectId","map","f","split","config","existingBackend","Promise","all","getFirebaseConfig","checkAvailability","empty","appEngineLocation","getAppEngineLocation","region","endpoints","plan","createDeploymentPlan","deleteAll","allEpToDelete","values","changes","endpointsToDelete","reduce","reduceFlat","sort","compareFunctions","FirebaseError","bold","deleteList","func","getFunctionLabel","join","confirmDeletion","promptOnce","type","name","message","functionExecutor","QueueExecutor","retries","backoff","concurrency","maxBackoff","fab","Fabricator","summary","applyPlan","logAndTrackDeployStats","printErrors","err","original","exit"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,oBAAD,CAA/B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMI,cAAc,GAAGJ,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMM,YAAY,GAAGN,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAMO,oBAAoB,GAAGP,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAMQ,MAAM,GAAGR,OAAO,CAAC,2CAAD,CAAtB;;AACA,MAAMS,KAAK,GAAGT,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMU,OAAO,GAAGV,OAAO,CAAC,6BAAD,CAAvB;;AACA,MAAMW,OAAO,GAAGX,OAAO,CAAC,qCAAD,CAAvB;;AACA,MAAMY,UAAU,GAAGZ,OAAO,CAAC,wCAAD,CAA1B;;AACA,MAAMa,QAAQ,GAAGb,OAAO,CAAC,sCAAD,CAAxB;;AACA,MAAMc,QAAQ,GAAGd,OAAO,CAAC,sCAAD,CAAxB;;AACAH,OAAO,CAACkB,OAAR,GAAkB,IAAIb,SAAS,CAACc,OAAd,CAAsB,+BAAtB,EACbC,WADa,CACD,2DADC,EAEbC,MAFa,CAEN,mBAFM,EAEe,mDAC7B,wFAHc,EAIbC,SAJa,GAKbC,MALa,CAKNb,oBAAoB,CAACc,kBALf,EAKmC,CAAC,+BAAD,EAAkC,iCAAlC,CALnC,EAMbC,MANa,CAMN,OAAOC,OAAP,EAAgBC,OAAhB,KAA4B;AACpC,MAAI,CAACD,OAAO,CAACE,MAAb,EAAqB;AACjB,WAAOhB,KAAK,CAACiB,MAAN,CAAa,8CAAb,CAAP;AACH;;AACD,QAAMC,OAAO,GAAG;AACZC,IAAAA,SAAS,EAAExB,cAAc,CAACyB,aAAf,CAA6BL,OAA7B,CADC;AAEZD,IAAAA,OAAO,EAAEA,OAAO,CAACO,GAAR,CAAaC,CAAD,IAAOA,CAAC,CAACC,KAAF,CAAQ,GAAR,CAAnB;AAFG,GAAhB;AAIA,QAAM,CAACC,MAAD,EAASC,eAAT,IAA4B,MAAMC,OAAO,CAACC,GAAR,CAAY,CAChDnC,eAAe,CAACoC,iBAAhB,CAAkCb,OAAlC,CADgD,EAEhDd,OAAO,CAACwB,eAAR,CAAwBP,OAAxB,CAFgD,CAAZ,CAAxC;AAIA,QAAMjB,OAAO,CAAC4B,iBAAR,CAA0BX,OAA1B,EAAmCjB,OAAO,CAAC6B,KAAR,EAAnC,CAAN;AACA,QAAMC,iBAAiB,GAAGvC,eAAe,CAACwC,oBAAhB,CAAqCR,MAArC,CAA1B;;AACA,MAAIT,OAAO,CAACkB,MAAZ,EAAoB;AAChBR,IAAAA,eAAe,CAACS,SAAhB,GAA4B;AAAE,OAACnB,OAAO,CAACkB,MAAT,GAAkBR,eAAe,CAACS,SAAhB,CAA0BnB,OAAO,CAACkB,MAAlC;AAApB,KAA5B;AACH;;AACD,QAAME,IAAI,GAAGjC,OAAO,CAACkC,oBAAR,CAA6BnC,OAAO,CAAC6B,KAAR,EAA7B,EAA8CL,eAA9C,EAA+D;AACxEX,IAAAA,OAAO,EAAEI,OAAO,CAACJ,OADuD;AAExEuB,IAAAA,SAAS,EAAE;AAF6D,GAA/D,CAAb;AAIA,QAAMC,aAAa,GAAGpD,MAAM,CAACqD,MAAP,CAAcJ,IAAd,EACjBd,GADiB,CACZmB,OAAD,IAAaA,OAAO,CAACC,iBADR,EAEjBC,MAFiB,CAEV7C,YAAY,CAAC8C,UAFH,EAEe,EAFf,EAGjBC,IAHiB,CAGZ3C,OAAO,CAAC4C,gBAHI,CAAtB;;AAIA,MAAIP,aAAa,CAACtB,MAAd,KAAyB,CAA7B,EAAgC;AAC5B,UAAM,IAAItB,OAAO,CAACoD,aAAZ,CAA2B,wEAAuExD,GAAG,CAACyD,IAAJ,CAAS7B,OAAO,CAACC,SAAjB,CAA4B,GAA9H,CAAN;AACH;;AACD,QAAM6B,UAAU,GAAGV,aAAa,CAACjB,GAAd,CAAmB4B,IAAD,IAAW,KAAIlD,MAAM,CAACmD,gBAAP,CAAwBD,IAAxB,CAA8B,EAA/D,EAAkEE,IAAlE,CAAuE,IAAvE,CAAnB;AACA,QAAMC,eAAe,GAAG,MAAMxD,QAAQ,CAACyD,UAAT,CAAoB;AAC9CC,IAAAA,IAAI,EAAE,SADwC;AAE9CC,IAAAA,IAAI,EAAE,OAFwC;AAG9CjD,IAAAA,OAAO,EAAE,KAHqC;AAI9CkD,IAAAA,OAAO,EAAE,6DACLR,UADK,GAEL;AAN0C,GAApB,EAO3BjC,OAP2B,CAA9B;;AAQA,MAAI,CAACqC,eAAL,EAAsB;AAClB,UAAM,IAAI1D,OAAO,CAACoD,aAAZ,CAA0B,kBAA1B,CAAN;AACH;;AACD,QAAMW,gBAAgB,GAAG,IAAIrD,QAAQ,CAACsD,aAAb,CAA2B;AAChDC,IAAAA,OAAO,EAAE,EADuC;AAEhDC,IAAAA,OAAO,EAAE,KAFuC;AAGhDC,IAAAA,WAAW,EAAE,EAHmC;AAIhDC,IAAAA,UAAU,EAAE;AAJoC,GAA3B,CAAzB;;AAMA,MAAI;AACA,UAAMC,GAAG,GAAG,IAAI5D,UAAU,CAAC6D,UAAf,CAA0B;AAClCP,MAAAA,gBADkC;AAElCrD,MAAAA,QAAQ,EAAE,IAAIA,QAAQ,CAACsD,aAAb,CAA2B,EAA3B,CAFwB;AAGlC3B,MAAAA;AAHkC,KAA1B,CAAZ;AAKA,UAAMkC,OAAO,GAAG,MAAMF,GAAG,CAACG,SAAJ,CAAc/B,IAAd,CAAtB;AACA,UAAM9B,QAAQ,CAAC8D,sBAAT,CAAgCF,OAAhC,CAAN;AACA5D,IAAAA,QAAQ,CAAC+D,WAAT,CAAqBH,OAArB;AACH,GATD,CAUA,OAAOI,GAAP,EAAY;AACR,UAAM,IAAI3E,OAAO,CAACoD,aAAZ,CAA0B,4BAA1B,EAAwD;AAC1DwB,MAAAA,QAAQ,EAAED,GADgD;AAE1DE,MAAAA,IAAI,EAAE;AAFoD,KAAxD,CAAN;AAIH;AACJ,CApEiB,CAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst functionsConfig = require(\"../functionsConfig\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst prompt_1 = require(\"../prompt\");\nconst functional_1 = require(\"../functional\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst helper = require(\"../deploy/functions/functionsDeployHelper\");\nconst utils = require(\"../utils\");\nconst backend = require(\"../deploy/functions/backend\");\nconst planner = require(\"../deploy/functions/release/planner\");\nconst fabricator = require(\"../deploy/functions/release/fabricator\");\nconst executor = require(\"../deploy/functions/release/executor\");\nconst reporter = require(\"../deploy/functions/release/reporter\");\nexports.default = new command_1.Command(\"functions:delete [filters...]\")\n    .description(\"delete one or more Cloud Functions by name or group name.\")\n    .option(\"--region <region>\", \"Specify region of the function to be deleted. \" +\n    \"If omitted, functions from all regions whose names match the filters will be deleted. \")\n    .withForce()\n    .before(requirePermissions_1.requirePermissions, [\"cloudfunctions.functions.list\", \"cloudfunctions.functions.delete\"])\n    .action(async (filters, options) => {\n    if (!filters.length) {\n        return utils.reject(\"Must supply at least function or group name.\");\n    }\n    const context = {\n        projectId: projectUtils_1.needProjectId(options),\n        filters: filters.map((f) => f.split(\".\")),\n    };\n    const [config, existingBackend] = await Promise.all([\n        functionsConfig.getFirebaseConfig(options),\n        backend.existingBackend(context),\n    ]);\n    await backend.checkAvailability(context, backend.empty());\n    const appEngineLocation = functionsConfig.getAppEngineLocation(config);\n    if (options.region) {\n        existingBackend.endpoints = { [options.region]: existingBackend.endpoints[options.region] };\n    }\n    const plan = planner.createDeploymentPlan(backend.empty(), existingBackend, {\n        filters: context.filters,\n        deleteAll: true,\n    });\n    const allEpToDelete = Object.values(plan)\n        .map((changes) => changes.endpointsToDelete)\n        .reduce(functional_1.reduceFlat, [])\n        .sort(backend.compareFunctions);\n    if (allEpToDelete.length === 0) {\n        throw new error_1.FirebaseError(`The specified filters do not match any existing functions in project ${clc.bold(context.projectId)}.`);\n    }\n    const deleteList = allEpToDelete.map((func) => `\\t${helper.getFunctionLabel(func)}`).join(\"\\n\");\n    const confirmDeletion = await prompt_1.promptOnce({\n        type: \"confirm\",\n        name: \"force\",\n        default: false,\n        message: \"You are about to delete the following Cloud Functions:\\n\" +\n            deleteList +\n            \"\\n  Are you sure?\",\n    }, options);\n    if (!confirmDeletion) {\n        throw new error_1.FirebaseError(\"Command aborted.\");\n    }\n    const functionExecutor = new executor.QueueExecutor({\n        retries: 30,\n        backoff: 20000,\n        concurrency: 40,\n        maxBackoff: 40000,\n    });\n    try {\n        const fab = new fabricator.Fabricator({\n            functionExecutor,\n            executor: new executor.QueueExecutor({}),\n            appEngineLocation,\n        });\n        const summary = await fab.applyPlan(plan);\n        await reporter.logAndTrackDeployStats(summary);\n        reporter.printErrors(summary);\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(\"Failed to delete functions\", {\n            original: err,\n            exit: 1,\n        });\n    }\n});\n"]},"metadata":{},"sourceType":"script"}