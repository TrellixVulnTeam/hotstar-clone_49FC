{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readEnvFile = exports.getParamsFromFile = exports.promptForNewParams = exports.getParamsForUpdate = exports.getParams = exports.getParamsWithCurrentValuesAsDefaults = void 0;\n\nconst _ = require(\"lodash\");\n\nconst path = require(\"path\");\n\nconst clc = require(\"cli-color\");\n\nconst dotenv = require(\"dotenv\");\n\nconst fs = require(\"fs-extra\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\n\nconst askUserForParam = require(\"./askUserForParam\");\n\nconst track = require(\"../track\");\n\nfunction setNewDefaults(params, newDefaults) {\n  params.forEach(param => {\n    if (newDefaults[param.param.toUpperCase()]) {\n      param.default = newDefaults[param.param.toUpperCase()];\n    }\n  });\n  return params;\n}\n\nfunction getParamsWithCurrentValuesAsDefaults(extensionInstance) {\n  const specParams = _.cloneDeep(_.get(extensionInstance, \"config.source.spec.params\", []));\n\n  const currentParams = _.cloneDeep(_.get(extensionInstance, \"config.params\", {}));\n\n  return setNewDefaults(specParams, currentParams);\n}\n\nexports.getParamsWithCurrentValuesAsDefaults = getParamsWithCurrentValuesAsDefaults;\n\nasync function getParams(args) {\n  let params;\n\n  if (args.nonInteractive && !args.paramsEnvPath) {\n    const paramsMessage = args.paramSpecs.map(p => {\n      return `\\t${p.param}${p.required ? \"\" : \" (Optional)\"}`;\n    }).join(\"\\n\");\n    throw new error_1.FirebaseError(\"In non-interactive mode but no `--params` flag found. \" + \"To install this extension in non-interactive mode, set `--params` to a path to an .env file\" + \" containing values for this extension's params:\\n\" + paramsMessage);\n  } else if (args.paramsEnvPath) {\n    params = getParamsFromFile({\n      projectId: args.projectId,\n      paramSpecs: args.paramSpecs,\n      noninteractive: args.nonInteractive,\n      paramsEnvPath: args.paramsEnvPath\n    });\n  } else {\n    const firebaseProjectParams = await extensionsHelper_1.getFirebaseProjectParams(args.projectId);\n    params = await askUserForParam.ask(args.projectId, args.instanceId, args.paramSpecs, firebaseProjectParams, !!args.reconfiguring);\n  }\n\n  track(\"Extension Params\", _.isEmpty(params) ? \"Not Present\" : \"Present\", _.size(params));\n  return params;\n}\n\nexports.getParams = getParams;\n\nasync function getParamsForUpdate(args) {\n  let params;\n\n  if (args.nonInteractive && !args.paramsEnvPath) {\n    const paramsMessage = args.newSpec.params.map(p => {\n      return `\\t${p.param}${p.required ? \"\" : \" (Optional)\"}`;\n    }).join(\"\\n\");\n    throw new error_1.FirebaseError(\"In non-interactive mode but no `--params` flag found. \" + \"To update this extension in non-interactive mode, set `--params` to a path to an .env file\" + \" containing values for this extension's params:\\n\" + paramsMessage);\n  } else if (args.paramsEnvPath) {\n    params = getParamsFromFile({\n      projectId: args.projectId,\n      paramSpecs: args.newSpec.params,\n      noninteractive: args.nonInteractive,\n      paramsEnvPath: args.paramsEnvPath\n    });\n  } else {\n    params = await promptForNewParams({\n      spec: args.spec,\n      newSpec: args.newSpec,\n      currentParams: args.currentParams,\n      projectId: args.projectId,\n      instanceId: args.instanceId\n    });\n  }\n\n  track(\"Extension Params\", _.isEmpty(params) ? \"Not Present\" : \"Present\", _.size(params));\n  return params;\n}\n\nexports.getParamsForUpdate = getParamsForUpdate;\n\nasync function promptForNewParams(args) {\n  const firebaseProjectParams = await extensionsHelper_1.getFirebaseProjectParams(args.projectId);\n\n  const comparer = (param1, param2) => {\n    return param1.type === param2.type && param1.param === param2.param;\n  };\n\n  let paramsDiffDeletions = _.differenceWith(args.spec.params, _.get(args.newSpec, \"params\", []), comparer);\n\n  paramsDiffDeletions = extensionsHelper_1.substituteParams(paramsDiffDeletions, firebaseProjectParams);\n\n  let paramsDiffAdditions = _.differenceWith(args.newSpec.params, _.get(args.spec, \"params\", []), comparer);\n\n  paramsDiffAdditions = extensionsHelper_1.substituteParams(paramsDiffAdditions, firebaseProjectParams);\n\n  if (paramsDiffDeletions.length) {\n    logger_1.logger.info(\"The following params will no longer be used:\");\n    paramsDiffDeletions.forEach(param => {\n      logger_1.logger.info(clc.red(`- ${param.param}: ${args.currentParams[param.param.toUpperCase()]}`));\n      delete args.currentParams[param.param.toUpperCase()];\n    });\n  }\n\n  if (paramsDiffAdditions.length) {\n    logger_1.logger.info(\"To update this instance, configure the following new parameters:\");\n\n    for (const param of paramsDiffAdditions) {\n      const chosenValue = await askUserForParam.askForParam(args.projectId, args.instanceId, param, false);\n      args.currentParams[param.param] = chosenValue;\n    }\n  }\n\n  return args.currentParams;\n}\n\nexports.promptForNewParams = promptForNewParams;\n\nfunction getParamsFromFile(args) {\n  let envParams;\n\n  try {\n    envParams = readEnvFile(args.paramsEnvPath);\n    track(\"Extension Env File\", \"Present\");\n  } catch (err) {\n    track(\"Extension Env File\", \"Invalid\");\n    throw new error_1.FirebaseError(`Error reading env file: ${err.message}\\n`, {\n      original: err\n    });\n  }\n\n  const params = extensionsHelper_1.populateDefaultParams(envParams, args.paramSpecs);\n  extensionsHelper_1.validateCommandLineParams(params, args.paramSpecs);\n  logger_1.logger.info(`Using param values from ${args.paramsEnvPath}`);\n  return params;\n}\n\nexports.getParamsFromFile = getParamsFromFile;\n\nfunction readEnvFile(envPath) {\n  const buf = fs.readFileSync(path.resolve(envPath), \"utf8\");\n  return dotenv.parse(buf.toString().trim(), {\n    debug: true\n  });\n}\n\nexports.readEnvFile = readEnvFile;","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/extensions/paramHelper.js"],"names":["Object","defineProperty","exports","value","readEnvFile","getParamsFromFile","promptForNewParams","getParamsForUpdate","getParams","getParamsWithCurrentValuesAsDefaults","_","require","path","clc","dotenv","fs","error_1","logger_1","extensionsHelper_1","askUserForParam","track","setNewDefaults","params","newDefaults","forEach","param","toUpperCase","default","extensionInstance","specParams","cloneDeep","get","currentParams","args","nonInteractive","paramsEnvPath","paramsMessage","paramSpecs","map","p","required","join","FirebaseError","projectId","noninteractive","firebaseProjectParams","getFirebaseProjectParams","ask","instanceId","reconfiguring","isEmpty","size","newSpec","spec","comparer","param1","param2","type","paramsDiffDeletions","differenceWith","substituteParams","paramsDiffAdditions","length","logger","info","red","chosenValue","askForParam","envParams","err","message","original","populateDefaultParams","validateCommandLineParams","envPath","buf","readFileSync","resolve","parse","toString","trim","debug"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readEnvFile = exports.getParamsFromFile = exports.promptForNewParams = exports.getParamsForUpdate = exports.getParams = exports.getParamsWithCurrentValuesAsDefaults = void 0;\nconst _ = require(\"lodash\");\nconst path = require(\"path\");\nconst clc = require(\"cli-color\");\nconst dotenv = require(\"dotenv\");\nconst fs = require(\"fs-extra\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\nconst askUserForParam = require(\"./askUserForParam\");\nconst track = require(\"../track\");\nfunction setNewDefaults(params, newDefaults) {\n    params.forEach((param) => {\n        if (newDefaults[param.param.toUpperCase()]) {\n            param.default = newDefaults[param.param.toUpperCase()];\n        }\n    });\n    return params;\n}\nfunction getParamsWithCurrentValuesAsDefaults(extensionInstance) {\n    const specParams = _.cloneDeep(_.get(extensionInstance, \"config.source.spec.params\", []));\n    const currentParams = _.cloneDeep(_.get(extensionInstance, \"config.params\", {}));\n    return setNewDefaults(specParams, currentParams);\n}\nexports.getParamsWithCurrentValuesAsDefaults = getParamsWithCurrentValuesAsDefaults;\nasync function getParams(args) {\n    let params;\n    if (args.nonInteractive && !args.paramsEnvPath) {\n        const paramsMessage = args.paramSpecs\n            .map((p) => {\n            return `\\t${p.param}${p.required ? \"\" : \" (Optional)\"}`;\n        })\n            .join(\"\\n\");\n        throw new error_1.FirebaseError(\"In non-interactive mode but no `--params` flag found. \" +\n            \"To install this extension in non-interactive mode, set `--params` to a path to an .env file\" +\n            \" containing values for this extension's params:\\n\" +\n            paramsMessage);\n    }\n    else if (args.paramsEnvPath) {\n        params = getParamsFromFile({\n            projectId: args.projectId,\n            paramSpecs: args.paramSpecs,\n            noninteractive: args.nonInteractive,\n            paramsEnvPath: args.paramsEnvPath,\n        });\n    }\n    else {\n        const firebaseProjectParams = await extensionsHelper_1.getFirebaseProjectParams(args.projectId);\n        params = await askUserForParam.ask(args.projectId, args.instanceId, args.paramSpecs, firebaseProjectParams, !!args.reconfiguring);\n    }\n    track(\"Extension Params\", _.isEmpty(params) ? \"Not Present\" : \"Present\", _.size(params));\n    return params;\n}\nexports.getParams = getParams;\nasync function getParamsForUpdate(args) {\n    let params;\n    if (args.nonInteractive && !args.paramsEnvPath) {\n        const paramsMessage = args.newSpec.params\n            .map((p) => {\n            return `\\t${p.param}${p.required ? \"\" : \" (Optional)\"}`;\n        })\n            .join(\"\\n\");\n        throw new error_1.FirebaseError(\"In non-interactive mode but no `--params` flag found. \" +\n            \"To update this extension in non-interactive mode, set `--params` to a path to an .env file\" +\n            \" containing values for this extension's params:\\n\" +\n            paramsMessage);\n    }\n    else if (args.paramsEnvPath) {\n        params = getParamsFromFile({\n            projectId: args.projectId,\n            paramSpecs: args.newSpec.params,\n            noninteractive: args.nonInteractive,\n            paramsEnvPath: args.paramsEnvPath,\n        });\n    }\n    else {\n        params = await promptForNewParams({\n            spec: args.spec,\n            newSpec: args.newSpec,\n            currentParams: args.currentParams,\n            projectId: args.projectId,\n            instanceId: args.instanceId,\n        });\n    }\n    track(\"Extension Params\", _.isEmpty(params) ? \"Not Present\" : \"Present\", _.size(params));\n    return params;\n}\nexports.getParamsForUpdate = getParamsForUpdate;\nasync function promptForNewParams(args) {\n    const firebaseProjectParams = await extensionsHelper_1.getFirebaseProjectParams(args.projectId);\n    const comparer = (param1, param2) => {\n        return param1.type === param2.type && param1.param === param2.param;\n    };\n    let paramsDiffDeletions = _.differenceWith(args.spec.params, _.get(args.newSpec, \"params\", []), comparer);\n    paramsDiffDeletions = extensionsHelper_1.substituteParams(paramsDiffDeletions, firebaseProjectParams);\n    let paramsDiffAdditions = _.differenceWith(args.newSpec.params, _.get(args.spec, \"params\", []), comparer);\n    paramsDiffAdditions = extensionsHelper_1.substituteParams(paramsDiffAdditions, firebaseProjectParams);\n    if (paramsDiffDeletions.length) {\n        logger_1.logger.info(\"The following params will no longer be used:\");\n        paramsDiffDeletions.forEach((param) => {\n            logger_1.logger.info(clc.red(`- ${param.param}: ${args.currentParams[param.param.toUpperCase()]}`));\n            delete args.currentParams[param.param.toUpperCase()];\n        });\n    }\n    if (paramsDiffAdditions.length) {\n        logger_1.logger.info(\"To update this instance, configure the following new parameters:\");\n        for (const param of paramsDiffAdditions) {\n            const chosenValue = await askUserForParam.askForParam(args.projectId, args.instanceId, param, false);\n            args.currentParams[param.param] = chosenValue;\n        }\n    }\n    return args.currentParams;\n}\nexports.promptForNewParams = promptForNewParams;\nfunction getParamsFromFile(args) {\n    let envParams;\n    try {\n        envParams = readEnvFile(args.paramsEnvPath);\n        track(\"Extension Env File\", \"Present\");\n    }\n    catch (err) {\n        track(\"Extension Env File\", \"Invalid\");\n        throw new error_1.FirebaseError(`Error reading env file: ${err.message}\\n`, { original: err });\n    }\n    const params = extensionsHelper_1.populateDefaultParams(envParams, args.paramSpecs);\n    extensionsHelper_1.validateCommandLineParams(params, args.paramSpecs);\n    logger_1.logger.info(`Using param values from ${args.paramsEnvPath}`);\n    return params;\n}\nexports.getParamsFromFile = getParamsFromFile;\nfunction readEnvFile(envPath) {\n    const buf = fs.readFileSync(path.resolve(envPath), \"utf8\");\n    return dotenv.parse(buf.toString().trim(), { debug: true });\n}\nexports.readEnvFile = readEnvFile;\n"]},"metadata":{},"sourceType":"script"}