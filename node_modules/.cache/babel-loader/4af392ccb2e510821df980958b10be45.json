{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst marked = require(\"marked\");\n\nconst ora = require(\"ora\");\n\nconst TerminalRenderer = require(\"marked-terminal\");\n\nconst askUserForConsent = require(\"../extensions/askUserForConsent\");\n\nconst displayExtensionInfo_1 = require(\"../extensions/displayExtensionInfo\");\n\nconst billingMigrationHelper_1 = require(\"../extensions/billingMigrationHelper\");\n\nconst checkProjectBilling_1 = require(\"../extensions/checkProjectBilling\");\n\nconst cloudbilling_1 = require(\"../gcp/cloudbilling\");\n\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst extensionsApi = require(\"../extensions/extensionsApi\");\n\nconst secretsUtils = require(\"../extensions/secretsUtils\");\n\nconst provisioningHelper = require(\"../extensions/provisioningHelper\");\n\nconst refs = require(\"../extensions/refs\");\n\nconst warnings_1 = require(\"../extensions/warnings\");\n\nconst paramHelper = require(\"../extensions/paramHelper\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst updateHelper_1 = require(\"../extensions/updateHelper\");\n\nconst utils_1 = require(\"../extensions/utils\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst utils = require(\"../utils\");\n\nconst logger_1 = require(\"../logger\");\n\nconst previews_1 = require(\"../previews\");\n\nmarked.setOptions({\n  renderer: new TerminalRenderer()\n});\n\nasync function installExtension(options) {\n  const {\n    projectId,\n    extensionName,\n    source,\n    extVersion,\n    paramsEnvPath,\n    nonInteractive,\n    force\n  } = options;\n  const spec = (source === null || source === void 0 ? void 0 : source.spec) || (extVersion === null || extVersion === void 0 ? void 0 : extVersion.spec);\n\n  if (!spec) {\n    throw new error_1.FirebaseError(`Could not find the extension.yaml for ${extensionName}. Please make sure this is a valid extension and try again.`);\n  }\n\n  const spinner = ora.default();\n\n  try {\n    await provisioningHelper.checkProductsProvisioned(projectId, spec);\n    const usesSecrets = secretsUtils.usesSecrets(spec);\n\n    if (spec.billingRequired || usesSecrets) {\n      const enabled = await cloudbilling_1.checkBillingEnabled(projectId);\n\n      if (!enabled && nonInteractive) {\n        throw new error_1.FirebaseError(`This extension requires the Blaze plan, but project ${projectId} is not on the Blaze plan. ` + marked(\"Please visit https://console.cloud.google.com/billing/linkedaccount?project=${projectId} to upgrade your project.\"));\n      } else if (!enabled) {\n        await billingMigrationHelper_1.displayNode10CreateBillingNotice(spec, false);\n        await checkProjectBilling_1.enableBilling(projectId, spec.displayName || spec.name);\n      } else {\n        await billingMigrationHelper_1.displayNode10CreateBillingNotice(spec, !nonInteractive);\n      }\n    }\n\n    const apis = spec.apis || [];\n\n    if (usesSecrets) {\n      apis.push({\n        apiName: \"secretmanager.googleapis.com\",\n        reason: `To access and manage secrets which are used by this extension. By using this product you agree to the terms and conditions of the following license: https://console.cloud.google.com/tos?id=cloud&project=${projectId}`\n      });\n    }\n\n    if (apis.length) {\n      askUserForConsent.displayApis(spec.displayName || spec.name, projectId, apis);\n      const consented = await extensionsHelper_1.confirm({\n        nonInteractive,\n        force,\n        default: true\n      });\n\n      if (!consented) {\n        throw new error_1.FirebaseError(\"Without explicit consent for the APIs listed, we cannot deploy this extension.\");\n      }\n    }\n\n    if (usesSecrets) {\n      await secretsUtils.ensureSecretManagerApiEnabled(options);\n    }\n\n    const roles = spec.roles ? spec.roles.map(role => role.role) : [];\n\n    if (roles.length) {\n      await askUserForConsent.displayRoles(spec.displayName || spec.name, projectId, roles);\n      const consented = await extensionsHelper_1.confirm({\n        nonInteractive,\n        force,\n        default: true\n      });\n\n      if (!consented) {\n        throw new error_1.FirebaseError(\"Without explicit consent for the roles listed, we cannot deploy this extension.\");\n      }\n    }\n\n    let instanceId = spec.name;\n    let choice;\n    const anotherInstanceExists = await extensionsHelper_1.instanceIdExists(projectId, instanceId);\n\n    if (anotherInstanceExists) {\n      if (!nonInteractive) {\n        choice = await extensionsHelper_1.promptForRepeatInstance(projectId, spec.name);\n      } else if (nonInteractive && force) {\n        choice = \"updateExisting\";\n      } else {\n        throw new error_1.FirebaseError(`An extension with the ID '${clc.bold(extensionName)}' already exists in the project '${clc.bold(projectId)}'.` + ` To update or reconfigure this instance instead, rerun this command with the --force flag.`);\n      }\n    } else {\n      choice = \"installNew\";\n    }\n\n    let params;\n\n    switch (choice) {\n      case \"installNew\":\n        instanceId = await extensionsHelper_1.promptForValidInstanceId(`${instanceId}-${utils_1.getRandomString(4)}`);\n        params = await paramHelper.getParams({\n          projectId,\n          paramSpecs: spec.params,\n          nonInteractive,\n          paramsEnvPath,\n          instanceId\n        });\n        spinner.text = \"Installing your extension instance. This usually takes 3 to 5 minutes...\";\n        spinner.start();\n        await extensionsApi.createInstance({\n          projectId,\n          instanceId,\n          extensionSource: source,\n          extensionVersionRef: extVersion === null || extVersion === void 0 ? void 0 : extVersion.ref,\n          params\n        });\n        spinner.stop();\n        utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `Successfully installed your instance of ${clc.bold(spec.displayName || spec.name)}! ` + `Its Instance ID is ${clc.bold(instanceId)}.`);\n        break;\n\n      case \"updateExisting\":\n        params = await paramHelper.getParams({\n          projectId,\n          paramSpecs: spec.params,\n          nonInteractive,\n          paramsEnvPath,\n          instanceId\n        });\n        spinner.text = \"Updating your extension instance. This usually takes 3 to 5 minutes...\";\n        spinner.start();\n        await updateHelper_1.update({\n          projectId,\n          instanceId,\n          source,\n          extRef: extVersion === null || extVersion === void 0 ? void 0 : extVersion.ref,\n          params\n        });\n        spinner.stop();\n        utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `Successfully updated your instance of ${clc.bold(spec.displayName || spec.name)}! ` + `Its Instance ID is ${clc.bold(instanceId)}.`);\n        break;\n\n      case \"cancel\":\n        return;\n    }\n\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(\"Go to the Firebase console to view instructions for using your extension, \" + `which may include some required post-installation tasks: ${utils.consoleUrl(projectId, `/extensions/instances/${instanceId}?tab=usage`)}`));\n    logger_1.logger.info(marked(\"You can run `firebase ext` to view available Firebase Extensions commands, \" + \"including those to update, reconfigure, or delete your installed extension.\"));\n  } catch (err) {\n    if (spinner.isSpinning) {\n      spinner.fail();\n    }\n\n    if (err instanceof error_1.FirebaseError) {\n      throw err;\n    }\n\n    throw new error_1.FirebaseError(`Error occurred installing extension: ${err.message}`, {\n      original: err\n    });\n  }\n}\n\nasync function infoInstallBySource(projectId, extensionName) {\n  let source;\n\n  try {\n    source = await extensionsHelper_1.createSourceFromLocation(projectId, extensionName);\n  } catch (err) {\n    throw new error_1.FirebaseError(`Unable to find published extension '${clc.bold(extensionName)}', ` + `and encountered the following error when trying to create an instance of extension '${clc.bold(extensionName)}':\\n ${err.message}`);\n  }\n\n  displayExtensionInfo_1.displayExtInfo(extensionName, \"\", source.spec);\n  return source;\n}\n\nasync function infoInstallByReference(extensionName) {\n  if (extensionName.split(\"/\").length < 2) {\n    const [extensionID, version] = extensionName.split(\"@\");\n    extensionName = `firebase/${extensionID}@${version || \"latest\"}`;\n  }\n\n  const ref = refs.parse(extensionName);\n  const extension = await extensionsApi.getExtension(refs.toExtensionRef(ref));\n\n  if (!ref.version) {\n    extensionName = `${extensionName}@latest`;\n  }\n\n  const extVersion = await extensionsApi.getExtensionVersion(extensionName);\n  displayExtensionInfo_1.displayExtInfo(extensionName, ref.publisherId, extVersion.spec, true);\n  await warnings_1.displayWarningPrompts(ref.publisherId, extension.registryLaunchStage, extVersion);\n  return extVersion;\n}\n\nexports.default = new command_1.Command(\"ext:install [extensionName]\").description(\"install an official extension if [extensionName] or [extensionName@version] is provided; \" + (previews_1.previews.extdev ? \"install a local extension if [localPathOrUrl] or [url#root] is provided; install a published extension (not authored by Firebase) if [publisherId/extensionId] is provided \" : \"\") + \"or run with `-i` to see all available extensions.\").withForce().option(\"--params <paramsFile>\", \"name of params variables file with .env format.\").before(requirePermissions_1.requirePermissions, [\"firebaseextensions.instances.create\"]).before(extensionsHelper_1.ensureExtensionsApiEnabled).before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extMinVersion\").action(async (extensionName, options) => {\n  const projectId = projectUtils_1.needProjectId(options);\n  const paramsEnvPath = options.params;\n  let learnMore = false;\n\n  if (!extensionName) {\n    if (options.interactive) {\n      learnMore = true;\n      extensionName = await extensionsHelper_1.promptForOfficialExtension(\"Which official extension do you wish to install?\\n\" + \"  Select an extension, then press Enter to learn more.\");\n    } else {\n      throw new error_1.FirebaseError(`Unable to find published extension '${clc.bold(extensionName)}'. ` + `Run ${clc.bold(\"firebase ext:install -i\")} to select from the list of all available published extensions.`);\n    }\n  }\n\n  let source;\n  let extVersion;\n\n  if (extensionsHelper_1.isLocalOrURLPath(extensionName)) {\n    source = await infoInstallBySource(projectId, extensionName);\n  } else {\n    extVersion = await infoInstallByReference(extensionName);\n  }\n\n  if (!(await extensionsHelper_1.confirm({\n    nonInteractive: options.nonInteractive,\n    force: options.force,\n    default: true\n  }))) {\n    return;\n  }\n\n  if (!source && !extVersion) {\n    throw new error_1.FirebaseError(\"Could not find a source. Please specify a valid source to continue.\");\n  }\n\n  const spec = (source === null || source === void 0 ? void 0 : source.spec) || (extVersion === null || extVersion === void 0 ? void 0 : extVersion.spec);\n\n  if (!spec) {\n    throw new error_1.FirebaseError(`Could not find the extension.yaml for extension '${clc.bold(extensionName)}'. Please make sure this is a valid extension and try again.`);\n  }\n\n  if (learnMore) {\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, `You selected: ${clc.bold(spec.displayName)}.\\n` + `${spec.description}\\n` + `View details: https://firebase.google.com/products/extensions/${spec.name}\\n`);\n  }\n\n  try {\n    return installExtension({\n      paramsEnvPath,\n      projectId,\n      extensionName,\n      source,\n      extVersion,\n      nonInteractive: options.nonInteractive,\n      force: options.force\n    });\n  } catch (err) {\n    if (!(err instanceof error_1.FirebaseError)) {\n      throw new error_1.FirebaseError(`Error occurred installing the extension: ${err.message}`, {\n        original: err\n      });\n    }\n\n    throw err;\n  }\n});","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/commands/ext-install.js"],"names":["Object","defineProperty","exports","value","clc","require","marked","ora","TerminalRenderer","askUserForConsent","displayExtensionInfo_1","billingMigrationHelper_1","checkProjectBilling_1","cloudbilling_1","checkMinRequiredVersion_1","command_1","error_1","projectUtils_1","extensionsApi","secretsUtils","provisioningHelper","refs","warnings_1","paramHelper","extensionsHelper_1","updateHelper_1","utils_1","requirePermissions_1","utils","logger_1","previews_1","setOptions","renderer","installExtension","options","projectId","extensionName","source","extVersion","paramsEnvPath","nonInteractive","force","spec","FirebaseError","spinner","default","checkProductsProvisioned","usesSecrets","billingRequired","enabled","checkBillingEnabled","displayNode10CreateBillingNotice","enableBilling","displayName","name","apis","push","apiName","reason","length","displayApis","consented","confirm","ensureSecretManagerApiEnabled","roles","map","role","displayRoles","instanceId","choice","anotherInstanceExists","instanceIdExists","promptForRepeatInstance","bold","params","promptForValidInstanceId","getRandomString","getParams","paramSpecs","text","start","createInstance","extensionSource","extensionVersionRef","ref","stop","logLabeledSuccess","logPrefix","update","extRef","logLabeledBullet","consoleUrl","logger","info","err","isSpinning","fail","message","original","infoInstallBySource","createSourceFromLocation","displayExtInfo","infoInstallByReference","split","extensionID","version","parse","extension","getExtension","toExtensionRef","getExtensionVersion","publisherId","displayWarningPrompts","registryLaunchStage","Command","description","previews","extdev","withForce","option","before","requirePermissions","ensureExtensionsApiEnabled","checkMinRequiredVersion","action","needProjectId","learnMore","interactive","promptForOfficialExtension","isLocalOrURLPath"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst marked = require(\"marked\");\nconst ora = require(\"ora\");\nconst TerminalRenderer = require(\"marked-terminal\");\nconst askUserForConsent = require(\"../extensions/askUserForConsent\");\nconst displayExtensionInfo_1 = require(\"../extensions/displayExtensionInfo\");\nconst billingMigrationHelper_1 = require(\"../extensions/billingMigrationHelper\");\nconst checkProjectBilling_1 = require(\"../extensions/checkProjectBilling\");\nconst cloudbilling_1 = require(\"../gcp/cloudbilling\");\nconst checkMinRequiredVersion_1 = require(\"../checkMinRequiredVersion\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst extensionsApi = require(\"../extensions/extensionsApi\");\nconst secretsUtils = require(\"../extensions/secretsUtils\");\nconst provisioningHelper = require(\"../extensions/provisioningHelper\");\nconst refs = require(\"../extensions/refs\");\nconst warnings_1 = require(\"../extensions/warnings\");\nconst paramHelper = require(\"../extensions/paramHelper\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst updateHelper_1 = require(\"../extensions/updateHelper\");\nconst utils_1 = require(\"../extensions/utils\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst utils = require(\"../utils\");\nconst logger_1 = require(\"../logger\");\nconst previews_1 = require(\"../previews\");\nmarked.setOptions({\n    renderer: new TerminalRenderer(),\n});\nasync function installExtension(options) {\n    const { projectId, extensionName, source, extVersion, paramsEnvPath, nonInteractive, force, } = options;\n    const spec = (source === null || source === void 0 ? void 0 : source.spec) || (extVersion === null || extVersion === void 0 ? void 0 : extVersion.spec);\n    if (!spec) {\n        throw new error_1.FirebaseError(`Could not find the extension.yaml for ${extensionName}. Please make sure this is a valid extension and try again.`);\n    }\n    const spinner = ora.default();\n    try {\n        await provisioningHelper.checkProductsProvisioned(projectId, spec);\n        const usesSecrets = secretsUtils.usesSecrets(spec);\n        if (spec.billingRequired || usesSecrets) {\n            const enabled = await cloudbilling_1.checkBillingEnabled(projectId);\n            if (!enabled && nonInteractive) {\n                throw new error_1.FirebaseError(`This extension requires the Blaze plan, but project ${projectId} is not on the Blaze plan. ` +\n                    marked(\"Please visit https://console.cloud.google.com/billing/linkedaccount?project=${projectId} to upgrade your project.\"));\n            }\n            else if (!enabled) {\n                await billingMigrationHelper_1.displayNode10CreateBillingNotice(spec, false);\n                await checkProjectBilling_1.enableBilling(projectId, spec.displayName || spec.name);\n            }\n            else {\n                await billingMigrationHelper_1.displayNode10CreateBillingNotice(spec, !nonInteractive);\n            }\n        }\n        const apis = spec.apis || [];\n        if (usesSecrets) {\n            apis.push({\n                apiName: \"secretmanager.googleapis.com\",\n                reason: `To access and manage secrets which are used by this extension. By using this product you agree to the terms and conditions of the following license: https://console.cloud.google.com/tos?id=cloud&project=${projectId}`,\n            });\n        }\n        if (apis.length) {\n            askUserForConsent.displayApis(spec.displayName || spec.name, projectId, apis);\n            const consented = await extensionsHelper_1.confirm({ nonInteractive, force, default: true });\n            if (!consented) {\n                throw new error_1.FirebaseError(\"Without explicit consent for the APIs listed, we cannot deploy this extension.\");\n            }\n        }\n        if (usesSecrets) {\n            await secretsUtils.ensureSecretManagerApiEnabled(options);\n        }\n        const roles = spec.roles ? spec.roles.map((role) => role.role) : [];\n        if (roles.length) {\n            await askUserForConsent.displayRoles(spec.displayName || spec.name, projectId, roles);\n            const consented = await extensionsHelper_1.confirm({ nonInteractive, force, default: true });\n            if (!consented) {\n                throw new error_1.FirebaseError(\"Without explicit consent for the roles listed, we cannot deploy this extension.\");\n            }\n        }\n        let instanceId = spec.name;\n        let choice;\n        const anotherInstanceExists = await extensionsHelper_1.instanceIdExists(projectId, instanceId);\n        if (anotherInstanceExists) {\n            if (!nonInteractive) {\n                choice = await extensionsHelper_1.promptForRepeatInstance(projectId, spec.name);\n            }\n            else if (nonInteractive && force) {\n                choice = \"updateExisting\";\n            }\n            else {\n                throw new error_1.FirebaseError(`An extension with the ID '${clc.bold(extensionName)}' already exists in the project '${clc.bold(projectId)}'.` +\n                    ` To update or reconfigure this instance instead, rerun this command with the --force flag.`);\n            }\n        }\n        else {\n            choice = \"installNew\";\n        }\n        let params;\n        switch (choice) {\n            case \"installNew\":\n                instanceId = await extensionsHelper_1.promptForValidInstanceId(`${instanceId}-${utils_1.getRandomString(4)}`);\n                params = await paramHelper.getParams({\n                    projectId,\n                    paramSpecs: spec.params,\n                    nonInteractive,\n                    paramsEnvPath,\n                    instanceId,\n                });\n                spinner.text = \"Installing your extension instance. This usually takes 3 to 5 minutes...\";\n                spinner.start();\n                await extensionsApi.createInstance({\n                    projectId,\n                    instanceId,\n                    extensionSource: source,\n                    extensionVersionRef: extVersion === null || extVersion === void 0 ? void 0 : extVersion.ref,\n                    params,\n                });\n                spinner.stop();\n                utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `Successfully installed your instance of ${clc.bold(spec.displayName || spec.name)}! ` +\n                    `Its Instance ID is ${clc.bold(instanceId)}.`);\n                break;\n            case \"updateExisting\":\n                params = await paramHelper.getParams({\n                    projectId,\n                    paramSpecs: spec.params,\n                    nonInteractive,\n                    paramsEnvPath,\n                    instanceId,\n                });\n                spinner.text = \"Updating your extension instance. This usually takes 3 to 5 minutes...\";\n                spinner.start();\n                await updateHelper_1.update({\n                    projectId,\n                    instanceId,\n                    source,\n                    extRef: extVersion === null || extVersion === void 0 ? void 0 : extVersion.ref,\n                    params,\n                });\n                spinner.stop();\n                utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `Successfully updated your instance of ${clc.bold(spec.displayName || spec.name)}! ` +\n                    `Its Instance ID is ${clc.bold(instanceId)}.`);\n                break;\n            case \"cancel\":\n                return;\n        }\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(\"Go to the Firebase console to view instructions for using your extension, \" +\n            `which may include some required post-installation tasks: ${utils.consoleUrl(projectId, `/extensions/instances/${instanceId}?tab=usage`)}`));\n        logger_1.logger.info(marked(\"You can run `firebase ext` to view available Firebase Extensions commands, \" +\n            \"including those to update, reconfigure, or delete your installed extension.\"));\n    }\n    catch (err) {\n        if (spinner.isSpinning) {\n            spinner.fail();\n        }\n        if (err instanceof error_1.FirebaseError) {\n            throw err;\n        }\n        throw new error_1.FirebaseError(`Error occurred installing extension: ${err.message}`, {\n            original: err,\n        });\n    }\n}\nasync function infoInstallBySource(projectId, extensionName) {\n    let source;\n    try {\n        source = await extensionsHelper_1.createSourceFromLocation(projectId, extensionName);\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(`Unable to find published extension '${clc.bold(extensionName)}', ` +\n            `and encountered the following error when trying to create an instance of extension '${clc.bold(extensionName)}':\\n ${err.message}`);\n    }\n    displayExtensionInfo_1.displayExtInfo(extensionName, \"\", source.spec);\n    return source;\n}\nasync function infoInstallByReference(extensionName) {\n    if (extensionName.split(\"/\").length < 2) {\n        const [extensionID, version] = extensionName.split(\"@\");\n        extensionName = `firebase/${extensionID}@${version || \"latest\"}`;\n    }\n    const ref = refs.parse(extensionName);\n    const extension = await extensionsApi.getExtension(refs.toExtensionRef(ref));\n    if (!ref.version) {\n        extensionName = `${extensionName}@latest`;\n    }\n    const extVersion = await extensionsApi.getExtensionVersion(extensionName);\n    displayExtensionInfo_1.displayExtInfo(extensionName, ref.publisherId, extVersion.spec, true);\n    await warnings_1.displayWarningPrompts(ref.publisherId, extension.registryLaunchStage, extVersion);\n    return extVersion;\n}\nexports.default = new command_1.Command(\"ext:install [extensionName]\")\n    .description(\"install an official extension if [extensionName] or [extensionName@version] is provided; \" +\n    (previews_1.previews.extdev\n        ? \"install a local extension if [localPathOrUrl] or [url#root] is provided; install a published extension (not authored by Firebase) if [publisherId/extensionId] is provided \"\n        : \"\") +\n    \"or run with `-i` to see all available extensions.\")\n    .withForce()\n    .option(\"--params <paramsFile>\", \"name of params variables file with .env format.\")\n    .before(requirePermissions_1.requirePermissions, [\"firebaseextensions.instances.create\"])\n    .before(extensionsHelper_1.ensureExtensionsApiEnabled)\n    .before(checkMinRequiredVersion_1.checkMinRequiredVersion, \"extMinVersion\")\n    .action(async (extensionName, options) => {\n    const projectId = projectUtils_1.needProjectId(options);\n    const paramsEnvPath = options.params;\n    let learnMore = false;\n    if (!extensionName) {\n        if (options.interactive) {\n            learnMore = true;\n            extensionName = await extensionsHelper_1.promptForOfficialExtension(\"Which official extension do you wish to install?\\n\" +\n                \"  Select an extension, then press Enter to learn more.\");\n        }\n        else {\n            throw new error_1.FirebaseError(`Unable to find published extension '${clc.bold(extensionName)}'. ` +\n                `Run ${clc.bold(\"firebase ext:install -i\")} to select from the list of all available published extensions.`);\n        }\n    }\n    let source;\n    let extVersion;\n    if (extensionsHelper_1.isLocalOrURLPath(extensionName)) {\n        source = await infoInstallBySource(projectId, extensionName);\n    }\n    else {\n        extVersion = await infoInstallByReference(extensionName);\n    }\n    if (!(await extensionsHelper_1.confirm({\n        nonInteractive: options.nonInteractive,\n        force: options.force,\n        default: true,\n    }))) {\n        return;\n    }\n    if (!source && !extVersion) {\n        throw new error_1.FirebaseError(\"Could not find a source. Please specify a valid source to continue.\");\n    }\n    const spec = (source === null || source === void 0 ? void 0 : source.spec) || (extVersion === null || extVersion === void 0 ? void 0 : extVersion.spec);\n    if (!spec) {\n        throw new error_1.FirebaseError(`Could not find the extension.yaml for extension '${clc.bold(extensionName)}'. Please make sure this is a valid extension and try again.`);\n    }\n    if (learnMore) {\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, `You selected: ${clc.bold(spec.displayName)}.\\n` +\n            `${spec.description}\\n` +\n            `View details: https://firebase.google.com/products/extensions/${spec.name}\\n`);\n    }\n    try {\n        return installExtension({\n            paramsEnvPath,\n            projectId,\n            extensionName,\n            source,\n            extVersion,\n            nonInteractive: options.nonInteractive,\n            force: options.force,\n        });\n    }\n    catch (err) {\n        if (!(err instanceof error_1.FirebaseError)) {\n            throw new error_1.FirebaseError(`Error occurred installing the extension: ${err.message}`, {\n                original: err,\n            });\n        }\n        throw err;\n    }\n});\n"]},"metadata":{},"sourceType":"script"}