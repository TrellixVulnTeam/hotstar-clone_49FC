{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst projectUtils_1 = require(\"../projectUtils\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst backend = require(\"../deploy/functions/backend\");\n\nconst previews_1 = require(\"../previews\");\n\nconst logger_1 = require(\"../logger\");\n\nconst Table = require(\"cli-table\");\n\nexports.default = new command_1.Command(\"functions:list\").description(\"list all deployed functions in your Firebase project\").before(requirePermissions_1.requirePermissions, [\"cloudfunctions.functions.list\"]).action(async options => {\n  try {\n    const context = {\n      projectId: projectUtils_1.needProjectId(options)\n    };\n    const existing = await backend.existingBackend(context);\n    const endpointsList = backend.allEndpoints(existing).sort(backend.compareFunctions);\n    const table = previews_1.previews.functionsv2 ? new Table({\n      head: [\"Function\", \"Version\", \"Trigger\", \"Location\", \"Memory\", \"Runtime\"],\n      style: {\n        head: [\"yellow\"]\n      }\n    }) : new Table({\n      head: [\"Function\", \"Trigger\", \"Location\", \"Memory\", \"Runtime\"],\n      style: {\n        head: [\"yellow\"]\n      }\n    });\n\n    for (const endpoint of endpointsList) {\n      const trigger = backend.endpointTriggerType(endpoint);\n      const availableMemoryMb = endpoint.availableMemoryMb || \"---\";\n      const entry = previews_1.previews.functionsv2 ? [endpoint.id, endpoint.platform === \"gcfv2\" ? \"v2\" : \"v1\", trigger, endpoint.region, availableMemoryMb, endpoint.runtime] : [endpoint.id, trigger, endpoint.region, availableMemoryMb, endpoint.runtime];\n      table.push(entry);\n    }\n\n    logger_1.logger.info(table.toString());\n    return endpointsList;\n  } catch (err) {\n    throw new error_1.FirebaseError(\"Failed to list functions\", {\n      exit: 1,\n      original: err\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/commands/functions-list.js"],"names":["Object","defineProperty","exports","value","command_1","require","error_1","projectUtils_1","requirePermissions_1","backend","previews_1","logger_1","Table","default","Command","description","before","requirePermissions","action","options","context","projectId","needProjectId","existing","existingBackend","endpointsList","allEndpoints","sort","compareFunctions","table","previews","functionsv2","head","style","endpoint","trigger","endpointTriggerType","availableMemoryMb","entry","id","platform","region","runtime","push","logger","info","toString","err","FirebaseError","exit","original"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst projectUtils_1 = require(\"../projectUtils\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst backend = require(\"../deploy/functions/backend\");\nconst previews_1 = require(\"../previews\");\nconst logger_1 = require(\"../logger\");\nconst Table = require(\"cli-table\");\nexports.default = new command_1.Command(\"functions:list\")\n    .description(\"list all deployed functions in your Firebase project\")\n    .before(requirePermissions_1.requirePermissions, [\"cloudfunctions.functions.list\"])\n    .action(async (options) => {\n    try {\n        const context = {\n            projectId: projectUtils_1.needProjectId(options),\n        };\n        const existing = await backend.existingBackend(context);\n        const endpointsList = backend.allEndpoints(existing).sort(backend.compareFunctions);\n        const table = previews_1.previews.functionsv2\n            ? new Table({\n                head: [\"Function\", \"Version\", \"Trigger\", \"Location\", \"Memory\", \"Runtime\"],\n                style: { head: [\"yellow\"] },\n            })\n            : new Table({\n                head: [\"Function\", \"Trigger\", \"Location\", \"Memory\", \"Runtime\"],\n                style: { head: [\"yellow\"] },\n            });\n        for (const endpoint of endpointsList) {\n            const trigger = backend.endpointTriggerType(endpoint);\n            const availableMemoryMb = endpoint.availableMemoryMb || \"---\";\n            const entry = previews_1.previews.functionsv2\n                ? [\n                    endpoint.id,\n                    endpoint.platform === \"gcfv2\" ? \"v2\" : \"v1\",\n                    trigger,\n                    endpoint.region,\n                    availableMemoryMb,\n                    endpoint.runtime,\n                ]\n                : [endpoint.id, trigger, endpoint.region, availableMemoryMb, endpoint.runtime];\n            table.push(entry);\n        }\n        logger_1.logger.info(table.toString());\n        return endpointsList;\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(\"Failed to list functions\", {\n            exit: 1,\n            original: err,\n        });\n    }\n});\n"]},"metadata":{},"sourceType":"script"}