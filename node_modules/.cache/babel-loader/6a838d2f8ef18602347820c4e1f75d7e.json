{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.downloadEmulator = void 0;\n\nconst crypto = require(\"crypto\");\n\nconst fs = require(\"fs-extra\");\n\nconst path = require(\"path\");\n\nconst tmp = require(\"tmp\");\n\nconst unzipper = require(\"unzipper\");\n\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\n\nconst error_1 = require(\"../error\");\n\nconst downloadableEmulators = require(\"./downloadableEmulators\");\n\nconst downloadUtils = require(\"../downloadUtils\");\n\ntmp.setGracefulCleanup();\n\nasync function downloadEmulator(name) {\n  const emulator = downloadableEmulators.getDownloadDetails(name);\n  emulatorLogger_1.EmulatorLogger.forEmulator(name).logLabeled(\"BULLET\", name, `downloading ${path.basename(emulator.downloadPath)}...`);\n  fs.ensureDirSync(emulator.opts.cacheDir);\n  const tmpfile = await downloadUtils.downloadToTmp(emulator.opts.remoteUrl);\n\n  if (!emulator.opts.skipChecksumAndSize) {\n    await validateSize(tmpfile, emulator.opts.expectedSize);\n    await validateChecksum(tmpfile, emulator.opts.expectedChecksum);\n  }\n\n  if (emulator.opts.skipCache) {\n    removeOldFiles(name, emulator, true);\n  }\n\n  fs.copySync(tmpfile, emulator.downloadPath);\n\n  if (emulator.unzipDir) {\n    await unzip(emulator.downloadPath, emulator.unzipDir);\n  }\n\n  const executablePath = emulator.binaryPath || emulator.downloadPath;\n  fs.chmodSync(executablePath, 0o755);\n  removeOldFiles(name, emulator);\n}\n\nexports.downloadEmulator = downloadEmulator;\n\nfunction unzip(zipPath, unzipDir) {\n  return new Promise((resolve, reject) => {\n    fs.createReadStream(zipPath).pipe(unzipper.Extract({\n      path: unzipDir\n    })).on(\"error\", reject).on(\"finish\", resolve);\n  });\n}\n\nfunction removeOldFiles(name, emulator, removeAllVersions = false) {\n  const currentLocalPath = emulator.downloadPath;\n  const currentUnzipPath = emulator.unzipDir;\n  const files = fs.readdirSync(emulator.opts.cacheDir);\n\n  for (const file of files) {\n    const fullFilePath = path.join(emulator.opts.cacheDir, file);\n\n    if (file.indexOf(emulator.opts.namePrefix) < 0) {\n      continue;\n    }\n\n    if (fullFilePath !== currentLocalPath && fullFilePath !== currentUnzipPath || removeAllVersions) {\n      emulatorLogger_1.EmulatorLogger.forEmulator(name).logLabeled(\"BULLET\", name, `Removing outdated emulator files: ${file}`);\n      fs.removeSync(fullFilePath);\n    }\n  }\n}\n\nfunction validateSize(filepath, expectedSize) {\n  return new Promise((resolve, reject) => {\n    const stat = fs.statSync(filepath);\n    return stat.size === expectedSize ? resolve() : reject(new error_1.FirebaseError(`download failed, expected ${expectedSize} bytes but got ${stat.size}`, {\n      exit: 1\n    }));\n  });\n}\n\nfunction validateChecksum(filepath, expectedChecksum) {\n  return new Promise((resolve, reject) => {\n    const hash = crypto.createHash(\"md5\");\n    const stream = fs.createReadStream(filepath);\n    stream.on(\"data\", data => hash.update(data));\n    stream.on(\"end\", () => {\n      const checksum = hash.digest(\"hex\");\n      return checksum === expectedChecksum ? resolve() : reject(new error_1.FirebaseError(`download failed, expected checksum ${expectedChecksum} but got ${checksum}`, {\n        exit: 1\n      }));\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/Sharik/Desktop/Projects/ReactProject/my-first-app/node_modules/firebase-tools/lib/emulator/download.js"],"names":["Object","defineProperty","exports","value","downloadEmulator","crypto","require","fs","path","tmp","unzipper","emulatorLogger_1","error_1","downloadableEmulators","downloadUtils","setGracefulCleanup","name","emulator","getDownloadDetails","EmulatorLogger","forEmulator","logLabeled","basename","downloadPath","ensureDirSync","opts","cacheDir","tmpfile","downloadToTmp","remoteUrl","skipChecksumAndSize","validateSize","expectedSize","validateChecksum","expectedChecksum","skipCache","removeOldFiles","copySync","unzipDir","unzip","executablePath","binaryPath","chmodSync","zipPath","Promise","resolve","reject","createReadStream","pipe","Extract","on","removeAllVersions","currentLocalPath","currentUnzipPath","files","readdirSync","file","fullFilePath","join","indexOf","namePrefix","removeSync","filepath","stat","statSync","size","FirebaseError","exit","hash","createHash","stream","data","update","checksum","digest"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.downloadEmulator = void 0;\nconst crypto = require(\"crypto\");\nconst fs = require(\"fs-extra\");\nconst path = require(\"path\");\nconst tmp = require(\"tmp\");\nconst unzipper = require(\"unzipper\");\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\nconst error_1 = require(\"../error\");\nconst downloadableEmulators = require(\"./downloadableEmulators\");\nconst downloadUtils = require(\"../downloadUtils\");\ntmp.setGracefulCleanup();\nasync function downloadEmulator(name) {\n    const emulator = downloadableEmulators.getDownloadDetails(name);\n    emulatorLogger_1.EmulatorLogger.forEmulator(name).logLabeled(\"BULLET\", name, `downloading ${path.basename(emulator.downloadPath)}...`);\n    fs.ensureDirSync(emulator.opts.cacheDir);\n    const tmpfile = await downloadUtils.downloadToTmp(emulator.opts.remoteUrl);\n    if (!emulator.opts.skipChecksumAndSize) {\n        await validateSize(tmpfile, emulator.opts.expectedSize);\n        await validateChecksum(tmpfile, emulator.opts.expectedChecksum);\n    }\n    if (emulator.opts.skipCache) {\n        removeOldFiles(name, emulator, true);\n    }\n    fs.copySync(tmpfile, emulator.downloadPath);\n    if (emulator.unzipDir) {\n        await unzip(emulator.downloadPath, emulator.unzipDir);\n    }\n    const executablePath = emulator.binaryPath || emulator.downloadPath;\n    fs.chmodSync(executablePath, 0o755);\n    removeOldFiles(name, emulator);\n}\nexports.downloadEmulator = downloadEmulator;\nfunction unzip(zipPath, unzipDir) {\n    return new Promise((resolve, reject) => {\n        fs.createReadStream(zipPath)\n            .pipe(unzipper.Extract({ path: unzipDir }))\n            .on(\"error\", reject)\n            .on(\"finish\", resolve);\n    });\n}\nfunction removeOldFiles(name, emulator, removeAllVersions = false) {\n    const currentLocalPath = emulator.downloadPath;\n    const currentUnzipPath = emulator.unzipDir;\n    const files = fs.readdirSync(emulator.opts.cacheDir);\n    for (const file of files) {\n        const fullFilePath = path.join(emulator.opts.cacheDir, file);\n        if (file.indexOf(emulator.opts.namePrefix) < 0) {\n            continue;\n        }\n        if ((fullFilePath !== currentLocalPath && fullFilePath !== currentUnzipPath) ||\n            removeAllVersions) {\n            emulatorLogger_1.EmulatorLogger.forEmulator(name).logLabeled(\"BULLET\", name, `Removing outdated emulator files: ${file}`);\n            fs.removeSync(fullFilePath);\n        }\n    }\n}\nfunction validateSize(filepath, expectedSize) {\n    return new Promise((resolve, reject) => {\n        const stat = fs.statSync(filepath);\n        return stat.size === expectedSize\n            ? resolve()\n            : reject(new error_1.FirebaseError(`download failed, expected ${expectedSize} bytes but got ${stat.size}`, { exit: 1 }));\n    });\n}\nfunction validateChecksum(filepath, expectedChecksum) {\n    return new Promise((resolve, reject) => {\n        const hash = crypto.createHash(\"md5\");\n        const stream = fs.createReadStream(filepath);\n        stream.on(\"data\", (data) => hash.update(data));\n        stream.on(\"end\", () => {\n            const checksum = hash.digest(\"hex\");\n            return checksum === expectedChecksum\n                ? resolve()\n                : reject(new error_1.FirebaseError(`download failed, expected checksum ${expectedChecksum} but got ${checksum}`, { exit: 1 }));\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"script"}